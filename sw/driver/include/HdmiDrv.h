/*****************************************************************************
* Model: tym_platform.qm
* File:  F:\Project_Atmos\tymphany_platform\sw/driver\include\HdmiDrv.h
*
* This code has been generated by QM tool (see state-machine.com/qm).
* DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
*
* This program is open source software: you can redistribute it and/or
* modify it under the terms of the GNU General Public License as published
* by the Free Software Foundation.
*
* This program is distributed in the hope that it will be useful, but
* WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
* or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
* for more details.
*****************************************************************************/
/*${F:\Project_Atmos~::driver\include\HdmiDrv.h} ...........................*/
/**
 *  @file      hdmi_driver.h
 *  @brief     This file contains the EP91A6S HDMI driver implementation.
 *  @author    Albert
 *  @date      23-May-2016
 */
#ifndef HDMI_DRIVER_H
#define HDMI_DRIVER_H

#ifdef STM32F0XX
#include "stm32f0xx.h"
#endif

#ifdef STM32F4XX
#include "stm32f4xx.h"
#endif

#include "GPIODrv.h"
#include "SWi2c_Drv.h"

#define MAIN_AP_DUMMY_API

#include "qp_port.h"
#include "qf.h"

#define MAX_REG_READ    5       

#define HDMI_ENABLE     1
#define HDMI_DISABLE    0
#define HDMI_ON         1
#define HDMI_OFF        0

#define HDMI_PORT_NONE  0xf     //Not HDMI_PORT/ARC
#define HDMI_PORT_1     1
#define HDMI_PORT_ARC   6

#ifdef __cplusplus
extern "C" {
#endif
/*${AOs::HdmiDrv} ..........................................................*/
typedef struct {
/* private: */
    uint8_t m_isReady; 
    uint8_t m_reg_read_buf[MAX_REG_READ]; //temp buffer
    uint8_t m_register_x10;         //cache register 0x10
    uint8_t m_register_x11;         //cache register 0x11
    uint8_t m_register_x12;         //cache register 0x12
    uint8_t m_register_x13;         //cache register 0x13    
    uint8_t m_register_x14;         //cache register 0x14
    uint8_t m_volume;               //CEC volume
    uint8_t m_source;               //current input port
    uint16_t m_videoLatency;
    uint16_t m_interlacedVideoLatency;
    cGpioDrv m_gpioDrv;             //for HDMI_AMUTE and HMCU_INTB pin

/* public: */
    uint16_t m_volumeLimit;         
    cSWi2cDrv_t m_i2cDrv;           //I2C driver
} HdmiDrv;

/* private: */
void HdmiDrv_GPIO_initial(HdmiDrv * const me);

/* It's only for debug. */
void HdmiDrv_GPIO_initial2(HdmiDrv * const me);
void HdmiDrv_I2C_initial(HdmiDrv * const me);
uint8_t HdmiDrv_I2C_read(
    HdmiDrv * const me,
    uint8_t addr,
    uint8_t *data);
uint8_t HdmiDrv_I2C_write(
    HdmiDrv * const me,
    uint8_t addr,
    uint8_t data);

/* public: */

/**
 * Construct the driver instance.
 * @param me - instance of the driver
 * @param - None
 */
void HdmiDrv_ctor(HdmiDrv * const me);

/**
 * Deconstruct the driver instance.
 * @param me - instance of the driver
 * @param - None
 */
void HdmiDrv_xtor(HdmiDrv * const me);

/**
 * Enable/Disable system power.
 * @param me - instance of the driver
 * @param enable- enable or disable power
 */
void HdmiDrv_setPower(HdmiDrv * const me, uint8_t setting);

/**
 * Return power status.
 * @param me - instance of the driver
 * @param - NONE
 */
uint8_t HdmiDrv_getPower(HdmiDrv * const me);
/**
 * Enable/Disable HDMI CEC/unmute.
 * @param me - instance of the driver
 * @param setting- 1:enable mute or 0:disable mute
 */
void HdmiDrv_setCEC(HdmiDrv * const me, uint8_t setting);
/**
 * Return CEC status.
 * @param me - instance of the driver
 * @param - NONE
 */
uint8_t HdmiDrv_getCEC(HdmiDrv * const me);

/**
 * Set HDMI ARC.
 * @param me - instance of the driver
 * @param enable- enable or disable ARC
 */
void HdmiDrv_setARC(HdmiDrv * const me, uint8_t setting);

/**
 * Return ARC status.
 * @param me - instance of the driver
 * @param - NONE
 */
uint8_t HdmiDrv_getARC(HdmiDrv * const me);

/**
 * Set HDMI mute/unmute.
 * @param me - instance of the driver
 * @param setting- 1:enable mute or 0:disable mute
 */
void HdmiDrv_setMute(HdmiDrv * const me, uint8_t setting);
uint8_t HdmiDrv_getMute(HdmiDrv * const me);

/**
 * Set HDMI volume.
 * @param me - instance of the driver
 * @param level- volume level
 */
void HdmiDrv_setVolume(HdmiDrv * const me, uint8_t level);

/**
 * Return current HDMI volume.
 * @param me - instance of the driver
 * @param - NONE
 */
uint8_t HdmiDrv_getVolume(HdmiDrv * const me);

/**
 * Set HDMI source.
 * @param me - instance of the driver
 * @param port - 1:HDMI_Port1, 6:HDMI_ARC
 */
void HdmiDrv_setSource(HdmiDrv * const me, uint8_t port);

/**
 * Return current HDMI source.
 * @param me - instance of the driver
 * @param - NONE
 */
uint8_t HdmiDrv_getSourec(HdmiDrv * const me);

/**
 * Return Video Latency.
 * @param me - instance of the driver
 * @param - NONE
 */
uint16_t HdmiDrv_getVideoLatency(HdmiDrv * const me);

/**
 * Return Interlaced Video Latency.
 * @param me - instance of the driver
 * @param - NONE
 */
uint16_t HdmiDrv_getInterlacedVideoLatency(HdmiDrv * const me);
void HdmiDrv_reset(HdmiDrv * const me);
void HdmiDrv_power(HdmiDrv * const me);
uint8_t HdmiDrv_isI2cReady(HdmiDrv * const me);
uint8_t HdmiDrv_isPortAvailable(HdmiDrv * const me, uint32_t port);
uint16_t HdmiDrv_getVenderID(HdmiDrv * const me);
uint16_t HdmiDrv_getDeviceID(HdmiDrv * const me);
uint32_t HdmiDrv_getVersion(HdmiDrv * const me);

/* private: */
void HdmiDrv_setPort(HdmiDrv * const me, uint8_t port);
void HdmiDrv_delay(HdmiDrv * const me, uint16_t cnt);

/* public: */
void HdmiDrv_setMaxVolumeLimit(HdmiDrv * const me, uint16_t level);
uint16_t HdmiDrv_getMaxVolumeLimit(HdmiDrv * const me);
uint8_t HdmiDrv_readRegister(HdmiDrv * const me, uint8_t registerAddr);
uint8_t HdmiDrv_writeRegister(HdmiDrv * const me, uint8_t regAddr, uint8_t value);


/* It's a sample for debug. */
void HdmiDrv_dump(HdmiDrv * const me,char const *info);
void HdmiDrv_test(void);

#ifdef __cplusplus
}
#endif

#endif /* HDMI_DRIVER_H */


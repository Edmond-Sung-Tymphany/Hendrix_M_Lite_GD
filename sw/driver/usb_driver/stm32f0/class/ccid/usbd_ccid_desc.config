
#define USBD_VID                    0x0483
#define USBD_PID                    0x3258

#define USBD_BCD_DEVICE_VER         0x0111  
#define BCD_USB_VER                 0x0111
#define USBD_LANGID_STRING          0x409

#define USBD_MANUFACTURER_STRING      "STMicroelectronics"
#define USBD_PRODUCT_FS_STRING        "STM32 USB Smart Card Reader"
#define USBD_CONFIGURATION_FS_STRING  "String Config"
#define USBD_INTERFACE_FS_STRING      "SCR Interface"


/* USB Standard Device Descriptor */
const uint8_t USBD_DeviceDesc[USB_SIZ_DEVICE_DESC] =
{
    0x12,                       /*bLength */
    USB_DEVICE_DESCRIPTOR_TYPE, /*bDescriptorType*/
    LOBYTE(BCD_USB_VER),        /*bcdUSB */
    HIBYTE(BCD_USB_VER),
    0x00,                       /*bDeviceClass*/
    0x00,                       /*bDeviceSubClass*/
    0x00,                       /*bDeviceProtocol*/
    USB_MAX_EP0_SIZE,      /*bMaxPacketSize*/
    LOBYTE(USBD_VID),           /*idVendor*/
    HIBYTE(USBD_VID),           /*idVendor*/
    LOBYTE(USBD_PID),           /*idVendor*/
    HIBYTE(USBD_PID),           /*idVendor*/
    LOBYTE(USBD_BCD_DEVICE_VER), /*bcdDevice rel. 2.00*/
    HIBYTE(USBD_BCD_DEVICE_VER),
    USBD_IDX_MFC_STR,           /*Index of manufacturer  string*/
    USBD_IDX_PRODUCT_STR,       /*Index of product string*/
    USBD_IDX_SERIAL_STR,        /*Index of serial number string*/
    USBD_CFG_MAX_NUM            /*bNumConfigurations*/
} ; /* USB_DeviceDescriptor */

/* USB Standard Device Descriptor */
const uint8_t USBD_DeviceQualifierDesc[USB_LEN_DEV_QUALIFIER_DESC] =
{
    USB_LEN_DEV_QUALIFIER_DESC,
    USB_DESC_TYPE_DEVICE_QUALIFIER,
    0x00,
    0x02,
    0x00,
    0x00,
    0x00,
    0x40,
    0x01,
    0x00,
};

/* USB Standard Device Descriptor */
const uint8_t USBD_LangIDDesc[USB_SIZ_STRING_LANGID] =
{
    USB_SIZ_STRING_LANGID,         
    USB_DESC_TYPE_STRING,       
    LOBYTE(USBD_LANGID_STRING),
    HIBYTE(USBD_LANGID_STRING), 
};

uint8_t USBD_StringSerial[USB_SIZ_STRING_SERIAL] =
{
    USB_SIZ_STRING_SERIAL,       /* bLength */
    USB_STRING_DESCRIPTOR_TYPE,  /* bDescriptorType */
};


/* USB Mass storage device Configuration Descriptor */
/*   All Descriptors (Configuration, Interface, Endpoint, Class, Vendor */
const uint8_t USBD_CCID_CfgDesc[SMARTCARD_SIZ_CONFIG_DESC] =
{

    0x09,   /* bLength: Configuration Descriptor size */
    USB_DESC_TYPE_CONFIGURATION,   /* bDescriptorType: Configuration */
    SMARTCARD_SIZ_CONFIG_DESC,

    0x00,
    0x01,   /* bNumInterfaces: 1 interface */
    0x01,   /* bConfigurationValue: */
    0x04,   /* iConfiguration: */
    0x80,         /*bmAttributes: bus powered */
    0x32,   /* MaxPower 100 mA */

    /********************  CCID **** interface ********************/
    0x09,   /* bLength: Interface Descriptor size */
    0x04,   /* bDescriptorType: */
    0x00,   /* bInterfaceNumber: Number of Interface */
    0x00,   /* bAlternateSetting: Alternate setting */
    0x03,   /* bNumEndpoints: 3 endpoints used */
    0x0B,   /* bInterfaceClass: user's interface for CCID */
    0x00,   /* bInterfaceSubClass : */
    0x00,   /* nInterfaceProtocol : None */
    0x05,   /* iInterface: */

    /*******************  CCID class descriptor ********************/
    0x36,   /* bLength: CCID Descriptor size */
    0x21,	  /* bDescriptorType: Functional Descriptor type. */
    0x10,	  /* bcdCCID(LSB): CCID Class Spec release number (1.00) */
    0x01,   /* bcdCCID(MSB) */

    0x00,	  /* bMaxSlotIndex :highest available slot on this device */
    0x03,	  /* bVoltageSupport: bit Wise OR for 01h-5.0V 02h-3.0V
                            04h 1.8V*/

    0x01,0x00,0x00,0x00,	/* dwProtocols: 0001h = Protocol T=0 */
    0x10,0x0E,0x00,0x00,	/* dwDefaultClock: 3.6Mhz = 3600kHz = 0x0E10, 
                     for 4 Mhz the value is (0x00000FA0) : 
                    This is used in ETU and waiting time calculations*/
    0x10,0x0E,0x00,0x00,	/* dwMaximumClock: Maximum supported ICC clock frequency 
                     in KHz. So, 3.6Mhz = 3600kHz = 0x0E10, 
                                   4 Mhz (0x00000FA0) : */
    0x00,			/* bNumClockSupported : no setting from PC 
                     If the value is 00h, the 
                    supported clock frequencies are assumed to be the 
                    default clock frequency defined by dwDefaultClock 
                    and the maximum clock frequency defined by 
                    dwMaximumClock */

    0xCD,0x25,0x00,0x00,	/* dwDataRate: Default ICC I/O data rate in bps
                    9677 bps = 0x25CD 
                    for example 10752 bps (0x00002A00) */
                     
    0xCD,0x25,0x00,0x00,	/* dwMaxDataRate: Maximum supported ICC I/O data 
                    rate in bps */
    0x00,                 /* bNumDataRatesSupported :
                 The number of data rates that are supported by the CCID
                 If the value is 00h, all data rates between the default 
                 data rate dwDataRate and the maximum data rate 
                 dwMaxDataRate are supported.
                 Dont support GET_CLOCK_FREQUENCIES
                */     
    	
    0x00,0x00,0x00,0x00,   /* dwMaxIFSD: 0 (T=0 only)   */
    0x00,0x00,0x00,0x00,   /* dwSynchProtocols  */
    0x00,0x00,0x00,0x00,   /* dwMechanical: no special characteristics */

    0x38,0x00,EXCHANGE_LEVEL_FEATURE,0x00,	 
                 /* dwFeatures: clk, baud rate, voltage : automatic */
                 /* 00000008h Automatic ICC voltage selection 
                 00000010h Automatic ICC clock frequency change
                 00000020h Automatic baud rate change according to 
                 active parameters provided by the Host or self 
                 determined 00000100h CCID can set 
                 ICC in clock stop mode      
                 
                 Only one of the following values may be present to 
                 select a level of exchange:
                 00010000h TPDU level exchanges with CCID
                 00020000h Short APDU level exchange with CCID
                 00040000h Short and Extended APDU level exchange 
                 If none of those values : character level of exchange*/
    0x0F,0x01,0x00,0x00,  /* dwMaxCCIDMessageLength: Maximum block size + header*/
                /* 261 + 10   */

    0x00,			/* bClassGetResponse*/
    0x00,			/* bClassEnvelope */
    0x00,0x00,		/* wLcdLayout : 0000h no LCD. */
    0x00,			/* bPINSupport : no PIN verif and modif  */
    0x01,			/* bMaxCCIDBusySlots	*/

    /********************  CCID   Endpoints ********************/
    0x07,   /*Endpoint descriptor length = 7*/
    0x05,   /*Endpoint descriptor type */
    CCID_BULK_IN_EP,   /*Endpoint address (IN, address 1) */
    0x02,   /*Bulk endpoint type */
    LOBYTE(CCID_BULK_EPIN_SIZE),
    HIBYTE(CCID_BULK_EPIN_SIZE),
    0x00,   /*Polling interval in milliseconds */

    0x07,   /*Endpoint descriptor length = 7 */
    0x05,   /*Endpoint descriptor type */
    CCID_BULK_OUT_EP,   /*Endpoint address (OUT, address 1) */
    0x02,   /*Bulk endpoint type */
    LOBYTE(CCID_BULK_EPOUT_SIZE),
    HIBYTE(CCID_BULK_EPOUT_SIZE),
    0x00,   /*Polling interval in milliseconds*/


    0x07,   /*bLength: Endpoint Descriptor size*/
    0x05,   /*bDescriptorType:*/
    CCID_INTR_IN_EP,    /*bEndpointAddress: Endpoint Address (IN)*/
    0x03,   /* bmAttributes: Interrupt endpoint */
    LOBYTE(CCID_INTR_EPIN_SIZE),
    HIBYTE(CCID_INTR_EPIN_SIZE),
    0x18    /*Polling interval in milliseconds */
};



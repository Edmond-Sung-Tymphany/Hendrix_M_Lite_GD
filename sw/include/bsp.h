/******************************************************************************

Copyright (c) 2015, Tymphany HK Ltd. All rights reserved.

Confidential information of Tymphany HK Ltd.

The Software is provided "AS IS" and "WITH ALL FAULTS," without warranty of any
kind, including without limitation the warranties of merchantability, fitness
for a particular purpose and non-infringement. Tymphany HK LTD. makes no
warranty that the Software is free of defects or is suitable for any particular
purpose.

******************************************************************************/

/*
-------------------------------------------------------------------------------
TYMPHANY LTD





                  BSP common interfaces
                  -------------------------

                  SW Module Document




@file        bspCommon.h
@brief       This file declares the public bsp interfaces that user "must" implement. 
	         These public interfaces is used by servers, it will cause compiling
	         errors if you didn't implement these interfaces at bsp.c which should
	         be located at rootProjectFolder/bsp/theChipFamily/bsp.c
@author      Bob.Xu 
@date        2014-06-11
@copyright (c) Tymphany Ltd. All rights reserved.

Change History:
VERSION    : 1    DRAFT      2014-06-11     Bob.Xu 
DESCRIPTION: First Draft. Generated by newclass.py
SCO/ERROR  : 
-------------------------------------------------------------------------------
*/
#ifndef BSP_COMMON_H
#define BSP_COMMON_H

#include "commonTypes.h"
#include "stdint.h"
#include "projBsp.h"

void BSP_init_clock(void);
void BSP_init(void);
void Hardware_Init(void);
void BSP_SoftReboot(void);

// Watchdog
void BSP_EnableWatchdog(void);
void BSP_DisableWatchdog(void);
void BSP_FeedWatchdog(void);
void IwdgInit(uint8_t prescaler, uint16_t reload);
void IwdgReloadActiveMode();
void IwdgReloadOffMode();

bool BSP_IsSystemAwake();
void BSP_SetSystemAwake(bool awake);
void ProjBsp_PrintError(const char* errString);
bool BSP_InExp();

uint32 getSysTime(void);

int stackMagicNumberFill(void);
bool stackOverflowCheck(void);
uint32 stackSize(void);
uint32 stackMaxUsage(void);

void DynamicAnalysis();

void RTC_SetUpWakeUpAlarm(uint8 seconds);
void RTC_Initialize();

/**
* delay x us in blocking way
* @param[in]    us                the time(in us) that it needs to delay
*/
void BSP_BlockingDelayMs(uint32 ms);

inline uint32 getCoreTimeStr(char *buf, uint32 size);


#define STACK_OVERFLOW_ALARM                    (-1)

#endif  /* BSP_COMMON_H */


#define SETTING_RESEND_LIMIT    3
#define PAGE_SIZE               2048        // # of 32-bit Instructions per Page
#define SETTING_SAVE_MS         5000
#define IDLE_TIMEOUT_MS         3000
#define TIMER_PERIOD_MS         1000

typedef struct tSettingEntry
{
    uint8           volLevel;
    eAudioChannel   channel;
    bool            isAuxInPlugIn;
    bool            isSpdifInPlugIn;
    uint8           maxVolume;
    bool            isAuxinActive;          /***< SETID_AUXIN_MUSIC_DET */
    bool            isSpdifInActive;        /***< SETID_SPDIF_IN_MUSIC_DET */
   // uint8           audioSource;
    uint32          audioSource;
    bool            asetkConnected;
    uint8           swVer[SW_VERSION_LENGTH];
    uint8           hwVer[HW_VERSION_LENGTH];
    uint8           dspVer[DSP_VERSION_LENGTH];
    uint8           pcbSN[PCB_SN_LENGTH];
    uint8           wfTemp;
    uint8           twTemp;
    uint8           amp1Temp;
    uint8           amp2Temp;
    bool            isDspTuning;

    uint32          queueMinDebugSrv;
    uint32          queueMinSettingSrv;
    uint32          queueMinAudioSrv;
    uint32          queueMinLedsSrv;
    uint32          queueMinBluetoothSrv;
    uint32          queueMinKeysSrv;
    uint32          queueMinPowerSrv;
    uint32          queueMinAseTkSrv;

    uint32          poolMinSmall;
    uint32          poolMinMedium;
    uint32          poolMinLarge;

    tVolFadeParam   volumeFadeParam;
    bool            isAsetkActive;
    uint32          magicNum;
} tSettingEntry;

static tSettingEntry setting;

static tSettingDatabase settingDB[SETID_MAX] =
{
    { &setting.volLevel,        sizeof(setting.volLevel),        SETTING_ATTR_VALID | SETTING_ATTR_NVM}, //SETID_VOLUME
    { &setting.channel,         sizeof(setting.channel),         SETTING_ATTR_VALID},
    { &setting.isAuxInPlugIn,   sizeof(setting.isAuxInPlugIn),   SETTING_ATTR_VALID},
    { &setting.isSpdifInPlugIn, sizeof(setting.isSpdifInPlugIn), SETTING_ATTR_VALID},
    { &setting.isAuxinActive,   sizeof(setting.isAuxinActive),   SETTING_ATTR_VALID},
    { &setting.isSpdifInActive, sizeof(setting.isSpdifInActive), SETTING_ATTR_VALID},
    { &setting.audioSource,     sizeof(setting.audioSource),     SETTING_ATTR_VALID | SETTING_ATTR_NVM},
    { &setting.asetkConnected,  sizeof(setting.asetkConnected),  SETTING_ATTR_VALID},
    { &setting.swVer,           sizeof(setting.swVer),           SETTING_ATTR_VALID}, //SETID_SW_VER
    { &setting.hwVer,           sizeof(setting.hwVer),           SETTING_ATTR_VALID}, //SETID_HW_VER
    { &setting.dspVer,          sizeof(setting.dspVer),          SETTING_ATTR_VALID}, //SETID_DSP_VER
    { &setting.pcbSN,           sizeof(setting.pcbSN),           SETTING_ATTR_VALID}, //SETID_PCB_SN
    { &setting.wfTemp,          sizeof(setting.wfTemp),          SETTING_ATTR_VALID},
    { &setting.twTemp,          sizeof(setting.twTemp),          SETTING_ATTR_VALID},
    { &setting.amp1Temp,        sizeof(setting.amp1Temp),        SETTING_ATTR_VALID},
    { &setting.amp2Temp,        sizeof(setting.amp2Temp),        SETTING_ATTR_VALID},
    { &setting.isDspTuning,     sizeof(setting.isDspTuning),     SETTING_ATTR_VALID},
    { &setting.queueMinDebugSrv,    sizeof(setting.queueMinDebugSrv),    SETTING_ATTR_VALID}, //SETID_QUEUE_MIN_DEBUG_SRV
    { &setting.queueMinSettingSrv,  sizeof(setting.queueMinSettingSrv),  SETTING_ATTR_VALID}, //SETID_QUEUE_MIN_SETTING_SRV
    { &setting.queueMinAudioSrv,    sizeof(setting.queueMinAudioSrv),    SETTING_ATTR_VALID}, //SETID_QUEUE_MIN_AUDIO_SRV
    { &setting.queueMinLedsSrv,     sizeof(setting.queueMinLedsSrv),     SETTING_ATTR_VALID}, //SETID_QUEUE_MIN_LEDS_SRV
    { &setting.queueMinBluetoothSrv,sizeof(setting.queueMinBluetoothSrv),SETTING_ATTR_VALID}, //SETID_QUEUE_MIN_BLUETOOTH_SRV
    { &setting.queueMinKeysSrv,     sizeof(setting.queueMinKeysSrv),     SETTING_ATTR_VALID}, //SETID_QUEUE_MIN_KEYS_SRV
    { &setting.queueMinPowerSrv,    sizeof(setting.queueMinPowerSrv),    SETTING_ATTR_VALID}, //SETID_QUEUE_MIN_POWER_SRV
    { &setting.queueMinAseTkSrv,    sizeof(setting.queueMinAseTkSrv),    SETTING_ATTR_VALID}, //SETID_QUEUE_MIN_ASE_TK_SRV
    { &setting.poolMinSmall, sizeof(setting.poolMinSmall), SETTING_ATTR_VALID}, //SETID_POOL_MIN_SMALL
    { &setting.poolMinMedium,sizeof(setting.poolMinMedium),SETTING_ATTR_VALID}, //SETID_POOL_MIN_MEDIUM
    { &setting.poolMinLarge, sizeof(setting.poolMinLarge), SETTING_ATTR_VALID}, //SETID_POOL_MIN_LARGE
    { &setting.volumeFadeParam, sizeof(setting.volumeFadeParam), SETTING_ATTR_VALID}, //SETID_VOLUME_FADE_PARAM
    { &setting.isAsetkActive,   sizeof(setting.isAsetkActive),   SETTING_ATTR_VALID},
    { &setting.magicNum,        sizeof(setting.magicNum),        SETTING_ATTR_VALID | SETTING_ATTR_NVM},     // address in NVM=SETT_PAGE_ROM_ADDR
};

#define SETT_PAGE_ROM_ADDR      0x0803E800 //= __USEREDIT_region_ROM2_start__
#define SETT_ELEMENT_MIN_SIZE   sizeof(uint32)
#define SETT_ELEMENT_MAX_SIZE   0x0100
#define SETT_MAGIC_PCBSN_SIZE   (sizeof(setting.magicNum) + sizeof(setting.pcbSN))

static const tSettingRomMap settingRomMap[] =
{
    { SETID_MAGIC_NUMBER,            SETT_PAGE_ROM_ADDR }, 
    { SETID_PCB_SN,                  SETT_PAGE_ROM_ADDR + sizeof(setting.magicNum)},
    { SETID_VOLUME        ,          SETT_PAGE_ROM_ADDR + SETT_MAGIC_PCBSN_SIZE + SETT_ELEMENT_MIN_SIZE * 0},
    { SETID_AUDIO_SOURCE  ,          SETT_PAGE_ROM_ADDR + SETT_MAGIC_PCBSN_SIZE + SETT_ELEMENT_MIN_SIZE * 1},
    { SETID_IS_AUXIN_PLUG_IN,        SETT_PAGE_ROM_ADDR + SETT_MAGIC_PCBSN_SIZE + SETT_ELEMENT_MIN_SIZE * 2},
    { SETID_IS_SPDIF_IN_PLUG_IN,     SETT_PAGE_ROM_ADDR + SETT_MAGIC_PCBSN_SIZE + SETT_ELEMENT_MIN_SIZE * 3},
    { SETID_QUEUE_MIN_DEBUG_SRV,     SETT_PAGE_ROM_ADDR + sizeof(setting.pcbSN) + SETT_ELEMENT_MIN_SIZE * 4},
    { SETID_QUEUE_MIN_SETTING_SRV,   SETT_PAGE_ROM_ADDR + sizeof(setting.pcbSN) + SETT_ELEMENT_MIN_SIZE * 5},
    { SETID_QUEUE_MIN_AUDIO_SRV,     SETT_PAGE_ROM_ADDR + sizeof(setting.pcbSN) + SETT_ELEMENT_MIN_SIZE * 6},
    { SETID_QUEUE_MIN_LEDS_SRV,      SETT_PAGE_ROM_ADDR + sizeof(setting.pcbSN) + SETT_ELEMENT_MIN_SIZE * 7},
    { SETID_QUEUE_MIN_BLUETOOTH_SRV, SETT_PAGE_ROM_ADDR + sizeof(setting.pcbSN) + SETT_ELEMENT_MIN_SIZE * 8},
    { SETID_QUEUE_MIN_KEYS_SRV,      SETT_PAGE_ROM_ADDR + sizeof(setting.pcbSN) + SETT_ELEMENT_MIN_SIZE * 9},
    { SETID_QUEUE_MIN_POWER_SRV,     SETT_PAGE_ROM_ADDR + sizeof(setting.pcbSN) + SETT_ELEMENT_MIN_SIZE * 10},
    { SETID_QUEUE_MIN_ASE_TK_SRV,    SETT_PAGE_ROM_ADDR + sizeof(setting.pcbSN) + SETT_ELEMENT_MIN_SIZE * 11},
    { SETID_POOL_MIN_SMALL,          SETT_PAGE_ROM_ADDR + sizeof(setting.pcbSN) + SETT_ELEMENT_MIN_SIZE * 12},
    { SETID_POOL_MIN_MEDIUM,         SETT_PAGE_ROM_ADDR + sizeof(setting.pcbSN) + SETT_ELEMENT_MIN_SIZE * 13},
    { SETID_POOL_MIN_LARGE,          SETT_PAGE_ROM_ADDR + sizeof(setting.pcbSN) + SETT_ELEMENT_MIN_SIZE * 14}   
};


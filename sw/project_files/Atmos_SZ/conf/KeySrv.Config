/**
*  @file      KeySrv.Cofig
*  @brief     Config data for key server
*  @author    Bob.Xu
*  @date      27-Feb-2014
*  @copyright Tymphany Ltd.
*/
#include "AdcDrv.h"
#include "GpioDrv.h"
#include "AdcKeyDrv.h"
#include "GpioKeyDrv.h"
#ifdef HAS_INFRARED_KEY
#include "IRKeyDrv.h"
#include "IrRxDrv.h"
#endif

#define DEBOUNCE_SAMP_NUM               4
#define KEY_SERVER_TICK_MS              10
#define COMB_KEY_FLAG_RESET             0

/* Private variables */

static cGpioKeyDrv gpioKeySet[NUM_OF_GPIO_KEY];
static cGpioDrv gpioDrvForKey;
static cAdcKeyDrv adcKeySet[NUM_OF_ADC_KEY];
static cADCDrv adcDrvForKey;
static cIRKeyDrv irKeySet[NUM_OF_IR_KEY];
static cIrRxDrv irRxDrvForKey;

#ifdef HAS_INTERRUPT_WAKE_UP_KEY
#define POWER_MANAGER   MAIN_APP_ID
#endif

tKeySrvConfig keySrvConfig =
{
    /*
    * Press type Duration
    * Short Press (SP)               X ¡Ü 1.5s
    * Long Press (LP)         1.5s < X ¡Ü 5.0s
    * Very Long Press (VLP)   5.0s < X ¡Ü 7.5s
    * Very Very Long Press (VVLP)    X > 7.5s
    * Press and Hold (P&H)
    * -
    * Double Press (DP)       0.5s between presses
    */
    .timing.debounceTime = 50, /* 100ms */
    .timing.repeatStartTime= 1500,
    .timing.longPressTime = 1500,  
    .timing.veryLongPressTime = 5000, /* 5S */

    /* If repeatHoldTime[x] > 0, then after sent KEY_EVT_HOLD, post KEY_EVT_REPEAT in every repeatHoldTime[x] *
    * for the specific key until veryLongPressTime                                                            *
    * If repeatHoldTime[x] = 0, it means that it is not required to send KEY_EVT_REPEAT for the specific key. */
    .timing.repeatHoldTime[VOLUME_DOWN_KEY] = 200,  /*  this value should be changed according to user cases in applicaiton */
    .timing.repeatHoldTime[VOLUME_UP_KEY] = 300,   /* this value should be changed according to user cases in applicaiton*/
    .timing.repeatHoldTime[IR_VOLUME_DOWN_KEY] =  200, /* 267ms should be changed according to reqirement*/
    .timing.repeatHoldTime[IR_VOLUME_UP_KEY] =  300,

    .keyboardNum = KEYBOARD_NUMBER,
    .keyboardSet =
    {
        {GPIO_DEV_TYPE, (cKeyDrv*)gpioKeySet,  sizeof(cGpioKeyDrv),   &gpioDrvForKey},
       	{ADC_DEV_TYPE, (cKeyDrv*)adcKeySet, sizeof(cAdcKeyDrv), &adcDrvForKey},
        {INFRARED_DEV_TYPE,(cKeyDrv*)irKeySet,   sizeof(cIRKeyDrv),   &irRxDrvForKey}
        /**
         * you can add other types of keyboard here
         */
    }
};


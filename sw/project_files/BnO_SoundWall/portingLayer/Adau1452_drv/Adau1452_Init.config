#ifndef __ADAU1452_INIT_CONFIG__
#define __ADAU1452_INIT_CONFIG__

#define BYTES_PER_PROGRAM_ADDR      4
#define BYTES_PER_PARAM_ADDR        4

#define ADAUDSP_MAX_WRITE_BYTES     220
#define ADAUDSP_PROGRAM_ADDR_STEP   (ADAUDSP_MAX_WRITE_BYTES / BYTES_PER_PROGRAM_ADDR)   // program data : 4 bytes per register address
#define ADAUDSP_PARAM_ADDR_STEP     (ADAUDSP_MAX_WRITE_BYTES / BYTES_PER_PARAM_ADDR)   // parameter data : 4 bytes per register address

/* 
 * [NOTE] : this is base on the dsp flow
 * if the dsp flow changed, please check the init list of xxxxx_IC.h
 */

#define SIGMA_WRITE_DELAY(a, b, c)      asm("nop")

#ifdef DSP_FW_COMPRESSED
#define ZERO_PARAM_MAGIC_NUMBER     0xcccc
static void Adau1452Drv_InitCompressData(uint16_t reg_addr, uint32_t input_data_len, uint8_t *data_buf)
{
    uint8_t decoded_block_data[ADAUDSP_MAX_WRITE_BYTES+4];
    uint32_t i, loop, block_len_remains;
	uint32_t zero_data_remains, zero_cnt;
	uint32_t *p_encoded_buf, *p_block_buf;

    p_encoded_buf = (uint32_t *)data_buf;
	p_block_buf = (uint32_t *)decoded_block_data;
	zero_data_remains = 0;

    loop = input_data_len / ADAUDSP_MAX_WRITE_BYTES;
    for(i=0; i<loop; i++)
    {
		block_len_remains = ADAUDSP_MAX_WRITE_BYTES;
        p_block_buf = (uint32_t *)decoded_block_data;
    	while( block_len_remains )
    	{
    		if( zero_data_remains )
			{
				*p_block_buf = 0x00000000;
				p_block_buf ++;
				zero_data_remains --;
				block_len_remains -= 4;
			}
			else
			{
		    	if( (*p_encoded_buf & 0xffff) == ZERO_PARAM_MAGIC_NUMBER )
				{
					zero_cnt = (*p_encoded_buf >> 16);
					zero_data_remains = ((zero_cnt & 0x00ff) << 8) | ((zero_cnt & 0xff00) >> 8);
					p_encoded_buf ++;
				}
				else
				{
					*p_block_buf = *p_encoded_buf;
					p_block_buf ++;
					p_encoded_buf ++;
					block_len_remains -= 4;
				}				
			}
    	}
        // write one block to dsp
        Adau1452Drv_I2CWrite(reg_addr, ADAUDSP_MAX_WRITE_BYTES, decoded_block_data);
        reg_addr += ADAUDSP_PROGRAM_ADDR_STEP;
#ifdef HAS_IWDG
        IWDG_ReloadCounter();
#endif
    }

	// check the remain data
    loop = input_data_len % ADAUDSP_MAX_WRITE_BYTES;
    if( loop )
    {
		block_len_remains = loop;
        p_block_buf = (uint32_t *)decoded_block_data;
    	while( block_len_remains )
    	{
    		if( zero_data_remains )
			{
				*p_block_buf = 0x00000000;
				p_block_buf ++;
				zero_data_remains --;
				block_len_remains -= 4;
			}
			else
			{
		    	if( (*p_encoded_buf & 0xffff) == ZERO_PARAM_MAGIC_NUMBER )
				{
					zero_cnt = (*p_encoded_buf >> 16);
					zero_data_remains = ((zero_cnt & 0x00ff) << 8) | ((zero_cnt & 0xff00) >> 8);
					p_encoded_buf ++;
				}
				else
				{
					*p_block_buf = *p_encoded_buf;
					p_block_buf ++;
					p_encoded_buf ++;
					block_len_remains -= 4;
				}				
			}
    	}    
        // write the last block to DSP
        Adau1452Drv_I2CWrite(reg_addr, loop, decoded_block_data);
	}
}
#endif

static void Adau1452Drv_InitStage0(void)
{
//    TP_PRINTF("\n\rDsp init start at %d(system tick).\n\r", getSysTime() );

	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOFT_RESET_IC_1_ADDR, REG_SOFT_RESET_IC_1_BYTE, R0_SOFT_RESET_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOFT_RESET_IC_1_ADDR, REG_SOFT_RESET_IC_1_BYTE, R1_SOFT_RESET_IC_1_Default );
	SIGMA_WRITE_DELAY( DEVICE_ADDR_IC_1, R2_RESET_DELAY_IC_1_SIZE, R2_RESET_DELAY_IC_1_Default );
}


static void Adau1452Drv_InitStage1(void)
{
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_HIBERNATE_IC_1_ADDR, REG_HIBERNATE_IC_1_BYTE, R3_HIBERNATE_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_HIBERNATE_IC_1_ADDR, REG_HIBERNATE_IC_1_BYTE, R4_HIBERNATE_IC_1_Default );
	SIGMA_WRITE_DELAY( DEVICE_ADDR_IC_1, R5_HIBERNATE_DELAY_IC_1_SIZE, R5_HIBERNATE_DELAY_IC_1_Default );
}

static void Adau1452Drv_InitStage2(void)
{
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_KILL_CORE_IC_1_ADDR, REG_KILL_CORE_IC_1_BYTE, R6_KILL_CORE_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_KILL_CORE_IC_1_ADDR, REG_KILL_CORE_IC_1_BYTE, R7_KILL_CORE_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_PLL_ENABLE_IC_1_ADDR, REG_PLL_ENABLE_IC_1_BYTE, R8_PLL_ENABLE_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_PLL_CTRL1_IC_1_ADDR, REG_PLL_CTRL1_IC_1_BYTE, R9_PLL_CTRL1_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_PLL_CLK_SRC_IC_1_ADDR, REG_PLL_CLK_SRC_IC_1_BYTE, R10_PLL_CLK_SRC_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_MCLK_OUT_IC_1_ADDR, REG_MCLK_OUT_IC_1_BYTE, R11_MCLK_OUT_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_PLL_ENABLE_IC_1_ADDR, REG_PLL_ENABLE_IC_1_BYTE, R12_PLL_ENABLE_IC_1_Default );
	SIGMA_WRITE_DELAY( DEVICE_ADDR_IC_1, R13_PLL_LOCK_DELAY_IC_1_SIZE, R13_PLL_LOCK_DELAY_IC_1_Default );
}

static void Adau1452Drv_InitStage3(void)
{
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_POWER_ENABLE0_IC_1_ADDR, REG_POWER_ENABLE0_IC_1_BYTE, R14_POWER_ENABLE0_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_POWER_ENABLE1_IC_1_ADDR, REG_POWER_ENABLE1_IC_1_BYTE, R15_POWER_ENABLE1_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_ASRC_MUTE_IC_1_ADDR, REG_ASRC_MUTE_IC_1_BYTE, R16_ASRC_MUTE_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_PANIC_PARITY_MASK_IC_1_ADDR, REG_PANIC_PARITY_MASK_IC_1_BYTE, R17_PANIC_PARITY_MASK_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_ASRC_INPUT0_IC_1_ADDR, REG_ASRC_INPUT0_IC_1_BYTE, R18_ASRC_INPUT0_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_ASRC_INPUT1_IC_1_ADDR, REG_ASRC_INPUT1_IC_1_BYTE, R19_ASRC_INPUT1_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_ASRC_INPUT2_IC_1_ADDR, REG_ASRC_INPUT2_IC_1_BYTE, R20_ASRC_INPUT2_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_ASRC_INPUT4_IC_1_ADDR, REG_ASRC_INPUT4_IC_1_BYTE, R21_ASRC_INPUT4_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_ASRC_INPUT5_IC_1_ADDR, REG_ASRC_INPUT5_IC_1_BYTE, R22_ASRC_INPUT5_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_ASRC_INPUT6_IC_1_ADDR, REG_ASRC_INPUT6_IC_1_BYTE, R23_ASRC_INPUT6_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_ASRC_INPUT7_IC_1_ADDR, REG_ASRC_INPUT7_IC_1_BYTE, R24_ASRC_INPUT7_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_ASRC_OUT_RATE0_IC_1_ADDR, REG_ASRC_OUT_RATE0_IC_1_BYTE, R25_ASRC_OUT_RATE0_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_ASRC_OUT_RATE1_IC_1_ADDR, REG_ASRC_OUT_RATE1_IC_1_BYTE, R26_ASRC_OUT_RATE1_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_ASRC_OUT_RATE2_IC_1_ADDR, REG_ASRC_OUT_RATE2_IC_1_BYTE, R27_ASRC_OUT_RATE2_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_ASRC_OUT_RATE4_IC_1_ADDR, REG_ASRC_OUT_RATE4_IC_1_BYTE, R28_ASRC_OUT_RATE4_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_ASRC_OUT_RATE5_IC_1_ADDR, REG_ASRC_OUT_RATE5_IC_1_BYTE, R29_ASRC_OUT_RATE5_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_ASRC_OUT_RATE6_IC_1_ADDR, REG_ASRC_OUT_RATE6_IC_1_BYTE, R30_ASRC_OUT_RATE6_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_ASRC_OUT_RATE7_IC_1_ADDR, REG_ASRC_OUT_RATE7_IC_1_BYTE, R31_ASRC_OUT_RATE7_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE0_IC_1_ADDR, REG_SOUT_SOURCE0_IC_1_BYTE, R32_SOUT_SOURCE0_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE1_IC_1_ADDR, REG_SOUT_SOURCE1_IC_1_BYTE, R33_SOUT_SOURCE1_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE2_IC_1_ADDR, REG_SOUT_SOURCE2_IC_1_BYTE, R34_SOUT_SOURCE2_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE3_IC_1_ADDR, REG_SOUT_SOURCE3_IC_1_BYTE, R35_SOUT_SOURCE3_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE4_IC_1_ADDR, REG_SOUT_SOURCE4_IC_1_BYTE, R36_SOUT_SOURCE4_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE5_IC_1_ADDR, REG_SOUT_SOURCE5_IC_1_BYTE, R37_SOUT_SOURCE5_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE6_IC_1_ADDR, REG_SOUT_SOURCE6_IC_1_BYTE, R38_SOUT_SOURCE6_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE7_IC_1_ADDR, REG_SOUT_SOURCE7_IC_1_BYTE, R39_SOUT_SOURCE7_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE8_IC_1_ADDR, REG_SOUT_SOURCE8_IC_1_BYTE, R40_SOUT_SOURCE8_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE9_IC_1_ADDR, REG_SOUT_SOURCE9_IC_1_BYTE, R41_SOUT_SOURCE9_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE10_IC_1_ADDR, REG_SOUT_SOURCE10_IC_1_BYTE, R42_SOUT_SOURCE10_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE11_IC_1_ADDR, REG_SOUT_SOURCE11_IC_1_BYTE, R43_SOUT_SOURCE11_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE12_IC_1_ADDR, REG_SOUT_SOURCE12_IC_1_BYTE, R44_SOUT_SOURCE12_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE13_IC_1_ADDR, REG_SOUT_SOURCE13_IC_1_BYTE, R45_SOUT_SOURCE13_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE14_IC_1_ADDR, REG_SOUT_SOURCE14_IC_1_BYTE, R46_SOUT_SOURCE14_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE15_IC_1_ADDR, REG_SOUT_SOURCE15_IC_1_BYTE, R47_SOUT_SOURCE15_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE16_IC_1_ADDR, REG_SOUT_SOURCE16_IC_1_BYTE, R48_SOUT_SOURCE16_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE17_IC_1_ADDR, REG_SOUT_SOURCE17_IC_1_BYTE, R49_SOUT_SOURCE17_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE18_IC_1_ADDR, REG_SOUT_SOURCE18_IC_1_BYTE, R50_SOUT_SOURCE18_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE19_IC_1_ADDR, REG_SOUT_SOURCE19_IC_1_BYTE, R51_SOUT_SOURCE19_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE20_IC_1_ADDR, REG_SOUT_SOURCE20_IC_1_BYTE, R52_SOUT_SOURCE20_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE21_IC_1_ADDR, REG_SOUT_SOURCE21_IC_1_BYTE, R53_SOUT_SOURCE21_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE22_IC_1_ADDR, REG_SOUT_SOURCE22_IC_1_BYTE, R54_SOUT_SOURCE22_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE23_IC_1_ADDR, REG_SOUT_SOURCE23_IC_1_BYTE, R55_SOUT_SOURCE23_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SPDIFTX_INPUT_IC_1_ADDR, REG_SPDIFTX_INPUT_IC_1_BYTE, R56_SPDIFTX_INPUT_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SERIAL_BYTE_1_0_IC_1_ADDR, REG_SERIAL_BYTE_1_0_IC_1_BYTE, R57_SERIAL_BYTE_1_0_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SERIAL_BYTE_2_0_IC_1_ADDR, REG_SERIAL_BYTE_2_0_IC_1_BYTE, R58_SERIAL_BYTE_2_0_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SERIAL_BYTE_3_0_IC_1_ADDR, REG_SERIAL_BYTE_3_0_IC_1_BYTE, R59_SERIAL_BYTE_3_0_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SERIAL_BYTE_4_1_IC_1_ADDR, REG_SERIAL_BYTE_4_1_IC_1_BYTE, R60_SERIAL_BYTE_4_1_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SERIAL_BYTE_5_0_IC_1_ADDR, REG_SERIAL_BYTE_5_0_IC_1_BYTE, R61_SERIAL_BYTE_5_0_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SERIAL_BYTE_5_1_IC_1_ADDR, REG_SERIAL_BYTE_5_1_IC_1_BYTE, R62_SERIAL_BYTE_5_1_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SERIAL_BYTE_6_0_IC_1_ADDR, REG_SERIAL_BYTE_6_0_IC_1_BYTE, R63_SERIAL_BYTE_6_0_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SERIAL_BYTE_6_1_IC_1_ADDR, REG_SERIAL_BYTE_6_1_IC_1_BYTE, R64_SERIAL_BYTE_6_1_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SERIAL_BYTE_7_0_IC_1_ADDR, REG_SERIAL_BYTE_7_0_IC_1_BYTE, R65_SERIAL_BYTE_7_0_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SERIAL_BYTE_7_1_IC_1_ADDR, REG_SERIAL_BYTE_7_1_IC_1_BYTE, R66_SERIAL_BYTE_7_1_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SPDIF_RESTART_IC_1_ADDR, REG_SPDIF_RESTART_IC_1_BYTE, R67_SPDIF_RESTART_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SPDIF_TX_EN_IC_1_ADDR, REG_SPDIF_TX_EN_IC_1_BYTE, R68_SPDIF_TX_EN_IC_1_Default );
}

static void Adau1452Drv_InitStage4(void)
{
    uint8_t *p_data;
    uint16_t reg_addr;
    uint32_t i, loop;

    loop = PROGRAM_SIZE_IC_1 / ADAUDSP_MAX_WRITE_BYTES;
    reg_addr = PROGRAM_ADDR_IC_1;
    p_data = (uint8_t *)(Program_Data_IC_1);

    for(i=0; i<loop; i++)
    {
        Adau1452Drv_I2CWrite(reg_addr, ADAUDSP_MAX_WRITE_BYTES, p_data);
        reg_addr += ADAUDSP_PROGRAM_ADDR_STEP;
        p_data += ADAUDSP_MAX_WRITE_BYTES;
#ifdef HAS_IWDG
        IWDG_ReloadCounter();
#endif
    }
    loop = PROGRAM_SIZE_IC_1 % ADAUDSP_MAX_WRITE_BYTES;
    if( loop )
        Adau1452Drv_I2CWrite(reg_addr, loop, p_data);
}

static void Adau1452Drv_InitStage5(void)
{
#ifdef DSP_FW_COMPRESSED
    Adau1452Drv_InitCompressData(PARAM_ADDR_IC_1, PARAM_SIZE_IC_1, (uint8_t *)Param_Data_IC_1);
#else
    uint8_t *p_data;
    uint16_t reg_addr;
    uint32_t i, loop;

    loop = PARAM_SIZE_IC_1 / ADAUDSP_MAX_WRITE_BYTES;
    reg_addr = PARAM_ADDR_IC_1;
    p_data = (uint8_t *)(Param_Data_IC_1);

    for(i=0; i<loop; i++)
    {
        Adau1452Drv_I2CWrite(reg_addr, ADAUDSP_MAX_WRITE_BYTES, p_data);
        reg_addr += ADAUDSP_PARAM_ADDR_STEP;
        p_data += ADAUDSP_MAX_WRITE_BYTES;
#ifdef HAS_IWDG
        IWDG_ReloadCounter();
#endif
    }
    loop = PARAM_SIZE_IC_1 % ADAUDSP_MAX_WRITE_BYTES;
    if( loop )
        Adau1452Drv_I2CWrite(reg_addr, loop, p_data);
#endif    
}

static void Adau1452Drv_InitStage6(void)
{
    uint8_t *p_data;
    uint16_t reg_addr;
    uint32_t i, loop;

    loop = DM1_DATA_SIZE_IC_1 / ADAUDSP_MAX_WRITE_BYTES;
    reg_addr = DM1_DATA_ADDR_IC_1;
    p_data = (uint8_t *)(DM1_DATA_Data_IC_1);

    for(i=0; i<loop; i++)
    {
        Adau1452Drv_I2CWrite(reg_addr, ADAUDSP_MAX_WRITE_BYTES, p_data);
        reg_addr += ADAUDSP_PARAM_ADDR_STEP;
        p_data += ADAUDSP_MAX_WRITE_BYTES;
    }
    loop = DM1_DATA_SIZE_IC_1 % ADAUDSP_MAX_WRITE_BYTES;
    if( loop )
        Adau1452Drv_I2CWrite(reg_addr, loop, p_data);
}

static void Adau1452Drv_InitStage7(void)
{
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_KILL_CORE_IC_1_ADDR, REG_KILL_CORE_IC_1_BYTE, R72_KILL_CORE_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_START_ADDRESS_IC_1_ADDR, REG_START_ADDRESS_IC_1_BYTE, R73_START_ADDRESS_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_START_PULSE_IC_1_ADDR, REG_START_PULSE_IC_1_BYTE, R74_START_PULSE_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_START_CORE_IC_1_ADDR, REG_START_CORE_IC_1_BYTE, R75_START_CORE_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_START_CORE_IC_1_ADDR, REG_START_CORE_IC_1_BYTE, R76_START_CORE_IC_1_Default );
	SIGMA_WRITE_DELAY( DEVICE_ADDR_IC_1, R77_START_DELAY_IC_1_SIZE, R77_START_DELAY_IC_1_Default );
}

static void Adau1452Drv_InitStage8(void)
{
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_HIBERNATE_IC_1_ADDR, REG_HIBERNATE_IC_1_BYTE, R78_HIBERNATE_IC_1_Default );
}

static void Adau1452Drv_InitStage9(void)
{
/* dsp init finished */
//    TP_PRINTF("\n\rDsp init finished at %d(system tick).\n\r", getSysTime() );
}


/* init stage */
const static DspInitStage_t dsp_init_stages[] =
{
    /* if the reset behavor hasn't been done outside, add reset process here */
    
    /* write data to the DSP through I2C start here */
    {&Adau1452Drv_InitStage0, 10},
    {&Adau1452Drv_InitStage1, 10},
    {&Adau1452Drv_InitStage2, 10},
    {&Adau1452Drv_InitStage3, 10},
    {&Adau1452Drv_InitStage4, 10},
    {&Adau1452Drv_InitStage5, 10},
    {&Adau1452Drv_InitStage6, 10},
    {&Adau1452Drv_InitStage7, 10},
    {&Adau1452Drv_InitStage8, 10},
    {&Adau1452Drv_InitStage9, 30},
};

#endif  // __ADAU1452_INIT_CONFIG__


/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.7 at Mon Apr 17 15:09:20 2017. */

#ifndef PB_PROTO_SOUNDWALL_SOUNDWALL_PB_H_INCLUDED
#define PB_PROTO_SOUNDWALL_SOUNDWALL_PB_H_INCLUDED
#include <pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _Proto_SoundWall_A2Bmode_Mode {
    Proto_SoundWall_A2Bmode_Mode_A2B_STANDALONE = 0,
    Proto_SoundWall_A2Bmode_Mode_A2B_MASTER = 1,
    Proto_SoundWall_A2Bmode_Mode_A2B_SLAVE = 2
} Proto_SoundWall_A2Bmode_Mode;
#define _Proto_SoundWall_A2Bmode_Mode_MIN Proto_SoundWall_A2Bmode_Mode_A2B_STANDALONE
#define _Proto_SoundWall_A2Bmode_Mode_MAX Proto_SoundWall_A2Bmode_Mode_A2B_SLAVE
#define _Proto_SoundWall_A2Bmode_Mode_ARRAYSIZE ((Proto_SoundWall_A2Bmode_Mode)(Proto_SoundWall_A2Bmode_Mode_A2B_SLAVE+1))

typedef enum _Proto_SoundWall_PowerMode_Mode {
    Proto_SoundWall_PowerMode_Mode_STANDBY = 0,
    Proto_SoundWall_PowerMode_Mode_WORKING = 1
} Proto_SoundWall_PowerMode_Mode;
#define _Proto_SoundWall_PowerMode_Mode_MIN Proto_SoundWall_PowerMode_Mode_STANDBY
#define _Proto_SoundWall_PowerMode_Mode_MAX Proto_SoundWall_PowerMode_Mode_WORKING
#define _Proto_SoundWall_PowerMode_Mode_ARRAYSIZE ((Proto_SoundWall_PowerMode_Mode)(Proto_SoundWall_PowerMode_Mode_WORKING+1))

typedef enum _Proto_SoundWall_MuteMode_Mode {
    Proto_SoundWall_MuteMode_Mode_MUTE = 0,
    Proto_SoundWall_MuteMode_Mode_UNMUTE = 1
} Proto_SoundWall_MuteMode_Mode;
#define _Proto_SoundWall_MuteMode_Mode_MIN Proto_SoundWall_MuteMode_Mode_MUTE
#define _Proto_SoundWall_MuteMode_Mode_MAX Proto_SoundWall_MuteMode_Mode_UNMUTE
#define _Proto_SoundWall_MuteMode_Mode_ARRAYSIZE ((Proto_SoundWall_MuteMode_Mode)(Proto_SoundWall_MuteMode_Mode_UNMUTE+1))

/* Struct definitions */
typedef struct _Proto_SoundWall_A2Bmode {
    bool has_mode;
    Proto_SoundWall_A2Bmode_Mode mode;
/* @@protoc_insertion_point(struct:Proto_SoundWall_A2Bmode) */
} Proto_SoundWall_A2Bmode;

typedef struct _Proto_SoundWall_BassAndRoomEQ {
    uint32_t nodeIndex;
    uint32_t bass_gain;
    pb_callback_t eqParam;
/* @@protoc_insertion_point(struct:Proto_SoundWall_BassAndRoomEQ) */
} Proto_SoundWall_BassAndRoomEQ;

typedef struct _Proto_SoundWall_DriverGain {
    uint32_t nodeIndex;
    uint32_t Tile_1_B_Cal_Gain;
    uint32_t Tile_1_MT_Cal_Gain;
    uint32_t Tile_2_B_Cal_Gain;
    uint32_t Tile_2_MT_Cal_Gain;
    uint32_t Tile_3_B_Cal_Gain;
    uint32_t Tile_3_MT_Cal_Gain;
    uint32_t Tile_4_B_Cal_Gain;
    uint32_t Tile_4_MT_Cal_Gain;
    uint32_t Tile_1_TW_Cal_Gain;
    uint32_t Tile_2_TW_Cal_Gain;
    uint32_t Tile_3_TW_Cal_Gain;
    uint32_t Tile_4_TW_Cal_Gain;
/* @@protoc_insertion_point(struct:Proto_SoundWall_DriverGain) */
} Proto_SoundWall_DriverGain;

typedef struct _Proto_SoundWall_DspEqParam {
    uint32_t param1;
    uint32_t param2;
    uint32_t param3;
    uint32_t param4;
    uint32_t param5;
/* @@protoc_insertion_point(struct:Proto_SoundWall_DspEqParam) */
} Proto_SoundWall_DspEqParam;

typedef struct _Proto_SoundWall_GainAndDelay {
    uint32_t nodeIndex;
    uint32_t MT_TW_gain_L_1;
    uint32_t MT_TW_gain_R_1;
    uint32_t MT_TW_gain_L_2;
    uint32_t MT_TW_gain_R_2;
    uint32_t MT_TW_gain_L_3;
    uint32_t MT_TW_gain_R_3;
    uint32_t MT_TW_gain_L_4;
    uint32_t MT_TW_gain_R_4;
    uint32_t MT_TW_delay_L_1;
    uint32_t MT_TW_delay_R_1;
    uint32_t MT_TW_delay_L_2;
    uint32_t MT_TW_delay_R_2;
    uint32_t MT_TW_delay_L_3;
    uint32_t MT_TW_delay_R_3;
    uint32_t MT_TW_delay_L_4;
    uint32_t MT_TW_delay_R_4;
    uint32_t MUTE_L_R;
/* @@protoc_insertion_point(struct:Proto_SoundWall_GainAndDelay) */
} Proto_SoundWall_GainAndDelay;

typedef struct _Proto_SoundWall_MuteMode {
    bool has_mode;
    Proto_SoundWall_MuteMode_Mode mode;
/* @@protoc_insertion_point(struct:Proto_SoundWall_MuteMode) */
} Proto_SoundWall_MuteMode;

typedef struct _Proto_SoundWall_NodeIndex {
    bool has_nodeIndex;
    uint32_t nodeIndex;
/* @@protoc_insertion_point(struct:Proto_SoundWall_NodeIndex) */
} Proto_SoundWall_NodeIndex;

typedef struct _Proto_SoundWall_PowerMode {
    bool has_mode;
    Proto_SoundWall_PowerMode_Mode mode;
/* @@protoc_insertion_point(struct:Proto_SoundWall_PowerMode) */
} Proto_SoundWall_PowerMode;

typedef struct _Proto_SoundWall_ReqTestTone {
    uint32_t nodeIndex;
    uint32_t speakerTile;
/* @@protoc_insertion_point(struct:Proto_SoundWall_ReqTestTone) */
} Proto_SoundWall_ReqTestTone;

typedef struct _Proto_SoundWall_RespGetTotalNodes {
    bool has_totalNodes;
    uint32_t totalNodes;
/* @@protoc_insertion_point(struct:Proto_SoundWall_RespGetTotalNodes) */
} Proto_SoundWall_RespGetTotalNodes;

/* Default values for struct fields */

/* Initializer values for message structs */
#define Proto_SoundWall_A2Bmode_init_default     {false, (Proto_SoundWall_A2Bmode_Mode)0}
#define Proto_SoundWall_PowerMode_init_default   {false, (Proto_SoundWall_PowerMode_Mode)0}
#define Proto_SoundWall_RespGetTotalNodes_init_default {false, 0}
#define Proto_SoundWall_NodeIndex_init_default   {false, 0}
#define Proto_SoundWall_MuteMode_init_default    {false, (Proto_SoundWall_MuteMode_Mode)0}
#define Proto_SoundWall_ReqTestTone_init_default {0, 0}
#define Proto_SoundWall_GainAndDelay_init_default {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
#define Proto_SoundWall_DriverGain_init_default  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
#define Proto_SoundWall_DspEqParam_init_default  {0, 0, 0, 0, 0}
#define Proto_SoundWall_BassAndRoomEQ_init_default {0, 0, {{NULL}, NULL}}
#define Proto_SoundWall_A2Bmode_init_zero        {false, (Proto_SoundWall_A2Bmode_Mode)0}
#define Proto_SoundWall_PowerMode_init_zero      {false, (Proto_SoundWall_PowerMode_Mode)0}
#define Proto_SoundWall_RespGetTotalNodes_init_zero {false, 0}
#define Proto_SoundWall_NodeIndex_init_zero      {false, 0}
#define Proto_SoundWall_MuteMode_init_zero       {false, (Proto_SoundWall_MuteMode_Mode)0}
#define Proto_SoundWall_ReqTestTone_init_zero    {0, 0}
#define Proto_SoundWall_GainAndDelay_init_zero   {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
#define Proto_SoundWall_DriverGain_init_zero     {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
#define Proto_SoundWall_DspEqParam_init_zero     {0, 0, 0, 0, 0}
#define Proto_SoundWall_BassAndRoomEQ_init_zero  {0, 0, {{NULL}, NULL}}

/* Field tags (for use in manual encoding/decoding) */
#define Proto_SoundWall_A2Bmode_mode_tag         1
#define Proto_SoundWall_BassAndRoomEQ_nodeIndex_tag 2
#define Proto_SoundWall_BassAndRoomEQ_bass_gain_tag 3
#define Proto_SoundWall_BassAndRoomEQ_eqParam_tag 4
#define Proto_SoundWall_DriverGain_nodeIndex_tag 2
#define Proto_SoundWall_DriverGain_Tile_1_B_Cal_Gain_tag 3
#define Proto_SoundWall_DriverGain_Tile_1_MT_Cal_Gain_tag 4
#define Proto_SoundWall_DriverGain_Tile_2_B_Cal_Gain_tag 5
#define Proto_SoundWall_DriverGain_Tile_2_MT_Cal_Gain_tag 6
#define Proto_SoundWall_DriverGain_Tile_3_B_Cal_Gain_tag 7
#define Proto_SoundWall_DriverGain_Tile_3_MT_Cal_Gain_tag 8
#define Proto_SoundWall_DriverGain_Tile_4_B_Cal_Gain_tag 9
#define Proto_SoundWall_DriverGain_Tile_4_MT_Cal_Gain_tag 10
#define Proto_SoundWall_DriverGain_Tile_1_TW_Cal_Gain_tag 11
#define Proto_SoundWall_DriverGain_Tile_2_TW_Cal_Gain_tag 12
#define Proto_SoundWall_DriverGain_Tile_3_TW_Cal_Gain_tag 13
#define Proto_SoundWall_DriverGain_Tile_4_TW_Cal_Gain_tag 14
#define Proto_SoundWall_DspEqParam_param1_tag    1
#define Proto_SoundWall_DspEqParam_param2_tag    2
#define Proto_SoundWall_DspEqParam_param3_tag    3
#define Proto_SoundWall_DspEqParam_param4_tag    4
#define Proto_SoundWall_DspEqParam_param5_tag    5
#define Proto_SoundWall_GainAndDelay_nodeIndex_tag 2
#define Proto_SoundWall_GainAndDelay_MT_TW_gain_L_1_tag 3
#define Proto_SoundWall_GainAndDelay_MT_TW_gain_R_1_tag 4
#define Proto_SoundWall_GainAndDelay_MT_TW_gain_L_2_tag 5
#define Proto_SoundWall_GainAndDelay_MT_TW_gain_R_2_tag 6
#define Proto_SoundWall_GainAndDelay_MT_TW_gain_L_3_tag 7
#define Proto_SoundWall_GainAndDelay_MT_TW_gain_R_3_tag 8
#define Proto_SoundWall_GainAndDelay_MT_TW_gain_L_4_tag 9
#define Proto_SoundWall_GainAndDelay_MT_TW_gain_R_4_tag 10
#define Proto_SoundWall_GainAndDelay_MT_TW_delay_L_1_tag 11
#define Proto_SoundWall_GainAndDelay_MT_TW_delay_R_1_tag 12
#define Proto_SoundWall_GainAndDelay_MT_TW_delay_L_2_tag 13
#define Proto_SoundWall_GainAndDelay_MT_TW_delay_R_2_tag 14
#define Proto_SoundWall_GainAndDelay_MT_TW_delay_L_3_tag 15
#define Proto_SoundWall_GainAndDelay_MT_TW_delay_R_3_tag 16
#define Proto_SoundWall_GainAndDelay_MT_TW_delay_L_4_tag 17
#define Proto_SoundWall_GainAndDelay_MT_TW_delay_R_4_tag 18
#define Proto_SoundWall_GainAndDelay_MUTE_L_R_tag 19
#define Proto_SoundWall_MuteMode_mode_tag        1
#define Proto_SoundWall_NodeIndex_nodeIndex_tag  1
#define Proto_SoundWall_PowerMode_mode_tag       1
#define Proto_SoundWall_ReqTestTone_nodeIndex_tag 1
#define Proto_SoundWall_ReqTestTone_speakerTile_tag 2
#define Proto_SoundWall_RespGetTotalNodes_totalNodes_tag 1

/* Struct field encoding specification for nanopb */
extern const pb_field_t Proto_SoundWall_A2Bmode_fields[2];
extern const pb_field_t Proto_SoundWall_PowerMode_fields[2];
extern const pb_field_t Proto_SoundWall_RespGetTotalNodes_fields[2];
extern const pb_field_t Proto_SoundWall_NodeIndex_fields[2];
extern const pb_field_t Proto_SoundWall_MuteMode_fields[2];
extern const pb_field_t Proto_SoundWall_ReqTestTone_fields[3];
extern const pb_field_t Proto_SoundWall_GainAndDelay_fields[19];
extern const pb_field_t Proto_SoundWall_DriverGain_fields[14];
extern const pb_field_t Proto_SoundWall_DspEqParam_fields[6];
extern const pb_field_t Proto_SoundWall_BassAndRoomEQ_fields[4];

/* Maximum encoded size of messages (where known) */
#define Proto_SoundWall_A2Bmode_size             2
#define Proto_SoundWall_PowerMode_size           2
#define Proto_SoundWall_RespGetTotalNodes_size   6
#define Proto_SoundWall_NodeIndex_size           6
#define Proto_SoundWall_MuteMode_size            2
#define Proto_SoundWall_ReqTestTone_size         12
#define Proto_SoundWall_GainAndDelay_size        112
#define Proto_SoundWall_DriverGain_size          78
#define Proto_SoundWall_DspEqParam_size          30
/* Proto_SoundWall_BassAndRoomEQ_size depends on runtime parameters */

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define SOUNDWALL_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif

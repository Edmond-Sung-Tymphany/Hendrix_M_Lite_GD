syntax = "proto2";
package Proto.System;

message NetworkInfo {
	message NetworkInterface {
		enum Type {
			WIFI = 1;
			ETHERNET = 2;
			SOFT_AP = 3;
		}

		enum State {
			/// The device's state is unknown
			UNKNOWN = 0;
			/// Searching for an available access point
			SCANNING = 1;
			/// Currently setting up data connection
			CONNECTING = 2;
			/// Network link established, performing authentication
			AUTHENTICATING = 3;
			/// Awaiting response from DHCP server in order to assign IP address information
			ACQUIRING = 4;
			/// IP traffic should be available
			CONNECTED = 5;
			/// IP traffic not available
			DISCONNECTED = 6;
			/// Attempt to connect failed
			FAILED = 7;
		}

		message WiFi {
			enum Quality {
				EXCELLENT = 0;
				GOOD = 1;
				POOR = 2;
			}
			/// When true, WiFi setup has been performed.
			optional bool Configured = 1;
			/// Connection quality. Because RSSI is vendor specific it is converted to the levels specified by Quality
			optional Quality quality = 2;
		}

		optional Type type = 1;
		optional State state = 2;
		/// WiFi member is only present when type equals WIFI
		optional WiFi wifi = 3;
	}

	repeated NetworkInterface networkInterface = 1;
}

message PowerStatus {
	enum ACLineStatus {
		UNPLUGGED = 0;
		PLUGGED = 1;
	}
	enum BatteryStatus {
		/// The product does not have a battery
		NO_BATTERY = 0;
		LEVEL_CRITICAL = 1;
		LEVEL_LOW = 2;
		LEVEL_MIDDLE = 3;
		LEVEL_HIGH = 4;
	}
	enum BatteryHealthStatus {
		UNKNOWN = 0;
		GOOD = 1;
		POOR = 2;
	}
	optional ACLineStatus acLineStatus = 1;
	optional BatteryStatus batteryStatus = 2;
	/// The battery level in percent, 0-100%
	optional uint32 batteryLevel = 3;
	optional BatteryHealthStatus healthStatus = 4;
	optional bool charging = 5;
}

message Log {
	optional string msg = 1;
}

message PowerRequest {
	enum Type {
		/// FEP should power off the ASE
		POWER_OFF = 0;

		/// FEP should do a power restart of ASE
		POWER_RESTART = 1;
	}

	/// Power request type
	optional Type type = 1;

	/// delay after which the FEP should do the power action specified in field 'type'
	optional uint32 delay_ms = 2;
}

message Voltage {
	enum Type {
		PSV_24V = 0;
		PSV_14V_SB = 1;
		PSV_12V = 2;
		PSV_Plus12VA = 3;
		PSV_5VA = 4;
		PSV_5V = 5;
		PSV_3V3 = 6;
		PSV_1V2 = 7;
		PSV_1V1_DSP3 = 8;
		PSV_1V1_DSP2 = 9;
		PSV_1V1_DSP1 = 10;
		PSV_1V05 = 11;
		PSV_3V3A = 12;
	}

	optional Type type = 1;
	optional double value = 2;
}

message PowerSupplyVoltage {
	repeated Voltage voltage = 1;
}

/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.3 at Fri Mar 17 15:38:03 2017. */

#ifndef PB_ASE_FEP_PB_H_INCLUDED
#define PB_ASE_FEP_PB_H_INCLUDED
#include <pb.h>

#include "common.pb.h"

#include "ase-fep-ReqResp.pb.h"

#include "fep-ase-ReqResp.pb.h"

#include "beo_soundwall.pb.h"

#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _Proto_AseFep_Event_Type {
    Proto_AseFep_Event_Type_BOOTED = 0,
    Proto_AseFep_Event_Type_LOG_MESSAGE = 1,
    Proto_AseFep_Event_Type_PRODUCT_TEST_CTL = 200,
    Proto_AseFep_Event_Type_VOLUME_CTL = 201,
    Proto_AseFep_Event_Type_VERSION_INFO_CTL = 202,
    Proto_AseFep_Event_Type_MUTE_CTL = 203,
    Proto_AseFep_Event_Type_LED_CTL = 204,
    Proto_AseFep_Event_Type_SOURCE_CTL = 205,
    Proto_AseFep_Event_Type_BYPASS_CTL = 206,
    Proto_AseFep_Event_Type_ENTER_DFU_CTL = 207,
    Proto_AseFep_Event_Type_A2B_MASTER_CTL = 208,
    Proto_AseFep_Event_Type_NTC_INFO_CTL = 209,
    Proto_AseFep_Event_Type_MUTE_AMP_CTL = 210,
    Proto_AseFep_Event_Type_SYSTEM_RESET_CTL = 211,
    Proto_AseFep_Event_Type_SYSTEM_STATUS_CTL = 212
} Proto_AseFep_Event_Type;

/* Struct definitions */
typedef struct _Proto_AseFep_Event {
    bool has_type;
    Proto_AseFep_Event_Type type;
    bool has_param;
    uint32_t param;
} Proto_AseFep_Event;

typedef struct _Proto_AseFep_Req {
    bool has_type;
    Proto_AseFep_ReqResp type;
    bool has_id;
    uint32_t id;
    pb_size_t which_data;
    union {
        uint32_t dummy;
        Proto_SoundWallMessage_RequestVersionInfo requestVersionInfo;
        Proto_SoundWallMessage_RequestSetAudioInput requestSetAudioInput;
        Proto_SoundWallMessage_RequestSelectSoundMode requestSelectSoundMode;
        Proto_SoundWallMessage_RequestActiveSoundMode requestActiveSoundMode;
        Proto_SoundWallMessage_RequestCreateSoundMode requestCreateSoundMode;
        Proto_SoundWallMessage_RequestSetA2Bmode requestSetA2Bmode;
    } data;
} Proto_AseFep_Req;

typedef struct _Proto_AseFep_Resp {
    bool has_type;
    Proto_FepAse_ReqResp type;
    bool has_id;
    uint32_t id;
    bool has_genericResponse;
    Proto_Core_GenericResponse genericResponse;
} Proto_AseFep_Resp;

/* Default values for struct fields */

/* Initializer values for message structs */
#define Proto_AseFep_Req_init_default            {false, (Proto_AseFep_ReqResp)0, false, 0, 0, {0}}
#define Proto_AseFep_Resp_init_default           {false, (Proto_FepAse_ReqResp)0, false, 0, false, Proto_Core_GenericResponse_init_default}
#define Proto_AseFep_Event_init_default          {false, (Proto_AseFep_Event_Type)0, false, 0}
#define Proto_AseFep_Req_init_zero               {false, (Proto_AseFep_ReqResp)0, false, 0, 0, {0}}
#define Proto_AseFep_Resp_init_zero              {false, (Proto_FepAse_ReqResp)0, false, 0, false, Proto_Core_GenericResponse_init_zero}
#define Proto_AseFep_Event_init_zero             {false, (Proto_AseFep_Event_Type)0, false, 0}

/* Field tags (for use in manual encoding/decoding) */
#define Proto_AseFep_Event_type_tag              1
#define Proto_AseFep_Event_param_tag             10
#define Proto_AseFep_Req_dummy_tag               9

#define Proto_AseFep_Req_requestVersionInfo_tag  10

#define Proto_AseFep_Req_requestSetAudioInput_tag 11

#define Proto_AseFep_Req_requestSelectSoundMode_tag 12

#define Proto_AseFep_Req_requestActiveSoundMode_tag 13

#define Proto_AseFep_Req_requestCreateSoundMode_tag 14

#define Proto_AseFep_Req_requestSetA2Bmode_tag   15
#define Proto_AseFep_Req_type_tag                1
#define Proto_AseFep_Req_id_tag                  2
#define Proto_AseFep_Resp_type_tag               1
#define Proto_AseFep_Resp_id_tag                 2
#define Proto_AseFep_Resp_genericResponse_tag    3

/* Struct field encoding specification for nanopb */
extern const pb_field_t Proto_AseFep_Req_fields[10];
extern const pb_field_t Proto_AseFep_Resp_fields[4];
extern const pb_field_t Proto_AseFep_Event_fields[3];

/* Maximum encoded size of messages (where known) */
#define Proto_AseFep_Resp_size                   (18 + Proto_Core_GenericResponse_size)
#define Proto_AseFep_Event_size                  12

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define ASE_FEP_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif

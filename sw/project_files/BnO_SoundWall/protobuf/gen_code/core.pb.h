/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.3 at Fri Mar 17 15:38:04 2017. */

#ifndef PB_CORE_PB_H_INCLUDED
#define PB_CORE_PB_H_INCLUDED
#include <pb.h>

#include "ase-fep.pb.h"

#include "fep-ase.pb.h"

#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
/* Struct definitions */
typedef struct _Proto_Core_AseFepMessage {
    pb_size_t which_OneOf;
    union {
        Proto_AseFep_Event aseFepEvent;
        Proto_AseFep_Req aseFepReq;
        Proto_AseFep_Resp aseFepResp;
    } OneOf;
} Proto_Core_AseFepMessage;

typedef struct _Proto_Core_FepAseMessage {
    pb_size_t which_OneOf;
    union {
        Proto_FepAse_Event fepAseEvent;
        Proto_FepAse_Req fepAseReq;
        Proto_FepAse_Resp fepAseResp;
    } OneOf;
} Proto_Core_FepAseMessage;

/* Default values for struct fields */

/* Initializer values for message structs */
#define Proto_Core_AseFepMessage_init_default    {0, {Proto_AseFep_Event_init_default}}
#define Proto_Core_FepAseMessage_init_default    {0, {Proto_FepAse_Event_init_default}}
#define Proto_Core_AseFepMessage_init_zero       {0, {Proto_AseFep_Event_init_zero}}
#define Proto_Core_FepAseMessage_init_zero       {0, {Proto_FepAse_Event_init_zero}}

/* Field tags (for use in manual encoding/decoding) */
#define Proto_Core_AseFepMessage_aseFepEvent_tag 1

#define Proto_Core_AseFepMessage_aseFepReq_tag   2

#define Proto_Core_AseFepMessage_aseFepResp_tag  3
#define Proto_Core_FepAseMessage_fepAseEvent_tag 1

#define Proto_Core_FepAseMessage_fepAseReq_tag   2

#define Proto_Core_FepAseMessage_fepAseResp_tag  3

/* Struct field encoding specification for nanopb */
extern const pb_field_t Proto_Core_AseFepMessage_fields[4];
extern const pb_field_t Proto_Core_FepAseMessage_fields[4];

/* Maximum encoded size of messages (where known) */

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define CORE_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif

/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.3 at Fri Mar 17 15:38:04 2017. */

#ifndef PB_FEP_ASE_PB_H_INCLUDED
#define PB_FEP_ASE_PB_H_INCLUDED
#include <pb.h>

#include "ase-fep-ReqResp.pb.h"

#include "fep-ase-ReqResp.pb.h"

#include "common.pb.h"

#include "beo_soundwall.pb.h"

#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _Proto_FepAse_Event_Type {
    Proto_FepAse_Event_Type_LOG_MESSAGE = 2,
    Proto_FepAse_Event_Type_POWER_STANDBY_EVENT = 3,
    Proto_FepAse_Event_Type_POWER_ON_EVENT = 4,
    Proto_FepAse_Event_Type_NUMBER_ACTIVE_NODE = 5
} Proto_FepAse_Event_Type;

/* Struct definitions */
typedef struct _Proto_FepAse_Event {
    bool has_type;
    Proto_FepAse_Event_Type type;
    pb_size_t which_data;
    union {
        uint32_t nodeIndex;
        Proto_SoundWallMessage_SoundWallLog logMessage;
        Proto_SoundWallMessage_EventNumberActiveNode NumberActiveNode;
    } data;
} Proto_FepAse_Event;

typedef struct _Proto_FepAse_Req {
    bool has_type;
    Proto_FepAse_ReqResp type;
    bool has_id;
    uint32_t id;
} Proto_FepAse_Req;

typedef struct _Proto_FepAse_Resp {
    bool has_type;
    Proto_AseFep_ReqResp type;
    bool has_id;
    uint32_t id;
    bool has_genericResponse;
    Proto_Core_GenericResponse genericResponse;
    pb_size_t which_data;
    union {
        uint32_t nodeIndex;
        Proto_SoundWallMessage_ResponseVersionInfo responseVersionInfo;
        Proto_SoundWallMessage_ResponseGetAudioInput responseGetAudioInput;
        Proto_SoundWallMessage_ResponseActiveSoundMode responseActiveSoundMode;
        Proto_SoundWallMessage_ResponseGetA2Bmode responseGetA2Bmode;
        Proto_SoundWallMessage_ResponseGetA2BnumberActiveNode responseGetA2BnumberActiveNode;
        Proto_SoundWallMessage_ResponseGetNTCvalue responseGetNTCvalue;
    } data;
} Proto_FepAse_Resp;

/* Default values for struct fields */

/* Initializer values for message structs */
#define Proto_FepAse_Event_init_default          {false, (Proto_FepAse_Event_Type)0, 0, {0}}
#define Proto_FepAse_Req_init_default            {false, (Proto_FepAse_ReqResp)0, false, 0}
#define Proto_FepAse_Resp_init_default           {false, (Proto_AseFep_ReqResp)0, false, 0, false, Proto_Core_GenericResponse_init_default, 0, {0}}
#define Proto_FepAse_Event_init_zero             {false, (Proto_FepAse_Event_Type)0, 0, {0}}
#define Proto_FepAse_Req_init_zero               {false, (Proto_FepAse_ReqResp)0, false, 0}
#define Proto_FepAse_Resp_init_zero              {false, (Proto_AseFep_ReqResp)0, false, 0, false, Proto_Core_GenericResponse_init_zero, 0, {0}}

/* Field tags (for use in manual encoding/decoding) */
#define Proto_FepAse_Event_nodeIndex_tag         9

#define Proto_FepAse_Event_logMessage_tag        11

#define Proto_FepAse_Event_NumberActiveNode_tag  12
#define Proto_FepAse_Event_type_tag              1
#define Proto_FepAse_Req_type_tag                1
#define Proto_FepAse_Req_id_tag                  2
#define Proto_FepAse_Resp_nodeIndex_tag          9

#define Proto_FepAse_Resp_responseVersionInfo_tag 10

#define Proto_FepAse_Resp_responseGetAudioInput_tag 11

#define Proto_FepAse_Resp_responseActiveSoundMode_tag 12

#define Proto_FepAse_Resp_responseGetA2Bmode_tag 13

#define Proto_FepAse_Resp_responseGetA2BnumberActiveNode_tag 14

#define Proto_FepAse_Resp_responseGetNTCvalue_tag 15
#define Proto_FepAse_Resp_type_tag               1
#define Proto_FepAse_Resp_id_tag                 2
#define Proto_FepAse_Resp_genericResponse_tag    3

/* Struct field encoding specification for nanopb */
extern const pb_field_t Proto_FepAse_Event_fields[5];
extern const pb_field_t Proto_FepAse_Req_fields[3];
extern const pb_field_t Proto_FepAse_Resp_fields[11];

/* Maximum encoded size of messages (where known) */
#define Proto_FepAse_Req_size                    12

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define FEP_ASE_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif

#ifndef _ADAU1451_CONFIG_
#define _ADAU1451_CONFIG_

/************************************************************************
**********  INCLUDE                                            **********
************************************************************************/
typedef const uint8 ADI_REG_TYPE; //must before include file
#include "ADAU1451_IC_1_PARAM.h"
#include "ADAU1451_IC_1.h"


/************************************************************************
**********  MACRO                                              **********
************************************************************************/
#define  DSP_RESET_PIN_HIGH() GpioDrv_SetBit(&gpioDsp,GPIO_OUT_DSP_RST_N) //** Active LOW **
#define  DSP_RESET_PIN_LOW()  GpioDrv_ClearBit(&gpioDsp,GPIO_OUT_DSP_RST_N)
#define  IS_DSP_TUNE()        GpioDrv_ReadBit(&gpioDsp,GPIO_IN_DSP_TUNE)

#define  BOOST_CAP_ENABLE(x)  GpioDrv_SetBit(&(x),GPIO_OUT_BOOST_CAP_ON) //Active HIGH
#define  BOOST_CAP_DISABLE(x) GpioDrv_ClearBit(&(x),GPIO_OUT_BOOST_CAP_ON)

extern cGpioDrv gpioDsp;


/************************************************************************
**********  PORTING LAYDER                                     **********
************************************************************************/
#define SIGMA_WRITE_REGISTER_BLOCK(dev_address, reg_addr, data_len, pdata) \
    DSPDrv1451_Writer_Register(me, dev_address, reg_addr, data_len, (uint8*)pdata);



/************************************************************************
********** Messages related to the "DSP Core Control Register" **********
************************************************************************/
/* Common */
#define ADAU1451_REGISTER_LEN       (4)
#define PROGRAM_RAM_PAGE_SIZE       (4)
#define PARA_RAM_PAGE_SIZE          (4)
#define DM1_PAGE_SIZE               (4)

/* Signal Detection */
#define VOL_INPUT_REGISTER                           MOD_SIGNALDETECTION_READBACK_AUXINDET_DB_READBACKALGSIGMA3002_ADDR
#define VOL_INPUT2_REGISTER                          MOD_SIGNALDETECTION_READBACK_OPTICALDET_DB_READBACKALGSIGMA3001_ADDR
#define ADAU1451_SPDIF_IN_SIGNAL_DETECTION_ADDR      MOD_SIGNALDETECTION_READBACK_OPTICALDET_DB_READBACKALGSIGMA3001_ADDR
#define ADAU1451_MIC_SIGNAL_DETECTION_ADDR           MOD_SIGNALDETECTION_READBACK_ASEDET_DB_READBACKALGSIGMA30013_ADDR
#define VOL_REGISTER_LEN                            (4)
#define ADAU1451_SIGNAL_DETECTION_LEN               (4)


/* Volume Setting */
#define ADAU1451_VOLUME_ADDR                         MOD_VOLUMECONTROL_SETVOLUME_DCINPALG145X2VALUE_ADDR
#define ADAU1451_UPDATE_VOLUME_LEN                   (6)

/* Source selection
 * the register for source selection is changed when the DSP layout is changed
 * so the complier switch is here
 */
#define SOURCE_SELECT_REGISTER_HIGH_BYTE             (MOD_SOURCESWITCH_NX2_1_ALG0_STEREOMUXSIGMA3001VOL00_ADDR >> 8)
#define SOURCE_SELECT_REGISTER_LOW_BYTE              (MOD_SOURCESWITCH_NX2_1_ALG0_STEREOMUXSIGMA3001VOL00_ADDR & 0xff)
#define SOURCE_SELECT_REGISTER_LEN                   (14)

#define SOURCE_SELECT_IN_MROOM_REGISTER_HIGH_BYTE    (MOD_NX2_3_ALG0_STEREOMUXSIGMA3004VOL00_ADDR >> 8)
#define SOURCE_SELECT_IN_MROOM_REGISTER_LOW_BYTE     (MOD_NX2_3_ALG0_STEREOMUXSIGMA3004VOL00_ADDR & 0xff)
#define LINE_IN_SOURCE_SELECT_REGISTER_LEN           (10)

#define BASS_PORT_SWICTH_REGISTER_HIGH_BYTE          (MOD_SE_TUNING_CLOSED_PORTEDSWITCH_MONOMUXSIGMA300NS1INDEX_ADDR >> 8)
#define BASS_PORT_SWICTH_REGISTER_LOW_BYTE           (MOD_SE_TUNING_CLOSED_PORTEDSWITCH_MONOMUXSIGMA300NS1INDEX_ADDR & 0xff)
#define BASS_PORT_SWICTH_REGISTER_LEN                (6)



//I2S from ASE-NG
const uint8 ADAU1451_DIGITAL_INPUT_1_SELECT[SOURCE_SELECT_REGISTER_LEN]  = {SOURCE_SELECT_REGISTER_HIGH_BYTE, SOURCE_SELECT_REGISTER_LOW_BYTE,
                                                  0x01, 0x00, 0x00, 0x00,
                                                  0x00, 0x00, 0x00, 0x00,
                                                  0x00, 0x00, 0x00, 0x00};

//from Optical
const uint8 ADAU1451_DIGITAL_INPUT_SPDIF_SELECT[SOURCE_SELECT_REGISTER_LEN]  = {SOURCE_SELECT_REGISTER_HIGH_BYTE, SOURCE_SELECT_REGISTER_LOW_BYTE,
                                                  0x00, 0x00, 0x00, 0x00,
                                                  0x01, 0x00, 0x00, 0x00,
                                                  0x00, 0x00, 0x00, 0x00};

//I2S from Aux-In
const uint8 ADAU1451_DIGITAL_INPUT_2_SELECT[SOURCE_SELECT_REGISTER_LEN]  = {SOURCE_SELECT_REGISTER_HIGH_BYTE, SOURCE_SELECT_REGISTER_LOW_BYTE,
                                                  0x00, 0x00, 0x00, 0x00,
                                                  0x00, 0x00, 0x00, 0x00,
                                                  0x01, 0x00, 0x00, 0x00};

////Optical to ASE
//const uint8 ADAU1451_LINE_IN_SPDIF_SELECT[LINE_IN_SOURCE_SELECT_REGISTER_LEN]  = {SOURCE_SELECT_IN_MROOM_REGISTER_HIGH_BYTE, SOURCE_SELECT_IN_MROOM_REGISTER_LOW_BYTE,
//                                                     0x01, 0x00, 0x00, 0x00,
//                                                     0x00, 0x00, 0x00, 0x00};
//
////AUX to ASE
//const uint8 ADAU1451_LINE_IN_AUX_SELECT[LINE_IN_SOURCE_SELECT_REGISTER_LEN]  = {SOURCE_SELECT_IN_MROOM_REGISTER_HIGH_BYTE, SOURCE_SELECT_IN_MROOM_REGISTER_LOW_BYTE,
//                                                     0x00, 0x00, 0x00, 0x00,
//                                                     0x01, 0x00, 0x00, 0x00};

//TODO: recovery ADAU1451_BASS_PORT_CLOSED
// Bass port closed
const uint8 ADAU1451_BASS_PORT_CLOSED[BASS_PORT_SWICTH_REGISTER_LEN]  = {/*BASS_PORT_SWICTH_REGISTER_HIGH_BYTE, BASS_PORT_SWICTH_REGISTER_LOW_BYTE, */
                                                     0x00, 0x00, 0x00, 0x00};

//TODO: recovery ADAU1451_BASS_PORT_OPENED
// Bass port opened
const uint8 ADAU1451_BASS_PORT_OPENED[BASS_PORT_SWICTH_REGISTER_LEN]  = {/*BASS_PORT_SWICTH_REGISTER_HIGH_BYTE, BASS_PORT_SWICTH_REGISTER_LOW_BYTE,*/
                                                     0x00, 0x00, 0x00, 0x01};

/*
* Line-in Mute
*/
#define LINE_IN_TO_ASETK_MUTE_REGISTER_HIGH_BYTE    (MOD_ASE_NG_MUTE_ALG0_MUTE_ADDR >> 8)
#define LINE_IN_TO_ASETK_MUTE_REGISTER_LOW_BYTE     (MOD_ASE_NG_MUTE_ALG0_MUTE_ADDR & 0xff)
#define LINE_IN_TO_ASETK_MUTE_REGISTER_LEN          (6)

//const uint8 ADAU1451_LINE_IN_TO_ASETK_MUTE_ENABLE[LINE_IN_TO_ASETK_MUTE_REGISTER_LEN]  = {LINE_IN_TO_ASETK_MUTE_REGISTER_HIGH_BYTE, LINE_IN_TO_ASETK_MUTE_REGISTER_LOW_BYTE,
//                                                  0x00, 0x00, 0x00, 0x00};
//const uint8 ADAU1451_LINE_IN_TO_ASETK_MUTE_DISABLE[LINE_IN_TO_ASETK_MUTE_REGISTER_LEN] = {LINE_IN_TO_ASETK_MUTE_REGISTER_HIGH_BYTE, LINE_IN_TO_ASETK_MUTE_REGISTER_LOW_BYTE,
//                                                  0x01, 0x00, 0x00, 0x00};

/* Calibration gain adjustment
 */
#define CAL_GAIN1_REGISTER         MOD_CAL_GAIN_GAIN_WF_GAINALGNS145X2GAIN_ADDR       //woofer
//#define CAL_GAIN2_REGISTER         MOD_CAL_GAIN_GAIN_WF_GAINALGNS145X2GAIN_ADDR //middle-A
#define CAL_GAIN3_REGISTER         MOD_CAL_GAIN_GAIN_WF_GAINALGNS145X2GAIN_ADDR //middle-B
#define CAL_GAIN4_REGISTER         MOD_CAL_GAIN_GAIN_WF_GAINALGNS145X2GAIN_ADDR  //twetter
#define CAL_GAIN_REGISTER_LEN     (6)


/* NTC tempearture update */
#define DC_REGISTER_LEN     (6)


/* Pass through enable */
//#define PASS_THROUGH_REGISTER_HIGH_BYTE    (MOD_BYPASS_NX6_1_STEREOMUXSIGMA300NS61INDEX_ADDR >> 8)
//#define PASS_THROUGH_REGISTER_LOW_BYTE     (MOD_BYPASS_NX6_1_STEREOMUXSIGMA300NS61INDEX_ADDR & 0xff)
//#define PASS_THROUGH_REGISTER_LEN          (6)

//const uint8 ADAU1451_PASS_THROUGH_ENABLE[PASS_THROUGH_REGISTER_LEN]  = {PASS_THROUGH_REGISTER_HIGH_BYTE, PASS_THROUGH_REGISTER_LOW_BYTE,
//                                                  0x00, 0x00, 0x00, 0x06};
//const uint8 ADAU1451_PASS_THROUGH_DISABLE[PASS_THROUGH_REGISTER_LEN] = {PASS_THROUGH_REGISTER_HIGH_BYTE, PASS_THROUGH_REGISTER_LOW_BYTE,
//                                                  0x00, 0x00, 0x00, 0x00};

#define MUTE_WF_HIGH_BYTE      (MOD_POLARITIES_MUTEWOOFER_MUTENOSLEWADAU145XALG6MUTE_ADDR >> 8)
#define MUTE_WF_LOW_BYTE       (MOD_POLARITIES_MUTEWOOFER_MUTENOSLEWADAU145XALG6MUTE_ADDR & 0xff)

#define MUTE_FR_F_HIGH_BYTE    (MOD_POLARITIES_MUTEMIDDLEB_MUTENOSLEWADAU145XALG2MUTE_ADDR >> 8)
#define MUTE_FR_F_LOW_BYTE     (MOD_POLARITIES_MUTEMIDDLEB_MUTENOSLEWADAU145XALG2MUTE_ADDR & 0xff)

#define MUTE_TW_F_HIGH_BYTE    (MOD_POLARITIES_MUTETWEETER_MUTENOSLEWADAU145XALG1MUTE_ADDR >> 8)
#define MUTE_TW_F_LOW_BYTE     (MOD_POLARITIES_MUTETWEETER_MUTENOSLEWADAU145XALG1MUTE_ADDR & 0xff)

#define MUTE_FR_R_HIGH_BYTE    (MOD_POLARITIES_MUTEMIDDLEB_2_MUTENOSLEWADAU145XALG8MUTE_ADDR >> 8)
#define MUTE_FR_R_LOW_BYTE     (MOD_POLARITIES_MUTEMIDDLEB_2_MUTENOSLEWADAU145XALG8MUTE_ADDR & 0xff)

#define MUTE_TW_R_HIGH_BYTE    (MOD_POLARITIES_MUTETWEETER_2_MUTENOSLEWADAU145XALG11MUTE_ADDR >> 8)
#define MUTE_TW_R_LOW_BYTE     (MOD_POLARITIES_MUTETWEETER_2_MUTENOSLEWADAU145XALG11MUTE_ADDR & 0xff)

#define MUTE_CHANNEL_LEN      (6)

//const uint8 ADAU1451_MUTE_WF_ENABLE   [MUTE_CHANNEL_LEN] = {MUTE_WF_HIGH_BYTE,   MUTE_WF_LOW_BYTE,   0x00, 0x00, 0x00, 0x00};
//const uint8 ADAU1451_MUTE_WF_DISABLE  [MUTE_CHANNEL_LEN] = {MUTE_WF_HIGH_BYTE,   MUTE_WF_LOW_BYTE,   0x00, 0x00, 0x00, 0x01};
//
//const uint8 ADAU1451_MUTE_FR_F_ENABLE [MUTE_CHANNEL_LEN] = {MUTE_FR_F_HIGH_BYTE, MUTE_FR_F_LOW_BYTE, 0x00, 0x00, 0x00, 0x00};
//const uint8 ADAU1451_MUTE_FR_F_DISABLE[MUTE_CHANNEL_LEN] = {MUTE_FR_F_HIGH_BYTE, MUTE_FR_F_LOW_BYTE, 0x00, 0x00, 0x00, 0x01};
//
//const uint8 ADAU1451_MUTE_TW_F_ENABLE [MUTE_CHANNEL_LEN] = {MUTE_TW_F_HIGH_BYTE, MUTE_TW_F_LOW_BYTE, 0x00, 0x00, 0x00, 0x00};
//const uint8 ADAU1451_MUTE_TW_F_DISABLE[MUTE_CHANNEL_LEN] = {MUTE_TW_F_HIGH_BYTE, MUTE_TW_F_LOW_BYTE, 0x00, 0x00, 0x00, 0x01};
//
//const uint8 ADAU1451_MUTE_FR_R_ENABLE [MUTE_CHANNEL_LEN] = {MUTE_FR_R_HIGH_BYTE, MUTE_FR_R_LOW_BYTE, 0x00, 0x00, 0x00, 0x00};
//const uint8 ADAU1451_MUTE_FR_R_DISABLE[MUTE_CHANNEL_LEN] = {MUTE_FR_R_HIGH_BYTE, MUTE_FR_R_LOW_BYTE, 0x00, 0x00, 0x00, 0x01};
//
//const uint8 ADAU1451_MUTE_TW_R_ENABLE [MUTE_CHANNEL_LEN] = {MUTE_TW_R_HIGH_BYTE, MUTE_TW_R_LOW_BYTE, 0x00, 0x00, 0x00, 0x00};
//const uint8 ADAU1451_MUTE_TW_R_DISABLE[MUTE_CHANNEL_LEN] = {MUTE_TW_R_HIGH_BYTE, MUTE_TW_R_LOW_BYTE, 0x00, 0x00, 0x00, 0x01};

/* DSP Version */
#define DSP_VER_REGISTER              (MOD_DSP_VERSION_DCINPALG145X1VALUE_ADDR)
#define DSP_VER_REGISTER_LEN          (4)
#define DSP_VER_FLOAT_VALUE           (MOD_DSP_VERSION_DCINPALG145X1VALUE_VALUE)


/* ASRC */
#define DSP_ASRC_FROM_ASETK  DSP_ASRC0

#define LOUDNESS_REG_VOL_CTRL_REGISTER_HIGH_BYTE    (MOD_VOLUMECONTROL_LOUDNESS_ON_OFF_ALG0_MONOMUXS300SLEW1VOL00_ADDR >> 8)
#define LOUDNESS_REG_VOL_CTRL_REGISTER_LOW_BYTE     (MOD_VOLUMECONTROL_LOUDNESS_ON_OFF_ALG0_MONOMUXS300SLEW1VOL00_ADDR & 0xff)
#define LOUDNESS_REG_VOL_CTRL_REGISTER_LEN          (10)

//TODO: recovery LOUDNESS_REG_VOL_CTRL_REGISTER_HIGH_BYTE
//Enable Loundness control
const uint8 ADAU1451_ENABLE_LOUDNESS_REG_CTRL[LOUDNESS_REG_VOL_CTRL_REGISTER_LEN]  = {/*LOUDNESS_REG_VOL_CTRL_REGISTER_HIGH_BYTE, LOUDNESS_REG_VOL_CTRL_REGISTER_LOW_BYTE,*/
                                                  0x01, 0x00, 0x00, 0x00,
                                                  0x00, 0x00, 0x00, 0x00};

//TODO: recovery ADAU1451_DISABLE_LOUDNESS_REG_CTRL
//Disable Loundness control
const uint8 ADAU1451_DISABLE_LOUDNESS_REG_CTRL[LOUDNESS_REG_VOL_CTRL_REGISTER_LEN]  = {/*LOUDNESS_REG_VOL_CTRL_REGISTER_HIGH_BYTE, LOUDNESS_REG_VOL_CTRL_REGISTER_LOW_BYTE,*/
                                                  0x00, 0x00, 0x00, 0x00,
                                                  0x01, 0x00, 0x00, 0x00};

/* Bass Setting */
#define ADAU1451_BASS_ADDR                  MOD_VOLUMECONTROL_BASS_DCINPALG145X30VALUE_ADDR
#define ADAU1451_UPDATE_BASS_LEN            (6)

/* Treble Setting */
#define ADAU1451_TREBLE_ADDR                MOD_VOLUMECONTROL_TREBLE_DCINPALG145X31VALUE_ADDR
#define ADAU1451_UPDATE_TREBLE_LEN          (6)


/***********************************************************/
/****************** Global Variable ************************/
/***********************************************************/

static tDspInitSection DspInitSection[] =
{
    {DSPDrv1451_Reset1, 50},
    {DSPDrv1451_Reset2, 50},
    {DSPDrv1451_Reset3, 50},
    {DSPDrv1451_InitI2c, 50},
    {&DSPDrv1451_InitSection1, 10},
    {&DSPDrv1451_InitSection2, 10},
    {&DSPDrv1451_InitSection3, 10},
    {&DSPDrv1451_InitSection4, 10},
    {&DSPDrv1451_InitSection5, 50},
    {&DSPDrv1451_InitSection6, 50},
    {&DSPDrv1451_InitSection7, 50},
    {&DSPDrv1451_InitSection8, 10},
    {&DSPDrv1451_InitSection9, 10},
    {&DSPDrv1451_InitSection10, 200},
};

/************************************************************************
**********  INIT FUNCTION                                      **********
************************************************************************/
/* When export files from ADAU1451.dspproj, remember to porting
 * initialize function from ADAU1451_IC_1.h
 */
static void DSPDrv1451_InitSection1(void *p)
{
    TP_PRINTF("DSPDrv1451_InitSection1\n\r");

    cDSPDrv1451* me = (cDSPDrv1451*)p;
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOFT_RESET_IC_1_ADDR, REG_SOFT_RESET_IC_1_BYTE, R0_SOFT_RESET_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOFT_RESET_IC_1_ADDR, REG_SOFT_RESET_IC_1_BYTE, R1_SOFT_RESET_IC_1_Default );

    //SIGMA_WRITE_DELAY( DEVICE_ADDR_IC_1, R2_RESET_DELAY_IC_1_SIZE, R2_RESET_DELAY_IC_1_Default );

    TP_PRINTF("DSPDrv1451_InitSection1 finish\n\r");
}

static void DSPDrv1451_InitSection2(void *p)
{
    TP_PRINTF("DSPDrv1451_InitSection2\n\r");

    cDSPDrv1451* me = (cDSPDrv1451*)p;
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_HIBERNATE_IC_1_ADDR, REG_HIBERNATE_IC_1_BYTE, R3_HIBERNATE_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_HIBERNATE_IC_1_ADDR, REG_HIBERNATE_IC_1_BYTE, R4_HIBERNATE_IC_1_Default );

    //SIGMA_WRITE_DELAY( DEVICE_ADDR_IC_1, R5_HIBERNATE_DELAY_IC_1_SIZE, R5_HIBERNATE_DELAY_IC_1_Default );

    TP_PRINTF("DSPDrv1451_InitSection2 finish\n\r");
}

static void DSPDrv1451_InitSection3(void *p)
{
    TP_PRINTF("DSPDrv1451_InitSection3\n\r");

    cDSPDrv1451* me = (cDSPDrv1451*)p;
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_KILL_CORE_IC_1_ADDR, REG_KILL_CORE_IC_1_BYTE, R6_KILL_CORE_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_KILL_CORE_IC_1_ADDR, REG_KILL_CORE_IC_1_BYTE, R7_KILL_CORE_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_PLL_ENABLE_IC_1_ADDR, REG_PLL_ENABLE_IC_1_BYTE, R8_PLL_ENABLE_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_PLL_CTRL1_IC_1_ADDR, REG_PLL_CTRL1_IC_1_BYTE, R9_PLL_CTRL1_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_PLL_CLK_SRC_IC_1_ADDR, REG_PLL_CLK_SRC_IC_1_BYTE, R10_PLL_CLK_SRC_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_MCLK_OUT_IC_1_ADDR, REG_MCLK_OUT_IC_1_BYTE, R11_MCLK_OUT_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_PLL_ENABLE_IC_1_ADDR, REG_PLL_ENABLE_IC_1_BYTE, R12_PLL_ENABLE_IC_1_Default );

    //SIGMA_WRITE_DELAY( DEVICE_ADDR_IC_1, R13_PLL_LOCK_DELAY_IC_1_SIZE, R13_PLL_LOCK_DELAY_IC_1_Default );

    TP_PRINTF("DSPDrv1451_InitSection3 finish\n\r");
}

static void DSPDrv1451_InitSection4(void *p)
{
    TP_PRINTF("DSPDrv1451_InitSection4\n\r");

    cDSPDrv1451* me = (cDSPDrv1451*)p;
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_POWER_ENABLE0_IC_1_ADDR, REG_POWER_ENABLE0_IC_1_BYTE, R14_POWER_ENABLE0_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_POWER_ENABLE1_IC_1_ADDR, REG_POWER_ENABLE1_IC_1_BYTE, R15_POWER_ENABLE1_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_ASRC_MUTE_IC_1_ADDR, REG_ASRC_MUTE_IC_1_BYTE, R16_ASRC_MUTE_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_DMIC_CTRL0_IC_1_ADDR, REG_DMIC_CTRL0_IC_1_BYTE, R17_DMIC_CTRL0_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_ASRC_INPUT0_IC_1_ADDR, REG_ASRC_INPUT0_IC_1_BYTE, R18_ASRC_INPUT0_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_ASRC_INPUT1_IC_1_ADDR, REG_ASRC_INPUT1_IC_1_BYTE, R19_ASRC_INPUT1_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_ASRC_INPUT2_IC_1_ADDR, REG_ASRC_INPUT2_IC_1_BYTE, R20_ASRC_INPUT2_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_ASRC_INPUT3_IC_1_ADDR, REG_ASRC_INPUT3_IC_1_BYTE, R21_ASRC_INPUT3_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_ASRC_INPUT4_IC_1_ADDR, REG_ASRC_INPUT4_IC_1_BYTE, R22_ASRC_INPUT4_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_ASRC_INPUT5_IC_1_ADDR, REG_ASRC_INPUT5_IC_1_BYTE, R23_ASRC_INPUT5_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_ASRC_OUT_RATE0_IC_1_ADDR, REG_ASRC_OUT_RATE0_IC_1_BYTE, R24_ASRC_OUT_RATE0_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_ASRC_OUT_RATE1_IC_1_ADDR, REG_ASRC_OUT_RATE1_IC_1_BYTE, R25_ASRC_OUT_RATE1_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_ASRC_OUT_RATE2_IC_1_ADDR, REG_ASRC_OUT_RATE2_IC_1_BYTE, R26_ASRC_OUT_RATE2_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_ASRC_OUT_RATE3_IC_1_ADDR, REG_ASRC_OUT_RATE3_IC_1_BYTE, R27_ASRC_OUT_RATE3_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_ASRC_OUT_RATE4_IC_1_ADDR, REG_ASRC_OUT_RATE4_IC_1_BYTE, R28_ASRC_OUT_RATE4_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_ASRC_OUT_RATE5_IC_1_ADDR, REG_ASRC_OUT_RATE5_IC_1_BYTE, R29_ASRC_OUT_RATE5_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_ASRC_OUT_RATE6_IC_1_ADDR, REG_ASRC_OUT_RATE6_IC_1_BYTE, R30_ASRC_OUT_RATE6_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_ASRC_OUT_RATE7_IC_1_ADDR, REG_ASRC_OUT_RATE7_IC_1_BYTE, R31_ASRC_OUT_RATE7_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE0_IC_1_ADDR, REG_SOUT_SOURCE0_IC_1_BYTE, R32_SOUT_SOURCE0_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE1_IC_1_ADDR, REG_SOUT_SOURCE1_IC_1_BYTE, R33_SOUT_SOURCE1_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE2_IC_1_ADDR, REG_SOUT_SOURCE2_IC_1_BYTE, R34_SOUT_SOURCE2_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE3_IC_1_ADDR, REG_SOUT_SOURCE3_IC_1_BYTE, R35_SOUT_SOURCE3_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE4_IC_1_ADDR, REG_SOUT_SOURCE4_IC_1_BYTE, R36_SOUT_SOURCE4_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE5_IC_1_ADDR, REG_SOUT_SOURCE5_IC_1_BYTE, R37_SOUT_SOURCE5_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE6_IC_1_ADDR, REG_SOUT_SOURCE6_IC_1_BYTE, R38_SOUT_SOURCE6_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE7_IC_1_ADDR, REG_SOUT_SOURCE7_IC_1_BYTE, R39_SOUT_SOURCE7_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE8_IC_1_ADDR, REG_SOUT_SOURCE8_IC_1_BYTE, R40_SOUT_SOURCE8_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE9_IC_1_ADDR, REG_SOUT_SOURCE9_IC_1_BYTE, R41_SOUT_SOURCE9_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE10_IC_1_ADDR, REG_SOUT_SOURCE10_IC_1_BYTE, R42_SOUT_SOURCE10_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE11_IC_1_ADDR, REG_SOUT_SOURCE11_IC_1_BYTE, R43_SOUT_SOURCE11_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE12_IC_1_ADDR, REG_SOUT_SOURCE12_IC_1_BYTE, R44_SOUT_SOURCE12_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE13_IC_1_ADDR, REG_SOUT_SOURCE13_IC_1_BYTE, R45_SOUT_SOURCE13_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE14_IC_1_ADDR, REG_SOUT_SOURCE14_IC_1_BYTE, R46_SOUT_SOURCE14_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE15_IC_1_ADDR, REG_SOUT_SOURCE15_IC_1_BYTE, R47_SOUT_SOURCE15_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE16_IC_1_ADDR, REG_SOUT_SOURCE16_IC_1_BYTE, R48_SOUT_SOURCE16_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE17_IC_1_ADDR, REG_SOUT_SOURCE17_IC_1_BYTE, R49_SOUT_SOURCE17_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE18_IC_1_ADDR, REG_SOUT_SOURCE18_IC_1_BYTE, R50_SOUT_SOURCE18_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE19_IC_1_ADDR, REG_SOUT_SOURCE19_IC_1_BYTE, R51_SOUT_SOURCE19_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE20_IC_1_ADDR, REG_SOUT_SOURCE20_IC_1_BYTE, R52_SOUT_SOURCE20_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE21_IC_1_ADDR, REG_SOUT_SOURCE21_IC_1_BYTE, R53_SOUT_SOURCE21_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE22_IC_1_ADDR, REG_SOUT_SOURCE22_IC_1_BYTE, R54_SOUT_SOURCE22_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SOUT_SOURCE23_IC_1_ADDR, REG_SOUT_SOURCE23_IC_1_BYTE, R55_SOUT_SOURCE23_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SERIAL_BYTE_1_0_IC_1_ADDR, REG_SERIAL_BYTE_1_0_IC_1_BYTE, R56_SERIAL_BYTE_1_0_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SERIAL_BYTE_2_0_IC_1_ADDR, REG_SERIAL_BYTE_2_0_IC_1_BYTE, R57_SERIAL_BYTE_2_0_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SERIAL_BYTE_4_0_IC_1_ADDR, REG_SERIAL_BYTE_4_0_IC_1_BYTE, R58_SERIAL_BYTE_4_0_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SERIAL_BYTE_5_0_IC_1_ADDR, REG_SERIAL_BYTE_5_0_IC_1_BYTE, R59_SERIAL_BYTE_5_0_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SERIAL_BYTE_6_0_IC_1_ADDR, REG_SERIAL_BYTE_6_0_IC_1_BYTE, R60_SERIAL_BYTE_6_0_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SERIAL_BYTE_7_0_IC_1_ADDR, REG_SERIAL_BYTE_7_0_IC_1_BYTE, R61_SERIAL_BYTE_7_0_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SPDIF_RESTART_IC_1_ADDR, REG_SPDIF_RESTART_IC_1_BYTE, R62_SPDIF_RESTART_IC_1_Default );




    TP_PRINTF("DSPDrv1451_InitSection4 finish\n\r");
}

static void DSPDrv1451_InitSection5(void *p)
{
    TP_PRINTF("DSPDrv1451_InitSection5\n\r");

    //SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, PROGRAM_ADDR_IC_1, PROGRAM_SIZE_IC_1, Program_Data_IC_1 );
    cDSPDrv1451* me = (cDSPDrv1451*)p;
    uint8 buffer[PROGRAM_RAM_PAGE_SIZE+2];
    uint16 RegAddr;
    const uint8* bufferPtr;
    bufferPtr=Program_Data_IC_1;
    RegAddr = PROGRAM_ADDR_IC_1;
    for(RegAddr=PROGRAM_ADDR_IC_1;RegAddr<(PROGRAM_ADDR_IC_1 + (PROGRAM_SIZE_IC_1/PROGRAM_RAM_PAGE_SIZE));RegAddr++)
    {
        buffer[0]=(RegAddr>>8);
        buffer[1]=(RegAddr&0xff);
        memcpy(&buffer[2], bufferPtr, PROGRAM_RAM_PAGE_SIZE);
        DSPDrv1451_I2cWrite(me, sizeof(buffer), (uint8*)buffer);
        bufferPtr+=PROGRAM_RAM_PAGE_SIZE;
    }

    TP_PRINTF("DSPDrv1451_InitSection5 finish\n\r");
}


static void DSPDrv1451_InitSection6(void *p)
{
    TP_PRINTF("DSPDrv1451_InitSection6\n\r");
    //SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, PARAM_ADDR_IC_1, PARAM_SIZE_IC_1, Param_Data_IC_1 );

    cDSPDrv1451* me = (cDSPDrv1451*)p;

    uint8 buffer[PARA_RAM_PAGE_SIZE+2];
    uint16 RegAddr;
    const uint8* bufferPtr;
    bufferPtr=Param_Data_IC_1;
    RegAddr = PARAM_ADDR_IC_1;
    for(RegAddr=PARAM_ADDR_IC_1;RegAddr<(PARAM_ADDR_IC_1 + (PARAM_SIZE_IC_1/PARA_RAM_PAGE_SIZE));RegAddr++)
    {
        buffer[0]=(RegAddr>>8);
        buffer[1]=(RegAddr&0xff);
        memcpy(&buffer[2], bufferPtr, PARA_RAM_PAGE_SIZE);
        DSPDrv1451_I2cWrite(me, sizeof(buffer), (uint8*)buffer);
        bufferPtr+=PARA_RAM_PAGE_SIZE;
    }

    TP_PRINTF("DSPDrv1451_InitSection6 finish\n\r");
}


static void DSPDrv1451_InitSection7(void *p)
{
    TP_PRINTF("DSPDrv1451_InitSection7\n\r");
    //SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, DM1_DATA_ADDR_IC_1, DM1_DATA_SIZE_IC_1, DM1_DATA_Data_IC_1 );
    cDSPDrv1451* me = (cDSPDrv1451*)p;

    uint8 buffer[DM1_PAGE_SIZE+2];
    uint16 RegAddr;
    const uint8* bufferPtr;
    bufferPtr=DM1_DATA_Data_IC_1;
    RegAddr = DM1_DATA_ADDR_IC_1;
    for(RegAddr=DM1_DATA_ADDR_IC_1;RegAddr<(DM1_DATA_ADDR_IC_1 + (DM1_DATA_SIZE_IC_1/DM1_PAGE_SIZE));RegAddr++)
    {
        buffer[0]=(RegAddr>>8);
        buffer[1]=(RegAddr&0xff);
        memcpy(&buffer[2], bufferPtr, PARA_RAM_PAGE_SIZE);
        DSPDrv1451_I2cWrite(me, sizeof(buffer), (uint8*)buffer);
        bufferPtr+=DM1_PAGE_SIZE;
    }

    TP_PRINTF("DSPDrv1451_InitSection7 finish\n\r");
}

static void DSPDrv1451_InitSection8(void *p)
{
    TP_PRINTF("DSPDrv1451_InitSection8\r\n  ");

    cDSPDrv1451* me = (cDSPDrv1451*)p;
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_KILL_CORE_IC_1_ADDR, REG_KILL_CORE_IC_1_BYTE, R66_KILL_CORE_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_START_ADDRESS_IC_1_ADDR, REG_START_ADDRESS_IC_1_BYTE, R67_START_ADDRESS_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_START_PULSE_IC_1_ADDR, REG_START_PULSE_IC_1_BYTE, R68_START_PULSE_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_START_CORE_IC_1_ADDR, REG_START_CORE_IC_1_BYTE, R69_START_CORE_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_START_CORE_IC_1_ADDR, REG_START_CORE_IC_1_BYTE, R70_START_CORE_IC_1_Default );

//    SIGMA_WRITE_DELAY( DEVICE_ADDR_IC_1, R71_START_DELAY_IC_1_SIZE, R71_START_DELAY_IC_1_Default );
    TP_PRINTF("DSPDrv1451_InitSection8 finish\n\r");
}

static void DSPDrv1451_InitSection9(void *p)
{
    TP_PRINTF("DSPDrv1451_InitSection9\n\r");

    cDSPDrv1451* me = (cDSPDrv1451*)p;
    SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_HIBERNATE_IC_1_ADDR, REG_HIBERNATE_IC_1_BYTE, R72_HIBERNATE_IC_1_Default );
    TP_PRINTF("DSPDrv1451_InitSection9 finish\n\r");
}


static void DSPDrv1451_InitSection10(void *p)
{
    /* After giving power, we should wait at least 500ms then enable capacity.
     * Enable capacity here should be slow enough.
     */
    BOOST_CAP_ENABLE(gpioDsp);
}


static void DSPDrv1451_Xtor_Cust(cDSPDrv1451* me)
{
    BOOST_CAP_DISABLE(gpioDsp);
}


#endif /*_ADAU1451_CONFIG_*/


#include "dsp.pb.h"  //for Proto_Dsp_RequestPositionSoundMode

#define SETTING_RESEND_LIMIT    3
#define PAGE_SIZE               2048        // # of 32-bit Instructions per Page
#define SETTING_SAVE_MS         5000
#define IDLE_TIMEOUT_MS         3000
#define TIMER_PERIOD_MS         1000

typedef struct tSettingEntry
{
    uint8           reserve;
    uint8           volLevel;
    eAudioChannel   channel;
    bool            isAuxInPlugIn;
    bool            isSpdifInPlugIn;
    bool            isAuxinActive;          /***< SETID_AUXIN_MUSIC_DET */
    uint32          isShopMode;
    uint8           audioSource;
    bool            asetkConnected;
    uint8           swVer[SW_VERSION_LENGTH];
    uint8           hwVer[HW_VERSION_LENGTH];
    uint8           dspVer[DSP_VERSION_LENGTH];
    uint8           pcbSN[PCB_SN_LENGTH];
    int16           wfTemp;
    int16           ampTemp;
    int16           dspTemp;
    eTempLevel      tempLevel;
    bool            isDspTuning;

    uint32          queueMinDebugSrv;
    uint32          queueMinSettingSrv;
    uint32          queueMinAudioSrv;
    uint32          queueMinLedsSrv;
    uint32          queueMinBluetoothSrv;
    uint32          queueMinKeysSrv;
    uint32          queueMinPowerSrv;
    uint32          queueMinAseNgSrv;

    uint32          poolMinSmall;
    uint32          poolMinMedium;
    uint32          poolMinLarge;
    bool            isAuxPlaying;
    uint32          hwVerIndex;
    uint32          lineInSensitivity;
    uint32          stackMaxUsage;
    uint32          ampErrorReason;
    bool            ampHealth;
    Proto_Dsp_RequestAudioInput_AudioInput aseAudioInput;
    bool            ampMuteStatus;
    eSpeakerPosition speakerPosition;
    eSpeakerRole    speakerRole;
    bool            isLocalKeyPressed;
    float           audioAuxInDb;

    bool   toneTouchEnabled;
    double toneTouchGx1;
    double toneTouchGx2;
    double toneTouchGy1;
    double toneTouchGy2;
    double toneTouchGz;
    double toneTouchK5;
    double toneTouchK6;
} tSettingEntry;

static tSettingEntry setting;

static tSettingDatabase settingDB[SETID_MAX] =
{
    { &setting.volLevel,        sizeof(setting.volLevel),        SETTING_ATTR_VALID}, //SETID_VOLUME
    { &setting.channel,         sizeof(setting.channel),         SETTING_ATTR_VALID}, //SETID_CHANNEL, not used
    { &setting.isAuxInPlugIn,   sizeof(setting.isAuxInPlugIn),   SETTING_ATTR_VALID}, //SETID_AUXIN_JACK_DET
    { &setting.isSpdifInPlugIn, sizeof(setting.isSpdifInPlugIn), SETTING_ATTR_VALID}, //SETID_IS_SPDIF_IN_PLUG_IN, not used
    { &setting.isAuxinActive,   sizeof(setting.isAuxinActive),   SETTING_ATTR_VALID}, //SETID_AUXIN_MUSIC_DET, not used
    { &setting.isShopMode,      sizeof(setting.isShopMode),      SETTING_ATTR_VALID}, //SETID_SHOP_MODE
    { &setting.audioSource,     sizeof(setting.audioSource),     SETTING_ATTR_VALID}, //SETID_AUDIO_SOURCE
    { &setting.asetkConnected,  sizeof(setting.asetkConnected),  SETTING_ATTR_VALID}, //SETID_ASETK_CONNECTED
    { &setting.swVer,           sizeof(setting.swVer),           SETTING_ATTR_VALID}, //SETID_SW_VER
    { &setting.hwVer,           sizeof(setting.hwVer),           SETTING_ATTR_VALID}, //SETID_HW_VER
    { &setting.dspVer,          sizeof(setting.dspVer),          SETTING_ATTR_VALID}, //SETID_DSP_VER
    { &setting.pcbSN,           sizeof(setting.pcbSN),           SETTING_ATTR_VALID}, //SETID_PCB_SN
    { &setting.wfTemp,          sizeof(setting.wfTemp),          SETTING_ATTR_VALID}, //SETID_WF_TEMP
    { &setting.ampTemp,         sizeof(setting.ampTemp),         SETTING_ATTR_VALID}, //SETID_AMP_TEMP
    { &setting.dspTemp,         sizeof(setting.dspTemp),         SETTING_ATTR_VALID}, //SETID_DSP_TEMP
    { &setting.tempLevel,       sizeof(setting.tempLevel),       SETTING_ATTR_VALID}, //SETID_AMP_TEMP_LEVEL
    { &setting.isDspTuning,     sizeof(setting.isDspTuning),     SETTING_ATTR_VALID}, //SETID_IS_DSP_TUNING

    { &setting.queueMinDebugSrv,    sizeof(setting.queueMinDebugSrv),    SETTING_ATTR_VALID}, //SETID_QUEUE_MIN_DEBUG_SRV
    { &setting.queueMinSettingSrv,  sizeof(setting.queueMinSettingSrv),  SETTING_ATTR_VALID}, //SETID_QUEUE_MIN_SETTING_SRV
    { &setting.queueMinAudioSrv,    sizeof(setting.queueMinAudioSrv),    SETTING_ATTR_VALID}, //SETID_QUEUE_MIN_AUDIO_SRV
    { &setting.queueMinLedsSrv,     sizeof(setting.queueMinLedsSrv),     SETTING_ATTR_VALID}, //SETID_QUEUE_MIN_LEDS_SRV
    { &setting.queueMinBluetoothSrv,sizeof(setting.queueMinBluetoothSrv),SETTING_ATTR_VALID}, //SETID_QUEUE_MIN_BLUETOOTH_SRV
    { &setting.queueMinKeysSrv,     sizeof(setting.queueMinKeysSrv),     SETTING_ATTR_VALID}, //SETID_QUEUE_MIN_KEYS_SRV
    { &setting.queueMinPowerSrv,    sizeof(setting.queueMinPowerSrv),    SETTING_ATTR_VALID}, //SETID_QUEUE_MIN_POWER_SRV
    { &setting.queueMinAseNgSrv,    sizeof(setting.queueMinAseNgSrv),    SETTING_ATTR_VALID}, //SETID_QUEUE_MIN_ASE_TK_SRV
    { &setting.poolMinSmall,      sizeof(setting.poolMinSmall),      SETTING_ATTR_VALID},  //SETID_POOL_MIN_SMALL
    { &setting.poolMinMedium,     sizeof(setting.poolMinMedium),     SETTING_ATTR_VALID},  //SETID_POOL_MIN_MEDIUM
    { &setting.poolMinLarge,      sizeof(setting.poolMinLarge),      SETTING_ATTR_VALID},  //SETID_POOL_MIN_LARGE
    { &setting.isAuxPlaying,      sizeof(setting.isAuxPlaying),      SETTING_ATTR_VALID},  //SETID_AUXIN_PLAYING
    { &setting.hwVerIndex,        sizeof(setting.hwVerIndex),        SETTING_ATTR_VALID},  //SETID_HW_VER_INDEX
    { &setting.lineInSensitivity, sizeof(setting.lineInSensitivity), SETTING_ATTR_VALID},  //SETID_SENSITIVITY_LINEIN
    { &setting.reserve,           sizeof(setting.reserve),           SETTING_ATTR_VALID},  //SETID_RESERVE_B1
    { &setting.stackMaxUsage,     sizeof(setting.stackMaxUsage),     SETTING_ATTR_VALID},  //SETID_MAX_STACK_USAGE
    { &setting.ampErrorReason,    sizeof(setting.ampErrorReason),    SETTING_ATTR_VALID},  //SETID_AMP_ERROR_REASON
    { &setting.ampHealth,         sizeof(setting.ampHealth),         SETTING_ATTR_VALID},  //SETID_AMP_HEALTH
    { &setting.aseAudioInput,     sizeof(setting.aseAudioInput),     SETTING_ATTR_VALID},  //SETID_ASE_AUDIO_INPUT
    { &setting.ampMuteStatus,     sizeof(setting.ampMuteStatus),     SETTING_ATTR_VALID},  //SETID_AMP_MUTE_STATUS
    { &setting.speakerPosition,   sizeof(setting.speakerPosition),   SETTING_ATTR_VALID},  //SETID_SPEAKER_POSITION
    { &setting.speakerRole,       sizeof(setting.speakerRole),       SETTING_ATTR_VALID},  //SETID_SPEAKER_ROLE
    { &setting.audioAuxInDb,      sizeof(setting.audioAuxInDb),      SETTING_ATTR_VALID},  //SETID_AUDIO_AUXIN_IN_DB
    
    { &setting.toneTouchEnabled,  sizeof(setting.toneTouchEnabled),  SETTING_ATTR_VALID},  //SETID_TONE_TOUCH_ENABLED
    { &setting.toneTouchGx1,      sizeof(setting.toneTouchGx1),      SETTING_ATTR_VALID},  //SETID_TONE_TOUCH_GX1
    { &setting.toneTouchGx2,      sizeof(setting.toneTouchGx2),      SETTING_ATTR_VALID},  //SETID_TONE_TOUCH_GX2
    { &setting.toneTouchGy1,      sizeof(setting.toneTouchGy1),      SETTING_ATTR_VALID},  //SETID_TONE_TOUCH_GY1
    { &setting.toneTouchGy2,      sizeof(setting.toneTouchGy2),      SETTING_ATTR_VALID},  //SETID_TONE_TOUCH_GY2
    { &setting.toneTouchGz,       sizeof(setting.toneTouchGz),       SETTING_ATTR_VALID},  //SETID_TONE_TOUCH_GZ
    { &setting.toneTouchK5,       sizeof(setting.toneTouchK5),       SETTING_ATTR_VALID},  //SETID_TONE_TOUCH_K5
    { &setting.toneTouchK6,       sizeof(setting.toneTouchK6),       SETTING_ATTR_VALID},  //SETID_TONE_TOUCH_K6
};


#define SETT_PAGE_ROM_ADDR      0x0803E800 //= __USEREDIT_region_ROM2_start__
#define SETT_ELEMENT_MIN_SIZE   sizeof(uint32)
#define SETT_ELEMENT_MAX_SIZE   0x0100

static const tSettingRomMap settingRomMap[] =
{
    { SETID_QUEUE_MIN_DEBUG_SRV,     SETT_PAGE_ROM_ADDR },
    { SETID_QUEUE_MIN_SETTING_SRV,   SETT_PAGE_ROM_ADDR + SETT_ELEMENT_MIN_SIZE * 1},
    { SETID_QUEUE_MIN_AUDIO_SRV,     SETT_PAGE_ROM_ADDR + SETT_ELEMENT_MIN_SIZE * 2},
    { SETID_QUEUE_MIN_LEDS_SRV,      SETT_PAGE_ROM_ADDR + SETT_ELEMENT_MIN_SIZE * 3},
    { SETID_QUEUE_MIN_BLUETOOTH_SRV, SETT_PAGE_ROM_ADDR + SETT_ELEMENT_MIN_SIZE * 4},
    { SETID_QUEUE_MIN_KEYS_SRV,      SETT_PAGE_ROM_ADDR + SETT_ELEMENT_MIN_SIZE * 5},
    { SETID_QUEUE_MIN_POWER_SRV,     SETT_PAGE_ROM_ADDR + SETT_ELEMENT_MIN_SIZE * 6},
    { SETID_QUEUE_MIN_ASE_TK_SRV,    SETT_PAGE_ROM_ADDR + SETT_ELEMENT_MIN_SIZE * 7},
    { SETID_POOL_MIN_SMALL,          SETT_PAGE_ROM_ADDR + SETT_ELEMENT_MIN_SIZE * 8},
    { SETID_POOL_MIN_MEDIUM,         SETT_PAGE_ROM_ADDR + SETT_ELEMENT_MIN_SIZE * 9},
    { SETID_POOL_MIN_LARGE,          SETT_PAGE_ROM_ADDR + SETT_ELEMENT_MIN_SIZE * 10},
    { SETID_SHOP_MODE,               SETT_PAGE_ROM_ADDR + SETT_ELEMENT_MIN_SIZE * 11}
};


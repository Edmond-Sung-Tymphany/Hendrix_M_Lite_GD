/*****************************************************************************
* Model: tym_platform.qm
* File:  F:\Project_Atmos\tymphany_platform\sw/driver\include\HdmiDrv.h
*
* This code has been generated by QM tool (see state-machine.com/qm).
* DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
*
* This program is open source software: you can redistribute it and/or
* modify it under the terms of the GNU General Public License as published
* by the Free Software Foundation.
*
* This program is distributed in the hope that it will be useful, but
* WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
* or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
* for more details.
*****************************************************************************/
/*${F:\Project_Atmos~::driver\include\HdmiDrv.h} ...........................*/
/**
 *  @file      hdmi_driver.h
 *  @brief     This file contains the EP91A6S HDMI driver implementation.
 *  @author    Albert
 *  @date      23-May-2016
 */
#ifndef HDMIDRV_H
#define HDMIDRV_H

#ifdef STM32F0XX
#include "stm32f0xx.h"
#endif

#ifdef STM32F4XX
#include "stm32f4xx.h"
#endif

#include "GPIODrv.h"
#include "SWi2c_Drv.h"
#include "HdmiSrv.h"

#define HDMI_PORT_NONE  0xf     //Not HDMI_PORT/ARC
#define HDMI_PORT_1     1
#define HDMI_PORT_ARC   6

#ifdef __cplusplus
extern "C" {
#endif

typedef struct
{
    void (*initSectionFunc)(void* me);         // function point to a specific initialization section
    uint16 delaytime;   // time duration to next intialization section in ms
}tHdmiInitSection;


/*${AOs::HdmiDrv} ..........................................................*/
typedef struct {
/* private: */
    tHdmiInitSection const *pInitTable;
    uint8 sectionSize;
    uint8 initPhase;

    bool drvIsReady;
    bool txPlugin;
    bool rxPlugin;

    bool cec_mute;                // CEC mute
    uint8_t cec_volume;           // CEC volume sent by hdmi chip
    uint8_t volume;               // actually volume of DUT
    bool cec_power;               //CEC power

    uint8_t source;             //current input port
    cGpioDrv gpioDrv;             //for HDMI_AMUTE and HMCU_INTB pin

/* public: */
    cSWi2cDrv_t i2cDrv;           //I2C driver
} HdmiDrv;

/* public: */

/**
 * Construct the driver instance.
 * @param me - instance of the driver
 * @param - None
 */
void HdmiDrv_Ctor(HdmiDrv * const me);

/**
 * Deconstruct the driver instance.
 * @param me - instance of the driver
 * @param - None
 */
void HdmiDrv_Xtor(HdmiDrv * const me);

uint16 HdmiDrv_Init(HdmiDrv * const me);

/**
 * Enable/Disable system power.
 * @param me - instance of the driver
 * @param enable- enable or disable power
 */
void HdmiDrv_SetPower(HdmiDrv * const me, uint8_t setting);

/**
 * Return power status.
 * @param me - instance of the driver
 * @param - NONE
 */
uint8_t HdmiDrv_GetPower(HdmiDrv * const me);
/**
 * Enable/Disable HDMI CEC/unmute.
 * @param me - instance of the driver
 * @param setting- 1:enable mute or 0:disable mute
 */
void HdmiDrv_SetCECDisable(HdmiDrv * const me, uint8_t setting);
/**
 * Return CEC status.
 * @param me - instance of the driver
 * @param - NONE
 */
uint8_t HdmiDrv_GetCECDisable(HdmiDrv * const me);

/**
 * Set HDMI ARC.
 * @param me - instance of the driver
 * @param enable- enable or disable ARC
 */
void HdmiDrv_SetARCEnable(HdmiDrv * const me, uint8_t setting);

/**
 * Return ARC status.
 * @param me - instance of the driver
 * @param - NONE
 */
uint8_t HdmiDrv_GetARCEnable(HdmiDrv * const me);

/**
 * Set HDMI mute/unmute.
 * @param me - instance of the driver
 * @param setting- 1:enable mute or 0:disable mute
 */
void HdmiDrv_SetMute(HdmiDrv * const me, uint8_t setting);
uint8_t HdmiDrv_GetMute(HdmiDrv * const me);

/**
 * Set HDMI volume.
 * @param me - instance of the driver
 * @param level- volume level
 */
void HdmiDrv_SetVolume(HdmiDrv * const me, uint8_t level);

/**
 * Return current HDMI volume.
 * @param me - instance of the driver
 * @param - NONE
 */
uint8_t HdmiDrv_GetVolume(HdmiDrv * const me);

/**
 * Set HDMI source.
 * @param me - instance of the driver
 * @param port - 1:HDMI_Port1, 6:HDMI_ARC
 */
void HdmiDrv_SetSource(HdmiDrv * const me, uint8_t port);

/**
 * Return current HDMI source.
 * @param me - instance of the driver
 * @param - NONE
 */
uint8_t HdmiDrv_GetSource(HdmiDrv * const me);

/**
 * Return Video Latency.
 * @param me - instance of the driver
 * @param - NONE
 */
uint16_t HdmiDrv_GetVideoLatency(HdmiDrv * const me);

/**
 * Return Interlaced Video Latency.
 * @param me - instance of the driver
 * @param - NONE
 */
uint16_t HdmiDrv_GetInterlacedVideoLatency(HdmiDrv * const me);
uint8_t HdmiDrv_isPortAvailable(HdmiDrv * const me, uint32_t port);
uint16_t HdmiDrv_GetVenderID(HdmiDrv * const me);
uint16_t HdmiDrv_GetDeviceID(HdmiDrv * const me);
void HdmiDrv_GetVersion(HdmiDrv * const me, uint8_t* major_ver, uint8_t* minor_ver1, uint8_t* minor_ver2);

void HdmiDrv_UpdateStatus(void);
void HdmiDrv_SetPort(HdmiDrv * const me, uint8_t port);
void HdmiDrv_SetCECPower(HdmiDrv * const me, uint8_t setting);
void HdmiDrv_Dump(void);
bool HdmiDrv_isDeviceReady(void);
void HdmiDrv_Standby(HdmiDrv * const me);
void HdmiDrv_SetInterruptFlag(bool enable);
bool HdmiDrv_GetInterruptFlag(void);

void HdmiDrv_RequestHandler(HdmiReqEvt *reqEvt);
void HdmiDrv_GetHandler(HdmiGetCmd *pGetCmd);


#ifdef __cplusplus
}
#endif

#endif /* HDMIDRV_H */


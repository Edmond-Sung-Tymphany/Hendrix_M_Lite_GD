#include "product.config"

#define SETTING_RESEND_LIMIT    3
#define PAGE_SIZE               2048        // # of 32-bit Instructions per Page
#define SETTING_SAVE_MS         5000
#define IDLE_TIMEOUT_MS         3000
#define TIMER_PERIOD_MS         1000

typedef struct tSettingEntry
{
    //Common part, Audio
    uint8         volLevel;
    uint8         channel;
    uint8         audioSource;
    bool          isMusicPlaying;
    uint16        tempLevelAudio;
    bool          ampHealth;
    uint32        ampErrorReason;
    uint32        bootReq; //type: eBootReq

    //Common part, other
    uint8         swVer    [SW_VERSION_LENGTH];
    uint8         hwVer    [HW_VERSION_LENGTH];
    uint8         dspVer   [DSP_VERSION_LENGTH];
    bool          asetkConnected; //for production test
    bool          connected572;  //for production test
    bool          connected360;  //for production test
    bool          systemSleep;
    bool          isDCPlugIn;  //type: eDcInSta
    uint32        errorReason;
    uint32        stackMaxUsage;

    //Common part, system tuning
    uint32        queueMinDebugSrv;
    uint32        queueMinSettingSrv;
    uint32        queueMinAudioSrv;
    uint32        queueMinLedsSrv;
    uint32        queueMinBluetoothSrv;
    uint32        queueMinKeysSrv;
    uint32        queueMinPowerSrv;
    uint32        queueMinAseTkSrv;
    uint32        poolMinSmall;
    uint32        poolMinMedium;
    uint32        poolMinLarge;

    //FS1 Temperature
    uint16        tempWfAmp;
    uint16        tempWfSpk;
    uint16        tempTwSpk;
    float         audioSignalVolIn;
    float         audioSignalVolOut;
    
    //FS1 Audio
    double        dspCalGain1Wf; //Woofer
    double        dspCalGain2Tw; //Tweeter
    uint32        dspOverheatGainWf;
    uint32        dspOverheatGainTw;
    uint32        dspOverheatCoilTempWf;
    uint32        dspOverheatCoilTempTw;

    //FS1 Power
    uint8         chargeStatus;
    uint16        _5vSen;
    uint16        pvddSen;

    //FS1 Battery, Charger
    uint8         batterySN[BATTERY_SN_LENGTH];
    uint16        batteryHW;
    uint16        batterySW;
    uint16        batteryTemp;
    uint16        batteryTempLevel;    
    uint16        batteryCapacityRsoc;
    uint16        batteryCapacityAsoc;
    uint8         batteryCapacityLevel;
    uint16        batteryHealthSoh;
    uint8         batteryHealthLevel;
    uint16        batteryCycle;
    uint16        batteryChVoltage;
    uint16        batteryChCurrent;
    uint16        batterySafetyStatus;
    uint16        batteryTempCell1;
    uint16        batteryTempCell2;
    bool          batteryExist;
    uint16        batteryCurrent;
    uint16        batteryAvgCurrent;
    uint16        batteryCapacityRsocUser;
    bool          sleepCharging;
    //Reserve
    uint8         reserve;
} tSettingEntry;

static tSettingEntry setting;


static tSettingDatabase settingDB[SETID_MAX] =
{
    // Common part, Audio
    { &setting.volLevel,             sizeof(setting.volLevel),               SETTING_ATTR_VALID}, // 0 SETID_VOLUME
    { &setting.channel,              sizeof(setting.channel),                SETTING_ATTR_VALID}, // 1 SETID_CHANNEL
    { &setting.audioSource,          sizeof(setting.audioSource),            SETTING_ATTR_VALID}, // 2 SETID_AUDIO_SOURCE
    { &setting.isMusicPlaying,       sizeof(setting.isMusicPlaying),         SETTING_ATTR_VALID}, // 3 SETID_MUSIC_DET
    { &setting.tempLevelAudio,       sizeof(setting.tempLevelAudio),         SETTING_ATTR_VALID}, // 4 SETID_TEMP_LEVEL_AUDIO
    { &setting.ampHealth,            sizeof(setting.ampHealth),              SETTING_ATTR_VALID}, // 5 SETID_AMP_HEALTH
    { &setting.reserve,              sizeof(setting.reserve),                SETTING_ATTR_VALID}, // 6 SETID_RESERVE_A1
    { &setting.bootReq,              sizeof(setting.bootReq),                SETTING_ATTR_VALID}, // 7 SETID_BOOT_REQUEST
    { &setting.ampErrorReason,       sizeof(setting.ampErrorReason),         SETTING_ATTR_VALID}, // 8 SETID_AMP_ERROR_REASON
    { &setting.stackMaxUsage,        sizeof(setting.stackMaxUsage),          SETTING_ATTR_VALID}, // 9 SETID_MAX_STACK_USAGE
				

    // Common part, other
    { &setting.swVer,                sizeof(setting.swVer),                  SETTING_ATTR_VALID}, // 10 SETID_SW_VER
    { &setting.hwVer,                sizeof(setting.hwVer),                  SETTING_ATTR_VALID}, // 11 SETID_HW_VER
    { &setting.dspVer,               sizeof(setting.dspVer),                 SETTING_ATTR_VALID}, // 12 SETID_DSP_VER
    { &setting.asetkConnected,       sizeof(setting.asetkConnected),         SETTING_ATTR_VALID}, // 13 SETID_ASETK_CONNECTED
    { &setting.connected572,         sizeof(setting.connected572),           SETTING_ATTR_VALID}, // 14 SETID_IQS572_CONNECTED
    { &setting.connected360,         sizeof(setting.connected360),           SETTING_ATTR_VALID}, // 15 SETID_IQS360A_CONNECTED
    { &setting.systemSleep,          sizeof(setting.systemSleep),            SETTING_ATTR_VALID}, // 16 SETID_SYSTEM_SLEEP
    { &setting.isDCPlugIn,           sizeof(setting.isDCPlugIn),             SETTING_ATTR_VALID}, // 17 SETID_IS_DC_PLUG_IN
    { &setting.errorReason,          sizeof(setting.errorReason),            SETTING_ATTR_VALID}, // 18 SETID_ERROR_REASON
    { &setting.reserve,              sizeof(setting.reserve),                SETTING_ATTR_VALID}, // 19 SETID_RESERVE_B2

    
    // Common part, system tuning    
    { &setting.queueMinDebugSrv,     sizeof(setting.queueMinDebugSrv),       SETTING_ATTR_VALID}, // 20 SETID_QUEUE_MIN_DEBUG_SRV
    { &setting.queueMinSettingSrv,   sizeof(setting.queueMinSettingSrv),     SETTING_ATTR_VALID}, // 21 SETID_QUEUE_MIN_SETTING_SRV
    { &setting.queueMinAudioSrv,     sizeof(setting.queueMinAudioSrv),       SETTING_ATTR_VALID}, // 22 SETID_QUEUE_MIN_AUDIO_SRV
    { &setting.queueMinLedsSrv,      sizeof(setting.queueMinLedsSrv),        SETTING_ATTR_VALID}, // 23 SETID_QUEUE_MIN_LEDS_SRV
    { &setting.queueMinBluetoothSrv, sizeof(setting.queueMinBluetoothSrv),   SETTING_ATTR_VALID}, // 24 SETID_QUEUE_MIN_BLUETOOTH_SRV
    { &setting.queueMinKeysSrv,      sizeof(setting.queueMinKeysSrv),        SETTING_ATTR_VALID}, // 25 SETID_QUEUE_MIN_KEYS_SRV
    { &setting.queueMinPowerSrv,     sizeof(setting.queueMinPowerSrv),       SETTING_ATTR_VALID}, // 26 SETID_QUEUE_MIN_POWER_SRV
    { &setting.queueMinAseTkSrv,     sizeof(setting.queueMinAseTkSrv),       SETTING_ATTR_VALID}, // 27 SETID_QUEUE_MIN_ASE_TK_SRV
    { &setting.poolMinSmall,         sizeof(setting.poolMinSmall),           SETTING_ATTR_VALID}, // 28 SETID_POOL_MIN_SMALL
    { &setting.poolMinMedium,        sizeof(setting.poolMinMedium),          SETTING_ATTR_VALID}, // 29 SETID_POOL_MIN_MEDIUM
    { &setting.poolMinLarge,         sizeof(setting.poolMinLarge),           SETTING_ATTR_VALID}, // 30 SETID_POOL_MIN_LARGE
    { &setting.reserve,              sizeof(setting.reserve),                SETTING_ATTR_VALID}, // 31 SETID_RESERVE_C1
    { &setting.reserve,              sizeof(setting.reserve),                SETTING_ATTR_VALID}, // 32 SETID_RESERVE_C2
    { &setting.reserve,              sizeof(setting.reserve),                SETTING_ATTR_VALID}, // 33 SETID_RESERVE_C3
    { &setting.reserve,              sizeof(setting.reserve),                SETTING_ATTR_VALID}, // 34 SETID_RESERVE_C4
    { &setting.reserve,              sizeof(setting.reserve),                SETTING_ATTR_VALID}, // 35 SETID_RESERVE_C5
    { &setting.reserve,              sizeof(setting.reserve),                SETTING_ATTR_VALID}, // 36 SETID_RESERVE_C6
    { &setting.reserve,              sizeof(setting.reserve),                SETTING_ATTR_VALID}, // 37 SETID_RESERVE_C7
    { &setting.reserve,              sizeof(setting.reserve),                SETTING_ATTR_VALID}, // 38 SETID_RESERVE_C8
    { &setting.reserve,              sizeof(setting.reserve),                SETTING_ATTR_VALID}, // 39 SETID_RESERVE_C9

    //FS1 Temperature
    { &setting.tempWfAmp,            sizeof(setting.tempWfAmp),              SETTING_ATTR_VALID}, // 40 SETID_TEMP_AMP
    { &setting.tempWfSpk,            sizeof(setting.tempWfSpk),              SETTING_ATTR_VALID}, // 41 SETID_TEMP_WF_SPK
    { &setting.tempTwSpk,            sizeof(setting.tempTwSpk),              SETTING_ATTR_VALID}, // 42 SETID_TEMP_TW_SPK
    { &setting.audioSignalVolIn,     sizeof(setting.audioSignalVolIn),       SETTING_ATTR_VALID}, // 43 SETID_AUDIO_SIGNAL_VOL_INPUT
    { &setting.audioSignalVolOut,    sizeof(setting.audioSignalVolOut),      SETTING_ATTR_VALID}, // 44 SETID_AUDIO_SIGNAL_VOL_OUTPUT
    { &setting.reserve,              sizeof(setting.reserve),                SETTING_ATTR_VALID}, // 45 SETID_RESERVE_D3
    { &setting.reserve,              sizeof(setting.reserve),                SETTING_ATTR_VALID}, // 46 SETID_RESERVE_D4
    { &setting.reserve,              sizeof(setting.reserve),                SETTING_ATTR_VALID}, // 47 SETID_RESERVE_D5
    { &setting.reserve,              sizeof(setting.reserve),                SETTING_ATTR_VALID}, // 48 SETID_RESERVE_D6
    { &setting.reserve,              sizeof(setting.reserve),                SETTING_ATTR_VALID}, // 49 SETID_RESERVE_D7
    
        
    //FS1 Audio
    { &setting.dspCalGain1Wf,        sizeof(setting.dspCalGain1Wf),          SETTING_ATTR_VALID}, // 50 SETID_DSP_CAL_GAIN1_WF, woofer
    { &setting.dspCalGain2Tw,        sizeof(setting.dspCalGain2Tw),          SETTING_ATTR_VALID}, // 51 SETID_DSP_CAL_GAIN2_TW, tweeter
    { &setting.dspOverheatGainWf,    sizeof(setting.dspOverheatGainWf),      SETTING_ATTR_VALID}, // 52 SETID_DSP_OVERHEAT_GAIN_WF
    { &setting.dspOverheatGainTw,    sizeof(setting.dspOverheatGainTw),      SETTING_ATTR_VALID}, // 53 SETID_DSP_OVERHEAT_GAIN_TW
    { &setting.dspOverheatCoilTempWf,sizeof(setting.dspOverheatCoilTempWf),  SETTING_ATTR_VALID}, // 54 SETID_DSP_OVERHEAT_COIL_TEMP_WF
    { &setting.dspOverheatCoilTempTw,sizeof(setting.dspOverheatCoilTempTw),  SETTING_ATTR_VALID}, // 55 SETID_DSP_OVERHEAT_COIL_TEMP_TW
    { &setting.reserve,              sizeof(setting.reserve),                SETTING_ATTR_VALID}, // 56 SETID_RESERVE_E5
    { &setting.reserve,              sizeof(setting.reserve),                SETTING_ATTR_VALID}, // 57 SETID_RESERVE_E6
    { &setting.reserve,              sizeof(setting.reserve),                SETTING_ATTR_VALID}, // 58 SETID_RESERVE_E7
    { &setting.reserve,              sizeof(setting.reserve),                SETTING_ATTR_VALID}, // 59 SETID_RESERVE_E8

    
    //FS1 Power
    { &setting.chargeStatus,         sizeof(setting.chargeStatus),           SETTING_ATTR_VALID}, // 61 SETID_CHARGER_STATUS
    { &setting._5vSen,               sizeof(setting._5vSen),                 SETTING_ATTR_VALID}, // 61 SETID_5V_SEN
    { &setting.pvddSen,              sizeof(setting.pvddSen),                SETTING_ATTR_VALID}, // 62 SETID_PVDD_SEN
    { &setting.reserve,              sizeof(setting.reserve),                SETTING_ATTR_VALID}, // 63 SETID_RESERVE_F1
    { &setting.reserve,              sizeof(setting.reserve),                SETTING_ATTR_VALID}, // 64 SETID_RESERVE_F2
    { &setting.reserve,              sizeof(setting.reserve),                SETTING_ATTR_VALID}, // 65 SETID_RESERVE_F3
    { &setting.reserve,              sizeof(setting.reserve),                SETTING_ATTR_VALID}, // 66 SETID_RESERVE_F4
    { &setting.reserve,              sizeof(setting.reserve),                SETTING_ATTR_VALID}, // 67 SETID_RESERVE_F5
    { &setting.reserve,              sizeof(setting.reserve),                SETTING_ATTR_VALID}, // 68 SETID_RESERVE_F6
    { &setting.reserve,              sizeof(setting.reserve),                SETTING_ATTR_VALID}, // 69 SETID_RESERVE_F7

    
    //FS1 Battery, Charger
    { &setting.batterySN,              sizeof(setting.batterySN),              SETTING_ATTR_VALID}, // 70 SETID_BATTERY_SN
    { &setting.batteryHW,              sizeof(setting.batteryHW),              SETTING_ATTR_VALID}, // 71 SETID_BATTERY_HW
    { &setting.batterySW,              sizeof(setting.batterySW),              SETTING_ATTR_VALID}, // 72 SETID_BATTERY_SW
    { &setting.batteryTemp,            sizeof(setting.batteryTemp),            SETTING_ATTR_VALID}, // 73 SETID_BATTERY_TEMP
    { &setting.batteryTempLevel,       sizeof(setting.batteryTempLevel),       SETTING_ATTR_VALID}, // 74 SETID_BATTERY_TEMP_LEVEL
    { &setting.batteryCapacityRsoc,    sizeof(setting.batteryCapacityRsoc),    SETTING_ATTR_VALID}, // 75 SETID_BATTERY_CAPACITY_RSOC
    { &setting.batteryCapacityAsoc,    sizeof(setting.batteryCapacityAsoc),    SETTING_ATTR_VALID}, // 76 SETID_BATTERY_CAPACITY_RaSOC
    { &setting.batteryCapacityLevel,   sizeof(setting.batteryCapacityLevel),   SETTING_ATTR_VALID}, // 77 SETID_BATTERY_CAPACITY_LEVEL
    { &setting.batteryHealthSoh,       sizeof(setting.batteryHealthSoh),       SETTING_ATTR_VALID}, // 78 SETID_BATTERY_HEALTH_SOH
    { &setting.batteryHealthLevel,     sizeof(setting.batteryHealthLevel),     SETTING_ATTR_VALID}, // 79 SETID_BATTERY_HEALTH_LEVEL
    { &setting.batteryCycle,           sizeof(setting.batteryCycle),           SETTING_ATTR_VALID}, // 80 SETID_BATTERY_CYCLE
    { &setting.batteryChVoltage,       sizeof(setting.batteryChVoltage),       SETTING_ATTR_VALID}, // 81 SETID_BATTERY_CHARGING_VOLTAGE
    { &setting.batteryChCurrent,       sizeof(setting.batteryChCurrent),       SETTING_ATTR_VALID}, // 82 SETID_BATTERY_CHARGING_CURRENT
    { &setting.batterySafetyStatus,    sizeof(setting.batterySafetyStatus),    SETTING_ATTR_VALID}, // 83 SETID_BATTERY_SAFETY_STATUS
    { &setting.batteryTempCell1,       sizeof(setting.batteryTempCell1),       SETTING_ATTR_VALID}, // 84 SETID_BATTERY_TEMP_CALL1
    { &setting.batteryTempCell2,       sizeof(setting.batteryTempCell2),       SETTING_ATTR_VALID}, // 85 SETID_BATTERY_TEMP_CALL2
    { &setting.batteryExist,           sizeof(setting.batteryExist),           SETTING_ATTR_VALID}, // 86 SETID_BATTERY_EXIST
    { &setting.batteryCurrent,         sizeof(setting.batteryCurrent),         SETTING_ATTR_VALID}, // 87 SETID_BATTERY_CURRENT
    { &setting.batteryAvgCurrent,      sizeof(setting.batteryAvgCurrent),      SETTING_ATTR_VALID}, // 88 SETID_BATTERY_AVG_CURRENT
    { &setting.batteryCapacityRsocUser,sizeof(setting.batteryCapacityRsocUser),SETTING_ATTR_VALID}, // 89 SETID_BATTERY_CAPACITY_RSOC_USER
    { &setting.sleepCharging,          sizeof(setting.sleepCharging),          SETTING_ATTR_VALID}, // 90 SETID_SYSTEM_SLEEP_CHARGING
};


#define SETT_PAGE_ROM_ADDR      0x0803E800 //= __USEREDIT_region_ROM2_start__
#define SETT_ELEMENT_MIN_SIZE   sizeof(uint32)
#define SETT_ELEMENT_MAX_SIZE   0x0100

static const tSettingRomMap settingRomMap[] =
{
#ifdef MCU_STORE_DSP_GAIN
    { SETID_DSP_CAL_GAIN1_WF,        SETT_PAGE_ROM_ADDR },
    { SETID_DSP_CAL_GAIN2_TW,        SETT_PAGE_ROM_ADDR+sizeof(setting.dspCalGain1Wf) },
#else
    { SETID_BOOT_REQUEST,            SETT_PAGE_ROM_ADDR },
#endif    
    { SETID_QUEUE_MIN_DEBUG_SRV,     SETT_PAGE_ROM_ADDR+sizeof(setting.dspCalGain1Wf)+sizeof(setting.dspCalGain2Tw) },
    { SETID_QUEUE_MIN_SETTING_SRV,   SETT_PAGE_ROM_ADDR+sizeof(setting.dspCalGain1Wf)+sizeof(setting.dspCalGain2Tw) + SETT_ELEMENT_MIN_SIZE * 1},
    { SETID_QUEUE_MIN_AUDIO_SRV,     SETT_PAGE_ROM_ADDR+sizeof(setting.dspCalGain1Wf)+sizeof(setting.dspCalGain2Tw) + SETT_ELEMENT_MIN_SIZE * 2},
    { SETID_QUEUE_MIN_LEDS_SRV,      SETT_PAGE_ROM_ADDR+sizeof(setting.dspCalGain1Wf)+sizeof(setting.dspCalGain2Tw) + SETT_ELEMENT_MIN_SIZE * 3},
    { SETID_QUEUE_MIN_BLUETOOTH_SRV, SETT_PAGE_ROM_ADDR+sizeof(setting.dspCalGain1Wf)+sizeof(setting.dspCalGain2Tw) + SETT_ELEMENT_MIN_SIZE * 4},
    { SETID_QUEUE_MIN_KEYS_SRV,      SETT_PAGE_ROM_ADDR+sizeof(setting.dspCalGain1Wf)+sizeof(setting.dspCalGain2Tw) + SETT_ELEMENT_MIN_SIZE * 5},
    { SETID_QUEUE_MIN_POWER_SRV,     SETT_PAGE_ROM_ADDR+sizeof(setting.dspCalGain1Wf)+sizeof(setting.dspCalGain2Tw) + SETT_ELEMENT_MIN_SIZE * 6},
    { SETID_QUEUE_MIN_ASE_TK_SRV,    SETT_PAGE_ROM_ADDR+sizeof(setting.dspCalGain1Wf)+sizeof(setting.dspCalGain2Tw) + SETT_ELEMENT_MIN_SIZE * 7},
    { SETID_POOL_MIN_SMALL,          SETT_PAGE_ROM_ADDR+sizeof(setting.dspCalGain1Wf)+sizeof(setting.dspCalGain2Tw) + SETT_ELEMENT_MIN_SIZE * 8},
    { SETID_POOL_MIN_MEDIUM,         SETT_PAGE_ROM_ADDR+sizeof(setting.dspCalGain1Wf)+sizeof(setting.dspCalGain2Tw) + SETT_ELEMENT_MIN_SIZE * 9},
    { SETID_POOL_MIN_LARGE,          SETT_PAGE_ROM_ADDR+sizeof(setting.dspCalGain1Wf)+sizeof(setting.dspCalGain2Tw) + SETT_ELEMENT_MIN_SIZE * 10}
};



#include "product.config"

#define SETTING_RESEND_LIMIT    3
#define PAGE_SIZE               2048        // # of 32-bit Instructions per Page
#define SETTING_SAVE_MS         5000
#define IDLE_TIMEOUT_MS         3000
#define TIMER_PERIOD_MS         1000

typedef struct tSettingEntry
{
    //Common part, Audio
    uint8         volLevel;
    uint8         channel;
    uint8         audioSource;
    bool          isMusicPlaying;
    uint16        tempLevelAudio;
    bool          ampHealth;
    uint32        bootReq; //type: eBootReq
    uint32        ampErrorReason;
    uint32        stackMaxUsage;

    //Common part, other
    uint8         swFwVer  [SW_VERSION_LENGTH];
    uint8         hwVer    [HW_VERSION_LENGTH];
    uint8         dspVer   [DSP_VERSION_LENGTH];
    bool          asetkConnected; //for production test
    bool          connected572;  //for production test
    bool          connected360;  //for production test
    bool          systemSleep;
    bool          isDCPlugIn;  //type: eDcInSta
    uint32        errorReason;
    uint32        gainAllow;

    //Common part, system tuning
    uint32        queueMinDebugSrv;
    uint32        queueMinSettingSrv;
    uint32        queueMinAudioSrv;
    uint32        queueMinLedsSrv;
    uint32        queueMinBluetoothSrv;
    uint32        queueMinKeysSrv;
    uint32        queueMinPowerSrv;
    uint32        queueMinAseTkSrv;
    uint32        poolMinSmall;
    uint32        poolMinMedium;
    uint32        poolMinLarge;
    uint16        dspParamPos;
    uint16        dspParamBass;
    uint16        dspParamLoudness;
    uint16        dspParamTreble;
    uint16        tempLevelSystem;
    uint8         swPiuVer [SW_VERSION_LENGTH];
    uint8         swUblVer [SW_VERSION_LENGTH];

    //FS1 Temperature
    uint16        tempWfAmp;
    uint16        tempWfSpk;
    uint16        tempTwSpk;
    bool          dspHealth;
    float         audioSignalVolIn;
    float         audioSignalVolWfOut;
    float         audioSignalVolTwOut;
    
    //FS1 Audio
    double        dspCalGain1Wf; //Woofer
    double        dspCalGain2Tw; //Tweeter
    uint32        dspOverheatGainWf;
    uint32        dspOverheatGainTw;
    uint32        dspOverheatCoilTempWf;
    uint32        dspOverheatCoilTempTw;
    uint32        dspDboostLevel;

    //FS1 Power
    uint8         chargeStatus;
    uint16        _5vSen;
    uint16        pvddSen;

    //FS1 Battery, Charger
    uint8         batterySN[BATTERY_SN_LENGTH];
    uint16        batteryHW;
    uint16        batterySW;
     int16        batteryTemp;
    uint16        batteryTempLevel;    
    uint16        batteryCapacityRsoc;
    uint16        batteryCapacityAsoc;
    uint8         batteryCapacityLevel;
    uint16        batteryHealthSoh;
    uint8         batteryHealthLevel;
    uint16        batteryCycle;
    uint16        batteryChVoltage;
    uint16        batteryChCurrent;
    uint16        batterySafetyStatus_high;
    uint16        batterySafetyStatus_low;
     int16        batteryTempCell1;
     int16        batteryTempCell2;
    bool          batteryExist;
    uint16        batteryCurrent;
    uint16        batteryAvgCurrent;
    uint16        batteryCapacityRsocUser;
    uint16        batteryPackStatus;
    uint16        batteryTotalVol;
    uint16        batteryStatus;
    uint16        batteryRemainCap;
    uint16        batteryFullChCap;
    uint16        batteryDesignCap;
    uint32        batteryLowBattShutDown;
    uint16        batteryPfStatus_high;
    uint16        batteryPfStatus_low;
    uint16        batteryVoltCell1;
    uint16        batteryVoltCell2;
    
    //FS1 Charger
    bool          sleepCharging;

    //FS1 Battery Faulstlog
    uint32        batteryFaultsLogOvpCnt;
    uint32        batteryFaultsLogUvpCnt;
    uint32        batteryFaultsLogCotCnt;
    uint32        batteryFaultsLogCutCnt;
    uint32        batteryFaultsLogDotCnt;
    uint32        batteryFaultsLogDutCnt;
    uint32        batteryFaultsLogAfeeCnt;
    uint32        batteryFaultsLogDocCnt;
    uint32        batteryFaultsLogCocCnt;
    uint32        batteryFaultsLogChrgAuthFailCnt;
    uint32        batteryFaultsLogChrgOvpCnt;
    uint32        batteryFaultsLogChrgCotCnt;
    uint32        batteryFaultsLogAdcSatFailCnt;
    uint32        batteryFaultsLogAfecfCnt;
    uint32        batteryFaultsLogHwDocCnt;
    uint32        batteryFaultsLogHwCocCnt;
    uint32        batteryFaultsLogHwBcdCnt;
    uint32        batteryFaultsLogHwScpCnt;
    uint32        batteryFaultsLogPfCbfCnt;
    uint32        batteryFaultsLogPfOvpCnt;
    uint32        batteryFaultsLogPfCocCnt;
    uint32        batteryFaultsLogPffetfCnt;
    uint32        batteryFaultsLogPfUvp;
    uint32        batteryFaultsLogMaxCellVolt;
    uint32        batteryFaultsLogMinCellVolt;
    uint32        batteryFaultsLogMaxChrgTemp;
    uint32        batteryFaultsLogMinChrgTemp;
    uint32        batteryFaultsLogMaxDischrgTemp;
    uint32        batteryFaultsLogMinDischrgTemp;
    uint32        batteryFaultsLogMaxChrgCurr;
    uint32        batteryFaultsLogMaxDischrgCurr;
    uint32        batteryFaultsLogBatteryStatus;
    uint32        batteryFaultsLogAvgCurrent;
    uint32        batteryFaultsLogTemp1;
    uint32        batteryFaultsLogTemp2;
    uint32        batteryFaultsLogMosTemp1;
    uint32        batteryFaultsLogCellVolt1;
    uint32        batteryFaultsLogCellVolt2;
    
    //For Debug tool
    uint16        tempPrintPeriod;
    uint16        battPrintPeriod;

    //Reserve
    uint8         reserve;
} tSettingEntry;

static tSettingEntry setting;


static tSettingDatabase settingDB[SETID_MAX] =
{
    // Common part, Audio
    { &setting.volLevel,             sizeof(setting.volLevel),               SETTING_ATTR_VALID}, // 0 SETID_VOLUME
    { &setting.channel,              sizeof(setting.channel),                SETTING_ATTR_VALID}, // 1 SETID_CHANNEL
    { &setting.audioSource,          sizeof(setting.audioSource),            SETTING_ATTR_VALID}, // 2 SETID_AUDIO_SOURCE
    { &setting.isMusicPlaying,       sizeof(setting.isMusicPlaying),         SETTING_ATTR_VALID}, // 3 SETID_MUSIC_DET
    { &setting.tempLevelAudio,       sizeof(setting.tempLevelAudio),         SETTING_ATTR_VALID}, // 4 SETID_TEMP_LEVEL_AUDIO
    { &setting.ampHealth,            sizeof(setting.ampHealth),              SETTING_ATTR_VALID}, // 5 SETID_AMP_HEALTH
    { &setting.reserve,              sizeof(setting.reserve),                SETTING_ATTR_VALID}, // 6 SETID_RESERVE_A1
    { &setting.bootReq,              sizeof(setting.bootReq),                SETTING_ATTR_VALID}, // 7 SETID_BOOT_REQUEST
    { &setting.ampErrorReason,       sizeof(setting.ampErrorReason),         SETTING_ATTR_VALID}, // 8 SETID_AMP_ERROR_REASON
    { &setting.stackMaxUsage,        sizeof(setting.stackMaxUsage),          SETTING_ATTR_VALID}, // 9 SETID_MAX_STACK_USAGE
				

    // Common part, other
    { &setting.swFwVer,              sizeof(setting.swFwVer),                SETTING_ATTR_VALID}, // 10 SETID_SW_FW_VER
    { &setting.hwVer,                sizeof(setting.hwVer),                  SETTING_ATTR_VALID}, // 11 SETID_HW_VER
    { &setting.dspVer,               sizeof(setting.dspVer),                 SETTING_ATTR_VALID}, // 12 SETID_DSP_VER
    { &setting.asetkConnected,       sizeof(setting.asetkConnected),         SETTING_ATTR_VALID}, // 13 SETID_ASETK_CONNECTED
    { &setting.connected572,         sizeof(setting.connected572),           SETTING_ATTR_VALID}, // 14 SETID_IQS572_CONNECTED
    { &setting.connected360,         sizeof(setting.connected360),           SETTING_ATTR_VALID}, // 15 SETID_IQS360A_CONNECTED
    { &setting.systemSleep,          sizeof(setting.systemSleep),            SETTING_ATTR_VALID}, // 16 SETID_SYSTEM_SLEEP
    { &setting.isDCPlugIn,           sizeof(setting.isDCPlugIn),             SETTING_ATTR_VALID}, // 17 SETID_IS_DC_PLUG_IN
    { &setting.errorReason,          sizeof(setting.errorReason),            SETTING_ATTR_VALID}, // 18 SETID_ERROR_REASON
    { &setting.gainAllow,            sizeof(setting.gainAllow),              SETTING_ATTR_VALID}, // 19 SETID_GAIN_ALLOW

    
    // Common part, system tuning    
    { &setting.queueMinDebugSrv,     sizeof(setting.queueMinDebugSrv),       SETTING_ATTR_VALID}, // 20 SETID_QUEUE_MIN_DEBUG_SRV
    { &setting.queueMinSettingSrv,   sizeof(setting.queueMinSettingSrv),     SETTING_ATTR_VALID}, // 21 SETID_QUEUE_MIN_SETTING_SRV
    { &setting.queueMinAudioSrv,     sizeof(setting.queueMinAudioSrv),       SETTING_ATTR_VALID}, // 22 SETID_QUEUE_MIN_AUDIO_SRV
    { &setting.queueMinLedsSrv,      sizeof(setting.queueMinLedsSrv),        SETTING_ATTR_VALID}, // 23 SETID_QUEUE_MIN_LEDS_SRV
    { &setting.queueMinBluetoothSrv, sizeof(setting.queueMinBluetoothSrv),   SETTING_ATTR_VALID}, // 24 SETID_QUEUE_MIN_BLUETOOTH_SRV
    { &setting.queueMinKeysSrv,      sizeof(setting.queueMinKeysSrv),        SETTING_ATTR_VALID}, // 25 SETID_QUEUE_MIN_KEYS_SRV
    { &setting.queueMinPowerSrv,     sizeof(setting.queueMinPowerSrv),       SETTING_ATTR_VALID}, // 26 SETID_QUEUE_MIN_POWER_SRV
    { &setting.queueMinAseTkSrv,     sizeof(setting.queueMinAseTkSrv),       SETTING_ATTR_VALID}, // 27 SETID_QUEUE_MIN_ASE_TK_SRV
    { &setting.poolMinSmall,         sizeof(setting.poolMinSmall),           SETTING_ATTR_VALID}, // 28 SETID_POOL_MIN_SMALL
    { &setting.poolMinMedium,        sizeof(setting.poolMinMedium),          SETTING_ATTR_VALID}, // 29 SETID_POOL_MIN_MEDIUM
    { &setting.poolMinLarge,         sizeof(setting.poolMinLarge),           SETTING_ATTR_VALID}, // 30 SETID_POOL_MIN_LARGE
    { &setting.dspParamPos,          sizeof(setting.dspParamPos),            SETTING_ATTR_VALID}, // 31 SETID_DSP_PARAM_POSITION
    { &setting.dspParamBass,         sizeof(setting.dspParamBass),           SETTING_ATTR_VALID}, // 32 SETID_DSP_PARAM_BASS
    { &setting.dspParamLoudness,     sizeof(setting.dspParamLoudness),       SETTING_ATTR_VALID}, // 33 SETID_DSP_PARAM_LOUDNESS
    { &setting.dspParamTreble,       sizeof(setting.dspParamTreble),         SETTING_ATTR_VALID}, // 34 SETID_DSP_PARAM_TREBLE
    { &setting.tempLevelSystem,      sizeof(setting.tempLevelSystem),        SETTING_ATTR_VALID}, // 35 SETID_TEMP_LEVEL_SYSTEM
    { &setting.dspHealth,            sizeof(setting.dspHealth),              SETTING_ATTR_VALID}, // 36 SETID_DSP_HEALTH
    { &setting.audioSignalVolIn,     sizeof(setting.audioSignalVolIn),       SETTING_ATTR_VALID}, // 37 SETID_AUDIO_SIGNAL_VOL_INPUT
    { &setting.swPiuVer,             sizeof(setting.swPiuVer),               SETTING_ATTR_VALID}, // 38 SETID_SW_PIU_VER
    { &setting.swUblVer,             sizeof(setting.swUblVer),               SETTING_ATTR_VALID}, // 39 SETID_SW_UBL_VER

    //FS1 Temperature
    { &setting.tempWfAmp,            sizeof(setting.tempWfAmp),              SETTING_ATTR_VALID}, // 40 SETID_TEMP_AMP
    { &setting.tempWfSpk,            sizeof(setting.tempWfSpk),              SETTING_ATTR_VALID}, // 41 SETID_TEMP_WF_SPK
    { &setting.tempTwSpk,            sizeof(setting.tempTwSpk),              SETTING_ATTR_VALID}, // 42 SETID_TEMP_TW_SPK
    { &setting.audioSignalVolWfOut,  sizeof(setting.audioSignalVolWfOut),    SETTING_ATTR_VALID}, // 43 SETID_AUDIO_SIGNAL_VOL_WF_OUTPUT
    { &setting.audioSignalVolTwOut,  sizeof(setting.audioSignalVolTwOut),    SETTING_ATTR_VALID}, // 44 SETID_AUDIO_SIGNAL_VOL_TW_OUTPUT
    { &setting.reserve,              sizeof(setting.reserve),                SETTING_ATTR_VALID}, // 45 SETID_RESERVE_D3
    { &setting.reserve,              sizeof(setting.reserve),                SETTING_ATTR_VALID}, // 46 SETID_RESERVE_D4
    { &setting.reserve,              sizeof(setting.reserve),                SETTING_ATTR_VALID}, // 47 SETID_RESERVE_D5
    { &setting.reserve,              sizeof(setting.reserve),                SETTING_ATTR_VALID}, // 48 SETID_RESERVE_D6
    { &setting.reserve,              sizeof(setting.reserve),                SETTING_ATTR_VALID}, // 49 SETID_RESERVE_D7
    
        
    //FS1 Audio
    { &setting.dspCalGain1Wf,        sizeof(setting.dspCalGain1Wf),          SETTING_ATTR_VALID}, // 50 SETID_DSP_CAL_GAIN1_WF, woofer
    { &setting.dspCalGain2Tw,        sizeof(setting.dspCalGain2Tw),          SETTING_ATTR_VALID}, // 51 SETID_DSP_CAL_GAIN2_TW, tweeter
    { &setting.dspOverheatGainWf,    sizeof(setting.dspOverheatGainWf),      SETTING_ATTR_VALID}, // 52 SETID_DSP_OVERHEAT_GAIN_WF
    { &setting.dspOverheatGainTw,    sizeof(setting.dspOverheatGainTw),      SETTING_ATTR_VALID}, // 53 SETID_DSP_OVERHEAT_GAIN_TW
    { &setting.dspOverheatCoilTempWf,sizeof(setting.dspOverheatCoilTempWf),  SETTING_ATTR_VALID}, // 54 SETID_DSP_OVERHEAT_COIL_TEMP_WF
    { &setting.dspOverheatCoilTempTw,sizeof(setting.dspOverheatCoilTempTw),  SETTING_ATTR_VALID}, // 55 SETID_DSP_OVERHEAT_COIL_TEMP_TW
    { &setting.dspDboostLevel,       sizeof(setting.dspDboostLevel),         SETTING_ATTR_VALID}, // 56 SETID_DSP_DBOOST_LEVEL
    { &setting.reserve,              sizeof(setting.reserve),                SETTING_ATTR_VALID}, // 57 SETID_RESERVE_E6
    { &setting.reserve,              sizeof(setting.reserve),                SETTING_ATTR_VALID}, // 58 SETID_RESERVE_E7
    { &setting.reserve,              sizeof(setting.reserve),                SETTING_ATTR_VALID}, // 59 SETID_RESERVE_E8

    
    //FS1 Power
    { &setting.chargeStatus,         sizeof(setting.chargeStatus),           SETTING_ATTR_VALID}, // 61 SETID_CHARGER_STATUS
    { &setting._5vSen,               sizeof(setting._5vSen),                 SETTING_ATTR_VALID}, // 61 SETID_5V_SEN
    { &setting.pvddSen,              sizeof(setting.pvddSen),                SETTING_ATTR_VALID}, // 62 SETID_PVDD_SEN
    { &setting.reserve,              sizeof(setting.reserve),                SETTING_ATTR_VALID}, // 63 SETID_RESERVE_F1
    { &setting.reserve,              sizeof(setting.reserve),                SETTING_ATTR_VALID}, // 64 SETID_RESERVE_F2
    { &setting.reserve,              sizeof(setting.reserve),                SETTING_ATTR_VALID}, // 65 SETID_RESERVE_F3
    { &setting.reserve,              sizeof(setting.reserve),                SETTING_ATTR_VALID}, // 66 SETID_RESERVE_F4
    { &setting.reserve,              sizeof(setting.reserve),                SETTING_ATTR_VALID}, // 67 SETID_RESERVE_F5
    { &setting.reserve,              sizeof(setting.reserve),                SETTING_ATTR_VALID}, // 68 SETID_RESERVE_F6
    { &setting.reserve,              sizeof(setting.reserve),                SETTING_ATTR_VALID}, // 69 SETID_RESERVE_F7

    
    //FS1 Battery, Charger
    { &setting.batterySN,              sizeof(setting.batterySN),              SETTING_ATTR_VALID}, // 70 SETID_BATTERY_SN
    { &setting.batteryHW,              sizeof(setting.batteryHW),              SETTING_ATTR_VALID}, // 71 SETID_BATTERY_HW
    { &setting.batterySW,              sizeof(setting.batterySW),              SETTING_ATTR_VALID}, // 72 SETID_BATTERY_SW
    { &setting.batteryTemp,            sizeof(setting.batteryTemp),            SETTING_ATTR_VALID}, // 73 SETID_BATTERY_TEMP
    { &setting.batteryTempLevel,       sizeof(setting.batteryTempLevel),       SETTING_ATTR_VALID}, // 74 SETID_BATTERY_TEMP_LEVEL
    { &setting.batteryCapacityRsoc,    sizeof(setting.batteryCapacityRsoc),    SETTING_ATTR_VALID}, // 75 SETID_BATTERY_CAPACITY_RSOC
    { &setting.batteryCapacityAsoc,    sizeof(setting.batteryCapacityAsoc),    SETTING_ATTR_VALID}, // 76 SETID_BATTERY_CAPACITY_ASOC
    { &setting.batteryCapacityLevel,   sizeof(setting.batteryCapacityLevel),   SETTING_ATTR_VALID}, // 77 SETID_BATTERY_CAPACITY_LEVEL
    { &setting.batteryHealthSoh,       sizeof(setting.batteryHealthSoh),       SETTING_ATTR_VALID}, // 78 SETID_BATTERY_HEALTH_SOH
    { &setting.batteryHealthLevel,     sizeof(setting.batteryHealthLevel),     SETTING_ATTR_VALID}, // 79 SETID_BATTERY_HEALTH_LEVEL
    { &setting.batteryCycle,           sizeof(setting.batteryCycle),           SETTING_ATTR_VALID}, // 80 SETID_BATTERY_CYCLE
    { &setting.batteryChVoltage,       sizeof(setting.batteryChVoltage),       SETTING_ATTR_VALID}, // 81 SETID_BATTERY_CHARGING_VOLTAGE
    { &setting.batteryChCurrent,       sizeof(setting.batteryChCurrent),       SETTING_ATTR_VALID}, // 82 SETID_BATTERY_CHARGING_CURRENT
    { &setting.batterySafetyStatus_high,    sizeof(setting.batterySafetyStatus_high),    SETTING_ATTR_VALID}, // 83 SETID_BATTERY_SAFETY_STATUS_HIGH
    { &setting.batterySafetyStatus_low,    sizeof(setting.batterySafetyStatus_low),    SETTING_ATTR_VALID}, // 84 SETID_BATTERY_SAFETY_STATUS_LOW
    { &setting.batteryTempCell1,       sizeof(setting.batteryTempCell1),       SETTING_ATTR_VALID}, // 85 SETID_BATTERY_TEMP_CALL1
    { &setting.batteryTempCell2,       sizeof(setting.batteryTempCell2),       SETTING_ATTR_VALID}, // 86 SETID_BATTERY_TEMP_CALL2
    { &setting.batteryExist,           sizeof(setting.batteryExist),           SETTING_ATTR_VALID}, // 87 SETID_BATTERY_EXIST
    { &setting.batteryCurrent,         sizeof(setting.batteryCurrent),         SETTING_ATTR_VALID}, // 88 SETID_BATTERY_CURRENT
    { &setting.batteryAvgCurrent,      sizeof(setting.batteryAvgCurrent),      SETTING_ATTR_VALID}, // 89 SETID_BATTERY_AVG_CURRENT
    { &setting.batteryCapacityRsocUser,sizeof(setting.batteryCapacityRsocUser),SETTING_ATTR_VALID}, // 90 SETID_BATTERY_CAPACITY_RSOC_USER
    { &setting.batteryPackStatus,      sizeof(setting.batteryPackStatus),      SETTING_ATTR_VALID}, // 91 SETID_BATTERY_PACK_STATUS
    { &setting.batteryTotalVol,        sizeof(setting.batteryTotalVol),        SETTING_ATTR_VALID}, // 92 SETID_BATTERY_TOTAL_VOL
    { &setting.batteryStatus,          sizeof(setting.batteryStatus),          SETTING_ATTR_VALID}, // 93 SETID_BATTERY_STATUS
    { &setting.batteryRemainCap,       sizeof(setting.batteryRemainCap),       SETTING_ATTR_VALID}, // 94 SETID_BATTERY_REMAIN_CAPACITY
    { &setting.batteryFullChCap,       sizeof(setting.batteryFullChCap),       SETTING_ATTR_VALID}, // 95 SETID_BATTERY_FULL_CH_CAPACITY
    { &setting.batteryDesignCap,       sizeof(setting.batteryDesignCap),       SETTING_ATTR_VALID}, // 96 SETID_BATTERY_DESIGN_CAPACITY
    { &setting.batteryLowBattShutDown, sizeof(setting.batteryLowBattShutDown), SETTING_ATTR_VALID}, // 97 SETID_BATTERY_LOW_BATT_SHUT_DOWN
    { &setting.batteryPfStatus_high,   sizeof(setting.batteryPfStatus_high),   SETTING_ATTR_VALID}, // 98 SETID_BATTERY_PF_STATUS_HIGH
    { &setting.batteryPfStatus_low,    sizeof(setting.batteryPfStatus_low),    SETTING_ATTR_VALID}, // 99 SETID_BATTERY_PF_STATUS_LOW
    { &setting.batteryVoltCell1,       sizeof(setting.batteryVoltCell1),       SETTING_ATTR_VALID}, // 100 SETID_BATTERY_VOLT_CELL1
    { &setting.batteryVoltCell2,       sizeof(setting.batteryVoltCell2),       SETTING_ATTR_VALID}, // 101 SETID_BATTERY_VOLT_CELL2

    //FS1 Charger
    { &setting.sleepCharging,          sizeof(setting.sleepCharging),          SETTING_ATTR_VALID}, // 102 SETID_SYSTEM_SLEEP_CHARGING
    { &setting.reserve,                sizeof(setting.reserve),                SETTING_ATTR_VALID}, // 103 SETID_RESERVE_H1
    { &setting.reserve,                sizeof(setting.reserve),                SETTING_ATTR_VALID}, // 104 SETID_RESERVE_H2
    { &setting.reserve,                sizeof(setting.reserve),                SETTING_ATTR_VALID}, // 105 SETID_RESERVE_H3
    { &setting.reserve,                sizeof(setting.reserve),                SETTING_ATTR_VALID}, // 106 SETID_RESERVE_H4
    { &setting.reserve,                sizeof(setting.reserve),                SETTING_ATTR_VALID}, // 107 SETID_RESERVE_H5
    { &setting.reserve,                sizeof(setting.reserve),                SETTING_ATTR_VALID}, // 108 SETID_RESERVE_H6
    { &setting.reserve,                sizeof(setting.reserve),                SETTING_ATTR_VALID}, // 109 SETID_RESERVE_H7
    { &setting.reserve,                sizeof(setting.reserve),                SETTING_ATTR_VALID}, // 110 SETID_RESERVE_H8
    { &setting.reserve,                sizeof(setting.reserve),                SETTING_ATTR_VALID}, // 111 SETID_RESERVE_H9


    //FS1 Battery Faulstlog
    { &setting.batteryFaultsLogOvpCnt,          sizeof(setting.batteryFaultsLogOvpCnt),          SETTING_ATTR_VALID}, // 112 SETID_BATTERY_FL_OVP_CNT
    { &setting.batteryFaultsLogUvpCnt,          sizeof(setting.batteryFaultsLogUvpCnt),          SETTING_ATTR_VALID}, // 113 SETID_BATTERY_FL_UVP_CNT
    { &setting.batteryFaultsLogCotCnt,          sizeof(setting.batteryFaultsLogCotCnt),          SETTING_ATTR_VALID}, // 114 SETID_BATTERY_FL_COT_CNT
    { &setting.batteryFaultsLogCutCnt,          sizeof(setting.batteryFaultsLogCutCnt),          SETTING_ATTR_VALID}, // 115 SETID_BATTERY_FL_CUT_CNT
    { &setting.batteryFaultsLogDotCnt,          sizeof(setting.batteryFaultsLogDotCnt),          SETTING_ATTR_VALID}, // 116 SETID_BATTERY_FL_DOT_CNT
    { &setting.batteryFaultsLogDutCnt,          sizeof(setting.batteryFaultsLogDutCnt),          SETTING_ATTR_VALID}, // 117 SETID_BATTERY_FL_DUT_CNT
    { &setting.batteryFaultsLogAfeeCnt,         sizeof(setting.batteryFaultsLogAfeeCnt),         SETTING_ATTR_VALID}, // 118 SETID_BATTERY_FL_AFEE_CNT
    { &setting.batteryFaultsLogDocCnt,          sizeof(setting.batteryFaultsLogDocCnt),          SETTING_ATTR_VALID}, // 119 SETID_BATTERY_FL_DOC_CNT
    { &setting.batteryFaultsLogCocCnt,          sizeof(setting.batteryFaultsLogCocCnt),          SETTING_ATTR_VALID}, // 120 SETID_BATTERY_FL_COC_CNT
    { &setting.batteryFaultsLogChrgAuthFailCnt, sizeof(setting.batteryFaultsLogChrgAuthFailCnt), SETTING_ATTR_VALID}, // 121 SETID_BATTERY_FL_CHRG_AUTH_FAIL_CNT
    { &setting.batteryFaultsLogChrgOvpCnt,      sizeof(setting.batteryFaultsLogChrgOvpCnt),      SETTING_ATTR_VALID}, // 122 SETID_BATTERY_FL_CHRG_OVP_CNT
    { &setting.batteryFaultsLogChrgCotCnt,      sizeof(setting.batteryFaultsLogChrgCotCnt),      SETTING_ATTR_VALID}, // 123 SETID_BATTERY_FL_CHRG_COT_CNT
    { &setting.batteryFaultsLogAdcSatFailCnt,   sizeof(setting.batteryFaultsLogAdcSatFailCnt),   SETTING_ATTR_VALID}, // 124 SETID_BATTERY_FL_ADC_SAT_FAIL_CNT
    { &setting.batteryFaultsLogAfecfCnt,        sizeof(setting.batteryFaultsLogAfecfCnt),        SETTING_ATTR_VALID}, // 125 SETID_BATTERY_FL_AFECF_COUNT
    { &setting.batteryFaultsLogHwDocCnt,        sizeof(setting.batteryFaultsLogHwDocCnt),        SETTING_ATTR_VALID}, // 126 SETID_BATTERY_FL_HWDOC_COUNT
    { &setting.batteryFaultsLogHwCocCnt,        sizeof(setting.batteryFaultsLogHwCocCnt),        SETTING_ATTR_VALID}, // 127 SETID_BATTERY_FL_HWCOC_COUNT
    { &setting.batteryFaultsLogHwBcdCnt,        sizeof(setting.batteryFaultsLogHwBcdCnt),        SETTING_ATTR_VALID}, // 128 SETID_BATTERY_FL_HWBCD_COUNT
    { &setting.batteryFaultsLogHwScpCnt,        sizeof(setting.batteryFaultsLogHwScpCnt),        SETTING_ATTR_VALID}, // 129 SETID_BATTERY_FL_HWSCP_COUNT
    { &setting.batteryFaultsLogPfCbfCnt,        sizeof(setting.batteryFaultsLogPfCbfCnt),        SETTING_ATTR_VALID}, // 130 SETID_BATTERY_FL_PFCBF_COUNT
    { &setting.batteryFaultsLogPfOvpCnt,        sizeof(setting.batteryFaultsLogPfOvpCnt),        SETTING_ATTR_VALID}, // 131 SETID_BATTERY_FL_PFOVP_COUNT
    { &setting.batteryFaultsLogPfCocCnt,        sizeof(setting.batteryFaultsLogPfCocCnt),        SETTING_ATTR_VALID}, // 132 SETID_BATTERY_FL_PFCOC_COUNT
    { &setting.batteryFaultsLogPffetfCnt,       sizeof(setting.batteryFaultsLogPffetfCnt),       SETTING_ATTR_VALID}, // 133 SETID_BATTERY_FL_PFFETF_COUNT
    { &setting.batteryFaultsLogPfUvp,           sizeof(setting.batteryFaultsLogPfUvp),           SETTING_ATTR_VALID}, // 134 SETID_BATTERY_FL_PFUVP
    { &setting.batteryFaultsLogMaxCellVolt,     sizeof(setting.batteryFaultsLogMaxCellVolt),     SETTING_ATTR_VALID}, // 135 SETID_BATTERY_FL_MAX_CELL_VOLT
    { &setting.batteryFaultsLogMinCellVolt,     sizeof(setting.batteryFaultsLogMinCellVolt),     SETTING_ATTR_VALID}, // 136 SETID_BATTERY_FL_MIN_CELL_VOLT
    { &setting.batteryFaultsLogMaxChrgTemp,     sizeof(setting.batteryFaultsLogMaxChrgTemp),     SETTING_ATTR_VALID}, // 137 SETID_BATTERY_FL_MAX_CHRG_TEMP
    { &setting.batteryFaultsLogMinChrgTemp,     sizeof(setting.batteryFaultsLogMinChrgTemp),     SETTING_ATTR_VALID}, // 138 SETID_BATTERY_FL_MIN_CHRG_TEMP
    { &setting.batteryFaultsLogMaxDischrgTemp,  sizeof(setting.batteryFaultsLogMaxDischrgTemp),  SETTING_ATTR_VALID}, // 139 SETID_BATTERY_FL_MAX_DISCHRG_TEMP
    { &setting.batteryFaultsLogMinDischrgTemp,  sizeof(setting.batteryFaultsLogMinDischrgTemp),  SETTING_ATTR_VALID}, // 140 SETID_BATTERY_FL_MIN_DISCHRG_TEMP
    { &setting.batteryFaultsLogMaxChrgCurr,     sizeof(setting.batteryFaultsLogMaxChrgCurr),     SETTING_ATTR_VALID}, // 141 SETID_BATTERY_FL_MAX_CHRG_CURR
    { &setting.batteryFaultsLogMaxDischrgCurr,  sizeof(setting.batteryFaultsLogMaxDischrgCurr),  SETTING_ATTR_VALID}, // 142 SETID_BATTERY_FL_MAX_DISCHRG_CURR
    { &setting.batteryFaultsLogBatteryStatus,   sizeof(setting.batteryFaultsLogBatteryStatus),   SETTING_ATTR_VALID}, // 143 SETID_BATTERY_FL_BATTERY_STATUS
    { &setting.batteryFaultsLogAvgCurrent,      sizeof(setting.batteryFaultsLogAvgCurrent),      SETTING_ATTR_VALID}, // 144 SETID_BATTERY_FL_AVG_CURRENT
    { &setting.batteryFaultsLogTemp1,           sizeof(setting.batteryFaultsLogTemp1),           SETTING_ATTR_VALID}, // 145 SETID_BATTERY_FL_TEMP1
    { &setting.batteryFaultsLogTemp2,           sizeof(setting.batteryFaultsLogTemp2),           SETTING_ATTR_VALID}, // 146 SETID_BATTERY_FL_TEMP2
    { &setting.batteryFaultsLogMosTemp1,        sizeof(setting.batteryFaultsLogMosTemp1),        SETTING_ATTR_VALID}, // 147 SETID_BATTERY_FL_MOS_TEMP1
    { &setting.batteryFaultsLogCellVolt1,       sizeof(setting.batteryFaultsLogCellVolt1),       SETTING_ATTR_VALID}, // 148 SETID_BATTERY_FL_CELL_VOLT1
    { &setting.batteryFaultsLogCellVolt2,       sizeof(setting.batteryFaultsLogCellVolt2),       SETTING_ATTR_VALID}, // 149 SETID_BATTERY_FL_CELL_VOLT2
    { &setting.tempPrintPeriod,                 sizeof(setting.tempPrintPeriod),                 SETTING_ATTR_VALID}, // 150 SETID_TEMP_PRINT_PERIOD
    { &setting.battPrintPeriod,                 sizeof(setting.battPrintPeriod),                 SETTING_ATTR_VALID}, // 151 SETID_BATT_PRINT_PERIOD
};

#define SETT_PAGE_ROM_ADDR      0x0803E800 //= __USEREDIT_region_ROM2_start__
#define SETT_ELEMENT_MIN_SIZE   sizeof(uint32)
#define SETT_ELEMENT_MAX_SIZE   0x0100

static const tSettingRomMap settingRomMap[] =
{
#ifdef MCU_STORE_DSP_GAIN
    { SETID_DSP_CAL_GAIN1_WF,        SETT_PAGE_ROM_ADDR },
    { SETID_DSP_CAL_GAIN2_TW,        SETT_PAGE_ROM_ADDR+sizeof(setting.dspCalGain1Wf) },
#else
    { SETID_BOOT_REQUEST,            SETT_PAGE_ROM_ADDR },
    { SETID_GAIN_ALLOW,             SETT_PAGE_ROM_ADDR+sizeof(setting.dspCalGain1Wf) },
#endif    
    { SETID_QUEUE_MIN_DEBUG_SRV,     SETT_PAGE_ROM_ADDR+sizeof(setting.dspCalGain1Wf)+sizeof(setting.dspCalGain2Tw) },
    { SETID_QUEUE_MIN_SETTING_SRV,   SETT_PAGE_ROM_ADDR+sizeof(setting.dspCalGain1Wf)+sizeof(setting.dspCalGain2Tw) + SETT_ELEMENT_MIN_SIZE * 1},
    { SETID_QUEUE_MIN_AUDIO_SRV,     SETT_PAGE_ROM_ADDR+sizeof(setting.dspCalGain1Wf)+sizeof(setting.dspCalGain2Tw) + SETT_ELEMENT_MIN_SIZE * 2},
    { SETID_QUEUE_MIN_LEDS_SRV,      SETT_PAGE_ROM_ADDR+sizeof(setting.dspCalGain1Wf)+sizeof(setting.dspCalGain2Tw) + SETT_ELEMENT_MIN_SIZE * 3},
    { SETID_QUEUE_MIN_BLUETOOTH_SRV, SETT_PAGE_ROM_ADDR+sizeof(setting.dspCalGain1Wf)+sizeof(setting.dspCalGain2Tw) + SETT_ELEMENT_MIN_SIZE * 4},
    { SETID_QUEUE_MIN_KEYS_SRV,      SETT_PAGE_ROM_ADDR+sizeof(setting.dspCalGain1Wf)+sizeof(setting.dspCalGain2Tw) + SETT_ELEMENT_MIN_SIZE * 5},
    { SETID_QUEUE_MIN_POWER_SRV,     SETT_PAGE_ROM_ADDR+sizeof(setting.dspCalGain1Wf)+sizeof(setting.dspCalGain2Tw) + SETT_ELEMENT_MIN_SIZE * 6},
    { SETID_QUEUE_MIN_ASE_TK_SRV,    SETT_PAGE_ROM_ADDR+sizeof(setting.dspCalGain1Wf)+sizeof(setting.dspCalGain2Tw) + SETT_ELEMENT_MIN_SIZE * 7},
    { SETID_POOL_MIN_SMALL,          SETT_PAGE_ROM_ADDR+sizeof(setting.dspCalGain1Wf)+sizeof(setting.dspCalGain2Tw) + SETT_ELEMENT_MIN_SIZE * 8},
    { SETID_POOL_MIN_MEDIUM,         SETT_PAGE_ROM_ADDR+sizeof(setting.dspCalGain1Wf)+sizeof(setting.dspCalGain2Tw) + SETT_ELEMENT_MIN_SIZE * 9},
    { SETID_POOL_MIN_LARGE,          SETT_PAGE_ROM_ADDR+sizeof(setting.dspCalGain1Wf)+sizeof(setting.dspCalGain2Tw) + SETT_ELEMENT_MIN_SIZE * 10}
};



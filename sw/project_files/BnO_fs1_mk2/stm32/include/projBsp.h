/******************************************************************************

Copyright (c) 2015, Tymphany HK Ltd. All rights reserved.

Confidential information of Tymphany HK Ltd.

The Software is provided "AS IS" and "WITH ALL FAULTS," without warranty of any
kind, including without limitation the warranties of merchantability, fitness
for a particular purpose and non-infringement. Tymphany HK LTD. makes no
warranty that the Software is free of defects or is suitable for any particular
purpose.

******************************************************************************/
/*
-------------------------------------------------------------------------------
TYMPHANY LTD





                  Public project Bsp interfaces
                  -------------------------

                  SW Module Document




@file        projBsp.h
@brief       This file declares the public project bsp interfaces, user should
             implement these interfaces based on the requiremnets and
             the implementation should be located at projBsp.c
@author      Bob.Xu
@date        2014-06-12
@copyright (c) Tymphany Ltd. All rights reserved.

Change History:
VERSION    : 1    DRAFT      2014-06-12     Bob.Xu
DESCRIPTION: First Draft. Generated by newclass.py
SCO/ERROR  :
-------------------------------------------------------------------------------
*/
#ifndef PROJ_BSP_H
#define PROJ_BSP_H

#include "commonTypes.h"
#include "product.config" //PROJECT_SPEC_ASSERT_HANDLER
#include "stm32f0xx.h"

#define BSP_TICKS_PER_SEC       1000U
#define GET_TICKS_IN_MS(x)      (x * BSP_TICKS_PER_SEC / 1000)
#define INLINE                  inline
#define GET_MS_IN_TICKS(y)      (y * 1000 /BSP_TICKS_PER_SEC)

void ProjBsp_CyclePrintError(char* errString);
void ProjBsp_JumpToBootloader(void);
void EXTI_Config(bool isTurnOnInterrupt);
void SetEnableWakeupSources();
void SetDisableWakeupSources();
void SetEnableCodecStatus(bool bEnable);
void ProjBsp_SysClkUpdate();
void RTC_Initialize();
void RTC_SetUpWakeUpAlarm(uint8 seconds);
void BSP_ExpBlockingDelayMs(uint32 ms);

#ifdef HAS_PROJ_PRINTF
int ProjBsp_Printf(bool toAsetk, const char *file, const int line, const char *fmt, ...);
#endif


#ifdef PROJECT_SPEC_ASSERT_HANDLER
void ProjBsp_AssertHandler(char const * const file, int line);
#endif
 

#endif /* End of PROJ_BSP_H */


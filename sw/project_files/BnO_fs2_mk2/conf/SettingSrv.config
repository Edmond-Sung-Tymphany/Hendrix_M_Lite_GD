#include "product.config"

#define SETTING_RESEND_LIMIT    3
#define PAGE_SIZE               2048        // # of 32-bit Instructions per Page
#define SETTING_SAVE_MS         5000
#define IDLE_TIMEOUT_MS         3000
#define TIMER_PERIOD_MS         1000

typedef struct tSettingEntry
{
    //Common part, Audio
    uint8         volLevel;
    uint8         channel;
    uint8         audioSource;
    bool          isMusicPlaying;
    uint16        tempLevelAudio;
    bool          ampHealth;
    uint32        bootReq; //type: eBootReq
    uint32        ampErrorReason;
    uint32        stackMaxUsage;

    //Common part, other
    uint8         swFwVer  [SW_VERSION_LENGTH];
    uint8         hwVer    [HW_VERSION_LENGTH];
    uint8         dspVer   [DSP_VERSION_LENGTH];
    bool          asetkConnected; //for production test
    bool          connected572;  //for production test
    bool          connected360;  //for production test
    bool          systemSleep;
    bool          isDCPlugIn;  //type: eDcInSta
    uint32        errorReason;
    uint32        gainAllow;

    //Common part, system tuning
    uint32        queueMinDebugSrv;
    uint32        queueMinSettingSrv;
    uint32        queueMinAudioSrv;
    uint32        queueMinLedsSrv;
    uint32        queueMinBluetoothSrv;
    uint32        queueMinKeysSrv;
    uint32        queueMinPowerSrv;
    uint32        queueMinAseTkSrv;
    uint32        poolMinSmall;
    uint32        poolMinMedium;
    uint32        poolMinLarge;
    uint16        dspParamPos;  //type: PositionSoundMode_Position
    uint16        dspParamBass;
    uint16        dspParamLoudness;
    uint16        dspParamTreble;
    uint16        tempLevelSystem;
    uint8         swPiuVer [SW_VERSION_LENGTH];
    uint8         swUblVer [SW_VERSION_LENGTH];

    //FS2 Temperature
    uint16        tempWfAmpA;
    uint16        tempWfAmpB;
    uint16        tempWfSpk;
    uint16        tempMidSpkA;
    uint16        tempMidSpkB;
    uint16        tempTwAmp;
    float         audioSignalVolIn;
    float         audioSignalVolWfOut;
    float         audioSignalVolMidAOut;
    float         audioSignalVolMidBOut;
    float         audioSignalVolTwOut;

    //FS2 Audio
    double        dspCalGain1Wf;
    double        dspCalGain2MidA; 
    double        dspCalGain3MidB; 
    double        dspCalGain4Tw; 

    uint32        sensitivityLineIn;
    float         audioAuxInDb;
    float         audioSysInDb;
    float         audioOutWfDb;
    float         audioOutMidaDb;
    float         audioOutMidbDb;
    float         audioOutTwDb;

    uint32        dspOverheatGainWf;
    uint32        dspOverheatGainMid;
    uint32        dspOverheatGainTw;
    uint32        dspOverheatCoilTempWf;
    uint32        dspOverheatCoilTempMidA;
    uint32        dspOverheatCoilTempMidB;
    uint32        dspOverheatCoilTempTw;

    uint32        dspChannel;

    //Reserve
    uint8         reserve;
} tSettingEntry;

static tSettingEntry setting;


static tSettingDatabase settingDB[SETID_MAX] =
{
    // Common part, Audio
    { &setting.volLevel,             sizeof(setting.volLevel),               SETTING_ATTR_VALID}, // 0 SETID_VOLUME
    { &setting.channel,              sizeof(setting.channel),                SETTING_ATTR_VALID}, // 1 SETID_CHANNEL
    { &setting.audioSource,          sizeof(setting.audioSource),            SETTING_ATTR_VALID}, // 2 SETID_AUDIO_SOURCE
    { &setting.isMusicPlaying,       sizeof(setting.isMusicPlaying),         SETTING_ATTR_VALID}, // 3 SETID_MUSIC_DET
    { &setting.tempLevelAudio,       sizeof(setting.tempLevelAudio),         SETTING_ATTR_VALID}, // 4 SETID_TEMP_LEVEL_AUDIO
    { &setting.ampHealth,            sizeof(setting.ampHealth),              SETTING_ATTR_VALID}, // 5 SETID_AMP_HEALTH
    { &setting.reserve,              sizeof(setting.reserve),                SETTING_ATTR_VALID}, // 6 SETID_RESERVE_A1
    { &setting.bootReq,              sizeof(setting.bootReq),                SETTING_ATTR_VALID}, // 7 SETID_BOOT_REQUEST
    { &setting.ampErrorReason,       sizeof(setting.ampErrorReason),         SETTING_ATTR_VALID}, // 8 SETID_AMP_ERROR_REASON
    { &setting.stackMaxUsage,        sizeof(setting.stackMaxUsage),          SETTING_ATTR_VALID}, // 9 SETID_MAX_STACK_USAGE
				

    // Common part, other
    { &setting.swFwVer,              sizeof(setting.swFwVer),                SETTING_ATTR_VALID}, // 10 SETID_SW_FW_VER
    { &setting.hwVer,                sizeof(setting.hwVer),                  SETTING_ATTR_VALID}, // 11 SETID_HW_VER
    { &setting.dspVer,               sizeof(setting.dspVer),                 SETTING_ATTR_VALID}, // 12 SETID_DSP_VER
    { &setting.asetkConnected,       sizeof(setting.asetkConnected),         SETTING_ATTR_VALID}, // 13 SETID_ASETK_CONNECTED
    { &setting.connected572,         sizeof(setting.connected572),           SETTING_ATTR_VALID}, // 14 SETID_IQS572_CONNECTED
    { &setting.connected360,         sizeof(setting.connected360),           SETTING_ATTR_VALID}, // 15 SETID_IQS360A_CONNECTED
    { &setting.systemSleep,          sizeof(setting.systemSleep),            SETTING_ATTR_VALID}, // 16 SETID_SYSTEM_SLEEP
    { &setting.isDCPlugIn,           sizeof(setting.isDCPlugIn),             SETTING_ATTR_VALID}, // 17 SETID_IS_DC_PLUG_IN
    { &setting.errorReason,          sizeof(setting.errorReason),            SETTING_ATTR_VALID}, // 18 SETID_ERROR_REASON
    { &setting.gainAllow,            sizeof(setting.gainAllow),              SETTING_ATTR_VALID}, // 19 SETID_GAIN_ALLOW

    
    // Common part, system tuning    
    { &setting.queueMinDebugSrv,     sizeof(setting.queueMinDebugSrv),       SETTING_ATTR_VALID}, // 20 SETID_QUEUE_MIN_DEBUG_SRV
    { &setting.queueMinSettingSrv,   sizeof(setting.queueMinSettingSrv),     SETTING_ATTR_VALID}, // 21 SETID_QUEUE_MIN_SETTING_SRV
    { &setting.queueMinAudioSrv,     sizeof(setting.queueMinAudioSrv),       SETTING_ATTR_VALID}, // 22 SETID_QUEUE_MIN_AUDIO_SRV
    { &setting.queueMinLedsSrv,      sizeof(setting.queueMinLedsSrv),        SETTING_ATTR_VALID}, // 23 SETID_QUEUE_MIN_LEDS_SRV
    { &setting.queueMinBluetoothSrv, sizeof(setting.queueMinBluetoothSrv),   SETTING_ATTR_VALID}, // 24 SETID_QUEUE_MIN_BLUETOOTH_SRV
    { &setting.queueMinKeysSrv,      sizeof(setting.queueMinKeysSrv),        SETTING_ATTR_VALID}, // 25 SETID_QUEUE_MIN_KEYS_SRV
    { &setting.queueMinPowerSrv,     sizeof(setting.queueMinPowerSrv),       SETTING_ATTR_VALID}, // 26 SETID_QUEUE_MIN_POWER_SRV
    { &setting.queueMinAseTkSrv,     sizeof(setting.queueMinAseTkSrv),       SETTING_ATTR_VALID}, // 27 SETID_QUEUE_MIN_ASE_TK_SRV
    { &setting.poolMinSmall,         sizeof(setting.poolMinSmall),           SETTING_ATTR_VALID}, // 28 SETID_POOL_MIN_SMALL
    { &setting.poolMinMedium,        sizeof(setting.poolMinMedium),          SETTING_ATTR_VALID}, // 29 SETID_POOL_MIN_MEDIUM
    { &setting.poolMinLarge,         sizeof(setting.poolMinLarge),           SETTING_ATTR_VALID}, // 30 SETID_POOL_MIN_LARGE
    { &setting.dspParamPos,          sizeof(setting.dspParamPos),            SETTING_ATTR_VALID}, // 31 SETID_DSP_PARAM_POSITION
    { &setting.dspParamBass,         sizeof(setting.dspParamBass),           SETTING_ATTR_VALID}, // 32 SETID_DSP_PARAM_BASS
    { &setting.dspParamLoudness,     sizeof(setting.dspParamLoudness),       SETTING_ATTR_VALID}, // 33 SETID_DSP_PARAM_LOUDNESS
    { &setting.dspParamTreble,       sizeof(setting.dspParamTreble),         SETTING_ATTR_VALID}, // 34 SETID_DSP_PARAM_TREBLE
    { &setting.tempLevelSystem,      sizeof(setting.tempLevelSystem),        SETTING_ATTR_VALID}, // 35 SETID_TEMP_LEVEL_SYSTEM
    { &setting.reserve,              sizeof(setting.reserve),                SETTING_ATTR_VALID}, // 36 SETID_RESERVE_C6
    { &setting.audioSignalVolIn,     sizeof(setting.audioSignalVolIn),       SETTING_ATTR_VALID}, // 37 SETID_AUDIO_SIGNAL_VOL_INPUT
    { &setting.swPiuVer,             sizeof(setting.swPiuVer),               SETTING_ATTR_VALID}, // 38 SETID_SW_PIU_VER
    { &setting.swUblVer,             sizeof(setting.swUblVer),               SETTING_ATTR_VALID}, // 39 SETID_SW_UBL_VER

    //FS2 Temperature
    { &setting.tempWfAmpA,           sizeof(setting.tempWfAmpA),             SETTING_ATTR_VALID}, // 40 SETID_TEMP_WF_AMP_1
    { &setting.tempWfAmpB,           sizeof(setting.tempWfAmpB),             SETTING_ATTR_VALID}, // 41 SETID_TEMP_WF_AMP_2
    { &setting.tempWfSpk,            sizeof(setting.tempWfSpk),              SETTING_ATTR_VALID}, // 42 SETID_TEMP_WF_SPK
    { &setting.tempMidSpkA,          sizeof(setting.tempMidSpkA),            SETTING_ATTR_VALID}, // 43 SETID_TEMP_MID_SPK_A
    { &setting.tempMidSpkB,          sizeof(setting.tempMidSpkB),            SETTING_ATTR_VALID}, // 44 SETID_TEMP_MID_SPK_B
    { &setting.tempTwAmp,            sizeof(setting.tempTwAmp),              SETTING_ATTR_VALID}, // 45 SETID_TEMP_TW_AMP
    { &setting.audioSignalVolWfOut,  sizeof(setting.audioSignalVolWfOut),    SETTING_ATTR_VALID}, // 46 SETID_AUDIO_SIGNAL_VOL_WF_OUTPUT
    { &setting.audioSignalVolMidAOut,sizeof(setting.audioSignalVolMidAOut),  SETTING_ATTR_VALID}, // 47 SETID_AUDIO_SIGNAL_VOL_MID_A_OUTPUT
    { &setting.audioSignalVolMidBOut,sizeof(setting.audioSignalVolMidBOut),  SETTING_ATTR_VALID}, // 48 SETID_AUDIO_SIGNAL_VOL_MID_B_OUTPUT
    { &setting.audioSignalVolTwOut,  sizeof(setting.audioSignalVolTwOut),    SETTING_ATTR_VALID}, // 49 SETID_AUDIO_SIGNAL_VOL_TW_OUTPUT

    //FS2 Audio
    { &setting.dspCalGain1Wf,        sizeof(setting.dspCalGain1Wf),          SETTING_ATTR_VALID}, // 50 SETID_DSP_CAL_GAIN1_WF, woofer
    { &setting.dspCalGain2MidA,      sizeof(setting.dspCalGain2MidA),        SETTING_ATTR_VALID}, // 51 SETID_DSP_CAL_GAIN2_MID_A, middle A
    { &setting.dspCalGain3MidB,      sizeof(setting.dspCalGain3MidB),        SETTING_ATTR_VALID}, // 52 SETID_DSP_CAL_GAIN3_MID_B, middle B
    { &setting.dspCalGain4Tw,        sizeof(setting.dspCalGain4Tw),          SETTING_ATTR_VALID}, // 53 SETID_DSP_CAL_GAIN4_TW, tweeter

    { &setting.sensitivityLineIn,    sizeof(setting.sensitivityLineIn),      SETTING_ATTR_VALID},  // 54 SETID_SENSITIVITY_LINEIN
    { &setting.audioAuxInDb,         sizeof(setting.audioAuxInDb),           SETTING_ATTR_VALID},  // 55 SETID_AUDIO_AUX_IN_DB
    { &setting.audioSysInDb,         sizeof(setting.audioSysInDb),           SETTING_ATTR_VALID},  // 56 SETID_AUDIO_SYS_IN_DB
    { &setting.audioOutWfDb,         sizeof(setting.audioOutWfDb),           SETTING_ATTR_VALID},  // 57 SETID_AUDIO_OUT_WF_DB
    { &setting.audioOutMidaDb,       sizeof(setting.audioOutMidaDb),         SETTING_ATTR_VALID},  // 58 SETID_AUDIO_OUT_MID_A_DB
    { &setting.audioOutMidbDb,       sizeof(setting.audioOutMidbDb),         SETTING_ATTR_VALID},  // 69 SETID_AUDIO_OUT_MID_B_DB
    { &setting.audioOutTwDb,         sizeof(setting.audioOutTwDb),           SETTING_ATTR_VALID},  // 60 SETID_AUDIO_OUT_TW_DB
    
    { &setting.dspOverheatGainWf,       sizeof(setting.dspOverheatGainWf),        SETTING_ATTR_VALID},  // 61 SETID_DSP_OVERHEAT_GAIN_WF
    { &setting.dspOverheatGainMid,      sizeof(setting.dspOverheatGainMid),       SETTING_ATTR_VALID},  // 62 SETID_DSP_OVERHEAT_GAIN_MID
    { &setting.dspOverheatGainTw,       sizeof(setting.dspOverheatGainTw),        SETTING_ATTR_VALID},  // 63 SETID_DSP_OVERHEAT_GAIN_TW
    { &setting.dspOverheatCoilTempWf,   sizeof(setting.dspOverheatCoilTempWf),    SETTING_ATTR_VALID},  // 64 SETID_DSP_OVERHEAT_COIL_TEMP_WF
    { &setting.dspOverheatCoilTempMidA, sizeof(setting.dspOverheatCoilTempMidA),  SETTING_ATTR_VALID},  // 65 SETID_DSP_OVERHEAT_COIL_TEMP_MID_A
    { &setting.dspOverheatCoilTempMidB, sizeof(setting.dspOverheatCoilTempMidB),  SETTING_ATTR_VALID},  // 66 SETID_DSP_OVERHEAT_COIL_TEMP_MID_B
    { &setting.dspOverheatCoilTempTw,   sizeof(setting.dspOverheatCoilTempTw),    SETTING_ATTR_VALID},  // 67 SETID_DSP_OVERHEAT_COIL_TEMP_TW
    { &setting.dspChannel,              sizeof(setting.dspChannel),               SETTING_ATTR_VALID},  // 68 SETID_DSP_CHANNEL
    

};


#define SETT_PAGE_ROM_ADDR      0x0803E800 //= __USEREDIT_region_ROM2_start__
#define SETT_ELEMENT_MIN_SIZE   sizeof(uint32)
#define SETT_ELEMENT_MAX_SIZE   0x0100

static const tSettingRomMap settingRomMap[] =
{
#ifdef MCU_STORE_DSP_GAIN
    { SETID_DSP_CAL_GAIN1_WF,        SETT_PAGE_ROM_ADDR },
    { SETID_DSP_CAL_GAIN2_MID_A,     SETT_PAGE_ROM_ADDR+sizeof(setting.dspCalGain1Wf) },
    { SETID_DSP_CAL_GAIN3_MID_B,     SETT_PAGE_ROM_ADDR+sizeof(setting.dspCalGain1Wf)+sizeof(setting.dspCalGain2MidA) },
    { SETID_DSP_CAL_GAIN4_TW,        SETT_PAGE_ROM_ADDR+sizeof(setting.dspCalGain1Wf)+sizeof(setting.dspCalGain2MidA)+sizeof(setting.dspCalGain3MidB) },
#else
    { SETID_BOOT_REQUEST,            SETT_PAGE_ROM_ADDR },
    { SETID_GAIN_ALLOW,              SETT_PAGE_ROM_ADDR+sizeof(setting.dspCalGain1Wf) },
#endif    
    { SETID_QUEUE_MIN_DEBUG_SRV,     SETT_PAGE_ROM_ADDR+sizeof(setting.dspCalGain1Wf)+sizeof(setting.dspCalGain2MidA)+sizeof(setting.dspCalGain3MidB)+sizeof(setting.dspCalGain4Tw) },
    { SETID_QUEUE_MIN_SETTING_SRV,   SETT_PAGE_ROM_ADDR+sizeof(setting.dspCalGain1Wf)+sizeof(setting.dspCalGain2MidA)+sizeof(setting.dspCalGain3MidB)+sizeof(setting.dspCalGain4Tw) + SETT_ELEMENT_MIN_SIZE * 1},
    { SETID_QUEUE_MIN_AUDIO_SRV,     SETT_PAGE_ROM_ADDR+sizeof(setting.dspCalGain1Wf)+sizeof(setting.dspCalGain2MidA)+sizeof(setting.dspCalGain3MidB)+sizeof(setting.dspCalGain4Tw) + SETT_ELEMENT_MIN_SIZE * 2},
    { SETID_QUEUE_MIN_LEDS_SRV,      SETT_PAGE_ROM_ADDR+sizeof(setting.dspCalGain1Wf)+sizeof(setting.dspCalGain2MidA)+sizeof(setting.dspCalGain3MidB)+sizeof(setting.dspCalGain4Tw) + SETT_ELEMENT_MIN_SIZE * 3},
    { SETID_QUEUE_MIN_BLUETOOTH_SRV, SETT_PAGE_ROM_ADDR+sizeof(setting.dspCalGain1Wf)+sizeof(setting.dspCalGain2MidA)+sizeof(setting.dspCalGain3MidB)+sizeof(setting.dspCalGain4Tw) + SETT_ELEMENT_MIN_SIZE * 4},
    { SETID_QUEUE_MIN_KEYS_SRV,      SETT_PAGE_ROM_ADDR+sizeof(setting.dspCalGain1Wf)+sizeof(setting.dspCalGain2MidA)+sizeof(setting.dspCalGain3MidB)+sizeof(setting.dspCalGain4Tw) + SETT_ELEMENT_MIN_SIZE * 5},
    { SETID_QUEUE_MIN_POWER_SRV,     SETT_PAGE_ROM_ADDR+sizeof(setting.dspCalGain1Wf)+sizeof(setting.dspCalGain2MidA)+sizeof(setting.dspCalGain3MidB)+sizeof(setting.dspCalGain4Tw) + SETT_ELEMENT_MIN_SIZE * 6},
    { SETID_QUEUE_MIN_ASE_TK_SRV,    SETT_PAGE_ROM_ADDR+sizeof(setting.dspCalGain1Wf)+sizeof(setting.dspCalGain2MidA)+sizeof(setting.dspCalGain3MidB)+sizeof(setting.dspCalGain4Tw) + SETT_ELEMENT_MIN_SIZE * 7},
    { SETID_POOL_MIN_SMALL,          SETT_PAGE_ROM_ADDR+sizeof(setting.dspCalGain1Wf)+sizeof(setting.dspCalGain2MidA)+sizeof(setting.dspCalGain3MidB)+sizeof(setting.dspCalGain4Tw) + SETT_ELEMENT_MIN_SIZE * 8},
    { SETID_POOL_MIN_MEDIUM,         SETT_PAGE_ROM_ADDR+sizeof(setting.dspCalGain1Wf)+sizeof(setting.dspCalGain2MidA)+sizeof(setting.dspCalGain3MidB)+sizeof(setting.dspCalGain4Tw) + SETT_ELEMENT_MIN_SIZE * 9},
    { SETID_POOL_MIN_LARGE,          SETT_PAGE_ROM_ADDR+sizeof(setting.dspCalGain1Wf)+sizeof(setting.dspCalGain2MidA)+sizeof(setting.dspCalGain3MidB)+sizeof(setting.dspCalGain4Tw) + SETT_ELEMENT_MIN_SIZE * 10}
};



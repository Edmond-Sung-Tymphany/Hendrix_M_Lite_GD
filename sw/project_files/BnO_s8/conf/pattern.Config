/**
*  @file      LedSrv.Config
*  @brief     Config data for LED patterns, modified according to UI
*  @author    Wesley Lee
*  @date      15-Jul-2014
*  @copyright Tymphany Ltd.
*/

#include "LedDrv.h"

/***************************************************************************
 * led Pattern Config Data,

 * @param  periodTime       the repeated period time in ms
 * @para   onTime           the time of turning on LED (duty cycle),
 *                          it's only valid in Blink style
 *                          when onTime     == periodTime    , it will light up solid
 * @para   duration         the duration of the pattern,
 *                          set to ALWAYS_REPEAT if it's always repeated
 * @para   color            the color of LED
 * para    nextPattern      It's used to combine patterns. When one pattern is shown once,
 *                          led_srv will jump to show the next pattern which is defined
 *                          in this parameter. Set it to PAT_MAX_NUMBER to only show one pattern
 *                          check below "SYS_ON_CRITICAL_BAT_PAT" for example
 * @para   style            the style we need, defined in ePatStyle
 ***************************************************************************/

#define NOT_NEEDED  0
#define ALWAYS_REPEAT (~0)
/// 0x60 is the max color      value because of HW limit, so we get 30% from it to be the project max color     
#define HW_LIMIT_MAX_BRIGHTNESS 0x60
#define MAX_BRIGHTNESS (uint32)(HW_LIMIT_MAX_BRIGHTNESS * 0.3)
#define MAX_BRIGHTNESS_GREEN 0xFF
#define DIM_BRIGHTNESS 0x7

#define LED_OFF_LEVEL   0
#define LED_ON_LEVEL    MAX_BRIGHTNESS

const tPatternData patternConfig[] =
{

/* OFF_PATT */
   {
    .periodTime     = 2000,
    .onTime         = 1000,
    .duration       = ALWAYS_REPEAT,
    .color          = BLACK,
    .nextPattern    = PAT_MAX_NUMBER,
    .style          = SOLID_STYLE
    },

/* FADE_IN_0_5s_PATT */
   {
    .periodTime     = 2000,
    .onTime         = 2000,
    .duration       = 2000,
    .color          = WHITE,
    .nextPattern    = PAT_MAX_NUMBER,
    .style          = FADE_IN_STYLE
    },

/* FADE_OUT_0_5s_PATT */
    {
    .periodTime     = 2000,
    .onTime         = 2000,
    .duration       = 2000,
    .color          = WHITE,
    .nextPattern    = PAT_MAX_NUMBER,
    .style          = FADE_OUT_STYLE
    },
    
/* SOLID_ON_PATT_WHITE */
    {
    .periodTime     = 2000,
    .onTime         = 2000,
    .duration       = ALWAYS_REPEAT,
    .color          = WHITE,
    .nextPattern    = PAT_MAX_NUMBER,
    .style          = SOLID_STYLE
    },    

/* SOLID_ON_PATT_YELLOW */
    {
    .periodTime     = 2000,
    .onTime         = 2000,
    .duration       = ALWAYS_REPEAT,
    .color          = YELLOW,
    .nextPattern    = PAT_MAX_NUMBER,
    .style          = SOLID_STYLE
    },    

    
/* SOLID_ON_PATT_GREEN */
    {
    .periodTime     = 2000,
    .onTime         = 2000,
    .duration       = ALWAYS_REPEAT,
    .color          = GREEN,
    .nextPattern    = PAT_MAX_NUMBER,
    .style          = SOLID_STYLE
     },
 
/* SOLID_ON_PATT_BLUE */
    {
    .periodTime     = 2000,
    .onTime         = 2000,
    .duration       = ALWAYS_REPEAT,
    .color          = BLUE,
    .nextPattern    = PAT_MAX_NUMBER,
    .style          = BLINK_STYLE
    },

/* SOLID_ON_PATT_AMBER */
    {
    .periodTime     = 2000,
    .onTime         = 2000,
    .duration       = ALWAYS_REPEAT,
    .color          = AMBER,
    .nextPattern    = PAT_MAX_NUMBER,
    .style          = BLINK_STYLE,
    },
    
/* SOLID_ON_PATT_PURPLE */
    {
    .periodTime     = 2000,
    .onTime         = 2000,
    .duration       = ALWAYS_REPEAT,
    .color          = PURPLE,
    .nextPattern    = PAT_MAX_NUMBER,
    .style          = BLINK_STYLE
    },

/* SOLID_ON_PATT_RED */
    {
    .periodTime     = 2000,
    .onTime         = 2000,
    .duration       = ALWAYS_REPEAT,
    .color          = RED,
    .nextPattern    = PAT_MAX_NUMBER,
    .style          = BLINK_STYLE
    },

/* BLINKING_PATT_GREEN */
    {
    .periodTime     = 1000,
    .onTime         = 500,
    .duration       = 4000,
    .color          = GREEN,
    .nextPattern    = PAT_MAX_NUMBER,
    .style          = BLINK_STYLE
    },

/* BLINKING_PATT_BLUE */
    {
    .periodTime     = 1000,
    .onTime         = 500,
    .duration       = 4000,
    .color          = BLUE,
    .nextPattern    = PAT_MAX_NUMBER,
    .style          = BLINK_STYLE
    },

/* BLINKING_PATT_AMBER */
    {
    .periodTime     = 1000,
    .onTime         = 500,
    .duration       = 4000,
    .color          = AMBER,
    .nextPattern    = PAT_MAX_NUMBER,
    .style          = BLINK_STYLE
    },

/* BLINKING_PATT_PURPLE */
    {
    .periodTime     = 1000,
    .onTime         = 500,
    .duration       = 4000,
    .color          = PURPLE,
    .nextPattern    = PAT_MAX_NUMBER,
    .style          = BLINK_STYLE,
    },

/* BLINKING_PATT_RED */
    {
    .periodTime     = 1000,
    .onTime         = 500,
    .duration       = 4000,
    .color          = RED,
    .nextPattern    = PAT_MAX_NUMBER,
    .style          = BLINK_STYLE
    },

/* FAST_BLINKING_PATT_GREEN */
    {
    .periodTime     = 500,
    .onTime         = 250,
    .duration       = 2000,
    .color          = GREEN,
    .nextPattern    = PAT_MAX_NUMBER,
    .style          = BLINK_STYLE
    },

/* FAST_BLINKING_PATT_BLUE */
    {
    .periodTime     = 500,
    .onTime         = 250,
    .duration       = 2000,
    .color          = BLUE,
    .nextPattern    = PAT_MAX_NUMBER,
    .style          = BLINK_STYLE
    },

/* FAST_BLINKING_PATT_AMBER */
    {
    .periodTime     = 500,
    .onTime         = 250,
    .duration       = 2000,
    .color          = AMBER,
    .nextPattern    = PAT_MAX_NUMBER,
    .style          = BLINK_STYLE
    },

/* FAST_BLINKING_PATT_PURPLE */
    {
    .periodTime     = 500,
    .onTime         = 250,
    .duration       = 2000,
    .color          = PURPLE,
    .nextPattern    = PAT_MAX_NUMBER,
    .style          = BLINK_STYLE
    },

/* VERY_FAST_BLINKING_PATT */
    {
    .periodTime     = 200,
    .onTime         = 100,
    .duration       = 200,
    .color          = PREVIOUS_COLOR,
    .nextPattern    = PAT_MAX_NUMBER,
    .style          = BLINK_STYLE
    },

/* ON_PERIOD_PATT_GREEN */
    {
    .periodTime     = 2000,
    .onTime         = 2000,
    .duration       = 2000,
    .color          = GREEN,
    .nextPattern    = PAT_MAX_NUMBER,
    .style          = SOLID_STYLE
    },

/* ON_PERIOD_PATT_RED */
    {
    .periodTime     = 2000,
    .onTime         = 2000,
    .duration       = 2000,
    .color          = RED,
    .nextPattern    = PAT_MAX_NUMBER,
    .style          = SOLID_STYLE
    },


/* SLOW_BLINKING_PATT_AMBER */
    {
    .periodTime     = 1000,
    .onTime         = 500,
    .duration       = ALWAYS_REPEAT,
    .color          = AMBER,
    .nextPattern    = PAT_MAX_NUMBER,
    .style          = BLINK_STYLE
    },

/* FACTORY_RESET_PATT_1 */
    {
    .periodTime     = 2000,
    .onTime         = 2000,
    .duration       = 2000,
    .color          = RED,
    .nextPattern    = FACTORY_RESET_PATT_2,
    .style          = FADE_IN_STYLE
    },
    
/* FACTORY_RESET_PATT_2 */
    {
    .periodTime     = 2000,
    .onTime         = 2000,
    .duration       = 2000,
    .color          = RED,
    .nextPattern    = FACTORY_RESET_PATT_3,
    .style          = SOLID_STYLE
    },

/* FACTORY_RESET_PATT_3 */
    {
    .periodTime     = 2000,
    .onTime         = 2000,
    .duration       = 2000,
    .color          = RED,
    .nextPattern    = PAT_MAX_NUMBER,
    .style          = FADE_OUT_STYLE
    },

/* EXIT_IR_LEARNING_MODE_PATT */
    {
    .periodTime     = 4000,
    .onTime         = 4000,
    .duration       = 4000,
    .color          = RED,
    .nextPattern    = PAT_MAX_NUMBER,
    .style          = FADE_OUT_STYLE
    },


};

/* the color      value for real HW limit, adjust according to HW*/
#define MAX_BRIGHTNESS_HW_LIMIT  32
/* the color      value generated in the LED_FADING_DATA array*/
#define MAX_BRIGHTNESS_IN_ARRAY_DATA  100


/* choose one of these fading macro*/
#define SINE_FADING_EANBLE
//#define LINEAR_FADING_ENABLE

#if (defined SINE_FADING_EANBLE) && (defined LINEAR_FADING_ENABLE)
#error "can NOT enable SINE and LINEAR at the same time"
#endif

#ifdef SINE_FADING_EANBLE
const uint8 LED_FADING_DATA[]=
{
      0,   1,   2,   4,   5,   6,   7,   9,
     10,  11,  12,  13,  15,  16,  17,  18,
     20,  21,  22,  23,  24,  25,  27,  28,
     29,  30,  31,  33,  34,  35,  36,  37,
     38,  39,  41,  42,  43,  44,  45,  46,
     47,  48,  49,  50,  51,  52,  53,  55,
     56,  57,  58,  59,  60,  61,  62,  62,
     63,  64,  65,  66,  67,  68,  69,  70,
     71,  72,  72,  73,  74,  75,  76,  77,
     77,  78,  79,  80,  80,  81,  82,  82,
     83,  84,  84,  85,  86,  86,  87,  88,
     88,  89,  89,  90,  90,  91,  91,  92,
     92,  93,  93,  94,  94,  95,  95,  95,
     96,  96,  96,  97,  97,  97,  98,  98,
     98,  98,  99,  99,  99,  99,  99,  99,
    100, 100, 100, 100, 100, 100, 100, 100,
};
#endif

//linear data
#ifdef LINEAR_FADING_ENABLE
const uint8 LED_FADING_DATA[]=
{
      1,   2,   3,   4,   5,   6,   7,   8,
      9,  10,  11,  12,  13,  14,  15,  16,
     17,  18,  19,  20,  21,  22,  23,  24,
     25,  26,  27,  28,  29,  30,  31,  32,
     33,  34,  35,  36,  37,  38,  39,  40,
     41,  42,  43,  44,  45,  46,  47,  48,
     49,  50,  51,  52,  53,  54,  55,  56,
     57,  58,  59,  60,  61,  62,  63,  64,
     65,  66,  67,  68,  69,  70,  71,  72,
     73,  74,  75,  76,  77,  78,  79,  80,
     81,  82,  83,  84,  85,  86,  87,  88,
     89,  90,  91,  92,  93,  94,  95,  96,
     97,  98,  99, 100,
};
#endif



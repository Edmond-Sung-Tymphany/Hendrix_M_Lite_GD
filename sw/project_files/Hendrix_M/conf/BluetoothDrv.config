/**
*  @file      Bluetooth.config
*  @brief     Config data for ROM base BT module command
*  @author    Johnny Fan
*  @date      15-May-2014
*  @copyright Tymphany Ltd.
*/


//#define BT_FASTER_CMD_STATE


/*****************************************************************
*
*  time for each press, should config it according to the pskey config of BT module
*
****************************************************************/
/* new config for CSRA64215 */
#define SHORT_PRESS_TIME_MS                   200
#define LONG_PRESS_TIME_MS                    650
#define VERY_LONG_PRESS_TIME_MS               1100
#define VERYVERY_LONG_PRESS_TIME_MS           2100

#define DOUBLE_PRESS_TIME_MS                  100
#define DOUBLE_PRESS_INTERAL_TIME_MS          50

#define TRIPLE_PRESS_TIME_MS                  50
#define TRIPLE_PRESS_INTERAL_TIME_MS          40

/* change the START_TIME from 20ms to 10ms, to allow tolerance */
/* change the scale to 215ms for tolerance*/
#define BT_STATE_START_TIME_MS 10
/*each step is 100ms,and the detected result have 30ms offset,
   using 30ms in order to make the result start from 0 to aline the status map. */
#define BT_STATE_STEP_OFFSET_TIME_MS        -10
#define BT_STATE_STEP_TIME_MS  200
/*
led0
state           setting time in BT
PAIRING         50
connectable     250
connected       450
streaming       650
led1
linklost        250
linklost off    450
*/

/*****************************************************************
*
*  config the press type and output channel for each command
*
****************************************************************/
const eBtStatus tBtLed0StatusMap[]=
{
    //BT_MAX_STA,  // fit it for none state
    BT_DISCOVERABLE_STA,
    BT_CONNECTABLE_STA,
    BT_CONNECTED_STA,
    BT_STREAMING_A2DP_STA,

};
const uint8_t BtLed0StaMaxNum = ArraySize(tBtLed0StatusMap);

const eBtStatus tBtLed1StatusMap[]=
{
    //BT_MAX_STA,  // fit it for none state
    BT_GET_VERION_STA,
    BT_LINKLOST_STA,
    BT_LINKLOST_OFF_STA,
    BT_LINKLOST_OFF_STA, //workaround for [IN:013673]
};
const uint8_t BtLed1StaMaxNum = ArraySize(tBtLed1StatusMap);

#define BT_POWER_ON_PRESS_TIME_MS             (240)
#define BT_POWER_OFF_PRESS_TIME_MS            (640)
//#define BT_POWER_OFF_WAITING_TIME_MS          (2000)
#define BT_POWER_OFF_WAITING_TIME_MS          (100) //Modified by Nick to spped up the re-powering on time

#define AUDIO_CUE_OFFSET                      (0)
#define BT_AUDIO_CUE_NULL                     (0)
#define AUDIO_CUE_POST_OFFSET                 (0)

#define BT_AUDIO_CUE_PAIRING_TIME             (1700+AUDIO_CUE_OFFSET+AUDIO_CUE_POST_OFFSET)
#define BT_AUDIO_CUE_PAIRING_SUCESS_TIME      (1000+AUDIO_CUE_OFFSET+AUDIO_CUE_POST_OFFSET)
#define BT_AUDIO_CUE_PAIRING_FAILED_TIME      (1500+AUDIO_CUE_OFFSET+AUDIO_CUE_POST_OFFSET)


#define BT_AUDIO_CUE_BAT_CHARGING_TIME        (1200+AUDIO_CUE_OFFSET+AUDIO_CUE_POST_OFFSET)
#define BT_AUDIO_CUE_BAT_LOW_TIME             (1100+AUDIO_CUE_OFFSET+AUDIO_CUE_POST_OFFSET)
#define BT_AUDIO_CUE_BAT_FULL_TIME            (1000+AUDIO_CUE_OFFSET+AUDIO_CUE_POST_OFFSET)

#define BT_AUDIO_CUE_TEST_TIME                (4500+AUDIO_CUE_OFFSET+AUDIO_CUE_POST_OFFSET)

#define BT_AUDIO_CUE_PLAY_TIME                (500+AUDIO_CUE_OFFSET+AUDIO_CUE_POST_OFFSET)
#define BT_AUDIO_CUE_PAUSE_TIME               (500+AUDIO_CUE_OFFSET+AUDIO_CUE_POST_OFFSET)
#define BT_AUDIO_CUE_BACKWARD_TIME            (1000+AUDIO_CUE_OFFSET+AUDIO_CUE_POST_OFFSET)
#define BT_AUDIO_CUE_FORWARD_TIME             (1000+AUDIO_CUE_OFFSET+AUDIO_CUE_POST_OFFSET)


#ifdef HAS_BT_CUE_CMD
#define BT_CUE_MAX          (BT_COMMON_MAX_CMD-BT_CUE_MIN_CMD)
#endif

#define BT_POWER_PIN_ID   BT_OUTPUT1

/*****************************************************************
*
*  config the press type and output channel for each command
*
****************************************************************/
/*
{BT_OUTPUT1, IO_PORT_F,  IO_BIT_6,  GPIO_DIGITAL_OUTPUT,  GPIO_DEFAULT_OUT_LOW,  ODC_DISABLE},  // PF6  VREG_ENABLE    BT_PWR_EN
{BT_OUTPUT2, IO_PORT_A, IO_BIT_15,  GPIO_DIGITAL_OUTPUT,  GPIO_DEFAULT_OUT_LOW,  ODC_DISABLE}, // PA15  PIO1  BT_UART_RX
{BT_OUTPUT3, IO_PORT_B,  IO_BIT_5,  GPIO_DIGITAL_OUTPUT,  GPIO_DEFAULT_OUT_LOW,  ODC_DISABLE}, //PB5   PIO8   B2M-GPIO3
{BT_OUTPUT4, IO_PORT_B,  IO_BIT_4,  GPIO_DIGITAL_OUTPUT,  GPIO_DEFAULT_OUT_LOW,  ODC_DISABLE}, //PB4   PIO21  B2M-GPIO4
{BT_OUTPUT5, IO_PORT_B,  IO_BIT_3,  GPIO_DIGITAL_OUTPUT,  GPIO_DEFAULT_OUT_LOW,  ODC_DISABLE}, //PB3   PIO18  B2M-GPIO5
*/
const tBtCmdstruct BT_CMD_CONFIG[BT_COMMON_MAX_CMD]=
{
    {BT_OUTPUT5,    BT_SINGLE_PRESS},       // BT_ENTER_PAIRING_CMD,
    {BT_OUTPUT2,    BT_LONG_PRESS},         // BT_ENTER_CONNECTABLE_CMD
    {BT_OUTPUT2,    BT_VLONG_PRESS},        // BT_RESET_PAIR_LIST_CMD, Place holder

    {BT_OUTPUT2,    BT_SINGLE_PRESS},       // BT_ANSWER_CMD, use for qury BT version
    {BT_OUTPUT2,    BT_LONG_PRESS},         // BT_REJECT_CMD,  No use, just for fit
    {BT_OUTPUT2,    BT_VLONG_PRESS},        // BT_CANCEL_END_CMD  No use, just for fit

    {BT_OUTPUT3,    BT_VLONG_PRESS},        // BT_RECONNECT_CMD  reconnect paired device
    {BT_OUTPUT4,    BT_VLONG_PRESS},       // BT_AVRCP_PAUSE_CMD,
    {BT_OUTPUT4,    BT_VVLONG_PRESS},       // BT_AVRCP_PLAY_CMD,
#ifdef HAS_BT_SKIP_CMD
    {BT_OUTPUT1,    BT_SINGLE_PRESS},       // BT_AVRCP_SKIP_FORWARD_CMD,
    {BT_OUTPUT1,    BT_DOUBLE_PRESS},       // BT_AVRCP_SKIP_BACKWORD_CMD,
#endif

    {BT_OUTPUT3,    BT_LONG_PRESS},         // BT_DISCONNECT_CMD  disconnect all connections
    {BT_OUTPUT4,    BT_LONG_PRESS},         // GAIA User 3, Connected  ->juse fit the command command no use
    {BT_OUTPUT4,    BT_VLONG_PRESS},        // BT_TEST_MODE_CMD, Test Mode Audio
    {BT_OUTPUT4,    BT_DOUBLE_PRESS},       // BT_QUERY_STATUS_CMD,Query bt status
#ifdef HAS_BT_PWR_ON_CONFIRM
    {BT_OUTPUT1,    BT_HOLD_LOW},           // BT_PWR_ON_CONFIRM_CMD,
#endif
#ifdef HAS_BT_CUE_CMD
    {BT_OUTPUT4,    BT_SINGLE_PRESS},       // BT_PAIRING_START_CUE_CMD,
    {BT_OUTPUT1,    BT_SINGLE_PRESS},         // BT_PAIRING_SUCCESS_CUE_CMD,
    {BT_OUTPUT3,    BT_SINGLE_PRESS},       // BT_PAIRING_FAIL_CUE_CMD,
    {BT_OUTPUT5,    BT_VLONG_PRESS},        // BT_PLAY_CUE_CMD,
    {BT_OUTPUT4,    BT_VVLONG_PRESS},       // BT_PAUSE_CUE_CMD,
    {BT_OUTPUT5,    BT_VVLONG_PRESS},       // BT_SKIP_BACKWARDS_CUE_CMD,
    {BT_OUTPUT4,    BT_SINGLE_PRESS},       // BT_SKIP_FORWARDS_CUE_CMD,
    {BT_OUTPUT4,    BT_LONG_PRESS},        // BT_CHARGING_CUE_CMD,
    {BT_OUTPUT5,    BT_VLONG_PRESS},        // BT_BAT_LOW_CUE_CMD,
    {BT_OUTPUT5,    BT_VVLONG_PRESS},       // BT_BAT_FULL_CUE_CMD,
    {BT_OUTPUT2,    BT_DOUBLE_PRESS},       // BT_TEST_CUE_CMD,
#endif
#ifdef HAS_BT_BATT_CMD
    {BT_OUTPUT3, BT_LONG_PRESS  },
    {BT_OUTPUT4, BT_VLONG_PRESS },
    {BT_OUTPUT4, BT_VVLONG_PRESS},
    {BT_OUTPUT2, BT_TRIPLE_PRESS},
    {BT_OUTPUT2, BT_VVLONG_PRESS},
    {BT_OUTPUT3, BT_VVLONG_PRESS},
#endif

};



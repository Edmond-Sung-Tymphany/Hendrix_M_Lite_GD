/**
*  @file      PowerDrv_light.cofig
*  @brief     Config data for power driver light
*  @author    Alexey
*  @date      08-Jun-2015
*  @copyright Tymphany Ltd.
*/

#include "limits.h" //UINT_MAX
#include "deviceTypes.h"


#ifndef POWERDRV_LIGHT_CONFIG
#define POWERDRV_LIGHT_CONFIG


/***************************************************************************
* MACRO DEFINITION
***************************************************************************/
#define     INITIAL_STEP             0
#define     WAKE_UP_STABLE_TIME_MS   800

/***************************************************************************
* ADC config for power
***************************************************************************/
#define ADC_REFERENCE_mVOLT  3300    // mcu voltage 3.3V
#define ADC_PRECISION        4095
#define ADC_TO_mVOLT(adc)  ((uint16) (adc* ADC_REFERENCE_mVOLT/ADC_PRECISION))


/***************************************************************************
* ADC  for HW version
***************************************************************************/
#ifdef HAS_HW_VERSION_TAG

#define HW_THRESHOLD_OFFSET        40
// ES :  pull-up:1K, pull-down:47k, Voltage=3.23V, use mV as threshold
#define HW_ES_THRESHOLD            3230
// EVT : pull-up:3K, pull-down:47k, Voltage=3.10V
#define HW_EVT_THRESHOLD           3100
//DVT : pull-up:10K, pull-down:47k, Voltage=2.72V
#define HW_DVT_THRESHOLD           2720
// MV : pull-up:20K, pull-down:47k, Voltage=2.31V
#define HW_MV_THRESHOLD            2310

#endif

/***************************************************************************
* Battery ADC
***************************************************************************/

#define SYS_BATTERY_SAMPLE_NUM      (20)        /* (20)*50 = 1 sec window*/
#define SYS_BATTERY_AVERAGE_NUM     (20)        /* 1 sec window */

/***************************************************************************
* Battery Higest Filter confige
***************************************************************************/
// To Do: fit the confige base on the target board
#define BATT_FILTER_LEN     (6)
#define BATT_EJECT_mVOLT    (100)
#define OUT_OF_RANGE_ACCEPT_NUMBER (4)
#define SAMPLE_RANGE_mV     (100)

#define DC_CHG_LOW_LV_QCHG_TIME_CNT  6000           //6000 (10min)
#define DC_CHG_PERCENT_TIME_CNT      7200          //14400  //(12min)
#define DC_CHG_MAX_TIME_CNT          12000         //86400  //(60min)
#define DC_CHG_LOW_LV_QUICK_CHG      15
#define DC_CHG_LOW_INIT_LV           10
#define DC_CHG_PERCENTAGE            5
#define DC_CHG_HIGEST_CAP_LIMIT      90
#define DC_CHG_MAX_CAP               100

#define SMOOTH_OLD_RISE_SAMPLE_COUNT        4
#define SMOOTH_CURR_RISE_SAMPLE_COUNT 2
#define SMOOTH_RISE_ALL_COUNT       (SMOOTH_OLD_RISE_SAMPLE_COUNT+SMOOTH_CURR_RISE_SAMPLE_COUNT)

#define SMOOTH_OLD_DROP_SAMPLE_COUNT        2
#define SMOOTH_CURR_DROP_SAMPLE_COUNT 4
#define SMOOTH_DROP_ALL_COUNT       (SMOOTH_OLD_DROP_SAMPLE_COUNT+SMOOTH_CURR_DROP_SAMPLE_COUNT)

#ifdef HENDRIX_L
#define BATT_VOLTAGE_LEVEL_FULL  (3140)     // set battary full voltage here;
#define BATT_VOLTAGE_LEVEL_95   (3032)
#define BATT_VOLTAGE_LEVEL_90   (3006)
#define BATT_VOLTAGE_LEVEL_85   (2989)
#define BATT_VOLTAGE_LEVEL_80   (2958)
#define BATT_VOLTAGE_LEVEL_75   (2916)
#define BATT_VOLTAGE_LEVEL_70   (2878)
#define BATT_VOLTAGE_LEVEL_65   (2841)
#define BATT_VOLTAGE_LEVEL_60   (2804)
#define BATT_VOLTAGE_LEVEL_55   (2773)
#define BATT_VOLTAGE_LEVEL_50   (2755)
#define BATT_VOLTAGE_LEVEL_45   (2745)
#define BATT_VOLTAGE_LEVEL_40   (2735)
#define BATT_VOLTAGE_LEVEL_35   (2725)
#define BATT_VOLTAGE_LEVEL_30   (2715)
#define BATT_VOLTAGE_LEVEL_25   (2705)
#define BATT_VOLTAGE_LEVEL_20   (2670)
#define BATT_VOLTAGE_LEVEL_15   (2642)
#define BATT_VOLTAGE_LEVEL_10   (2601)
#define BATT_VOLTAGE_LEVEL_5    (2511)
#define BATT_VOLTAGE_LEVEL_0    (2405)


#define ENABLE_POWERINGUP_FROM_CRITICAL       2390
#define ENABLE_CHGPOWERINGUP_FROM_CRITICAL    2725

#endif


#ifdef HENDRIX_M
#define BATT_VOLTAGE_LEVEL_FULL  (3083)     // set battary full voltage here;
#define BATT_VOLTAGE_LEVEL_95    (3008)
#define BATT_VOLTAGE_LEVEL_90   (2934)
#define BATT_VOLTAGE_LEVEL_85   (2910)
#define BATT_VOLTAGE_LEVEL_80   (2896)
#define BATT_VOLTAGE_LEVEL_75   (2876)
#define BATT_VOLTAGE_LEVEL_70   (2857)
#define BATT_VOLTAGE_LEVEL_65   (2824)
#define BATT_VOLTAGE_LEVEL_60   (2792)
#define BATT_VOLTAGE_LEVEL_55   (2778)
#define BATT_VOLTAGE_LEVEL_50   (2744)
#define BATT_VOLTAGE_LEVEL_45   (2724)
#define BATT_VOLTAGE_LEVEL_40   (2690)
#define BATT_VOLTAGE_LEVEL_35   (2678)
#define BATT_VOLTAGE_LEVEL_30   (2656)
#define BATT_VOLTAGE_LEVEL_25   (2625)
#define BATT_VOLTAGE_LEVEL_20   (2575)
#define BATT_VOLTAGE_LEVEL_15   (2545)
#define BATT_VOLTAGE_LEVEL_10   (2518)
#define BATT_VOLTAGE_LEVEL_5    (2381)
#define BATT_VOLTAGE_LEVEL_0    (2350)

#define ENABLE_POWERINGUP_FROM_CRITICAL       2340
#define ENABLE_CHGPOWERINGUP_FROM_CRITICAL    2725

#endif

#ifdef HENDRIX_Lite
#define BATT_VOLTAGE_LEVEL_FULL  (3083)     // set battary full voltage here;
#define BATT_VOLTAGE_LEVEL_95    (3077)
#define BATT_VOLTAGE_LEVEL_90   (3033)
#define BATT_VOLTAGE_LEVEL_85   (3013)
#define BATT_VOLTAGE_LEVEL_80   (2993)
#define BATT_VOLTAGE_LEVEL_75   (2968)
#define BATT_VOLTAGE_LEVEL_70   (2943)
#define BATT_VOLTAGE_LEVEL_65   (2918)
#define BATT_VOLTAGE_LEVEL_60   (2893)
#define BATT_VOLTAGE_LEVEL_55   (2863)
#define BATT_VOLTAGE_LEVEL_50   (2833)
#define BATT_VOLTAGE_LEVEL_45   (2803)
#define BATT_VOLTAGE_LEVEL_40   (2773)
#define BATT_VOLTAGE_LEVEL_35   (2743)
#define BATT_VOLTAGE_LEVEL_30   (2713)
#define BATT_VOLTAGE_LEVEL_25   (2670)
#define BATT_VOLTAGE_LEVEL_20   (2643)
#define BATT_VOLTAGE_LEVEL_15   (2605)
#define BATT_VOLTAGE_LEVEL_10   (2596)
#define BATT_VOLTAGE_LEVEL_5    (2567)
#define BATT_VOLTAGE_LEVEL_0    (2350)

#define ENABLE_POWERINGUP_FROM_CRITICAL       2340
#define ENABLE_CHGPOWERINGUP_FROM_CRITICAL    2725

#endif

#define ZERO_BATTERY_THERSHOLD                     400
#define NO_BATTERY_NTC_THERSHOLD                   3180 //remove battery is 3196 ; ntc -40 220k is 3066

/***************************************************************************
* Temperature
***************************************************************************/
#ifdef HAS_BATTERY_NTC
// To Do NTC value need to update
#define NTC_MINUS_20          (2847)
#define NTC_MINUS_15          (2740)
#define NTC_MINUS_10          (2617)
#define NTC_0                 (2334)
#define NTC_5                 (2178)
#define NTC_25                (1530)
#define NTC_40                (1102)
#define NTC_45                (980)
#define NTC_50                (869)
#define NTC_55                (770)
#define NTC_60                (681)

#define NTC_PRINT_COUNT       70

#define NTC_CHARGING_OVERHEAT_THRESHOLD          (NTC_45)
#define NTC_CHARGING_OVERHEAT_RETURN_THRESHOLD   (NTC_40)
#define NTC_CHARGING_SUPERCOOL_THRESHOLD         (NTC_0)
#define NTC_CHARGING_SUPERCOOL_RETURN_THRESHOLD  (NTC_5)

#define NTC_OVERHEAT_THRESHOLD                   (NTC_60)
#define NTC_OVERHEAT_RETURN_NORMAL_THRESHOLD     (NTC_55)
#define NTC_SERIOUS_HIGH_THRESHOLD               (NTC_50)
#define NTC_SERIOUS_HIGH_RETURN_THRESHOLD        (NTC_45)
#define NTC_SUBNORMAL_THERSHOLD                  (NTC_0)
#define NTC_SUBNORMAL_RETURN_THERSHOLD           (NTC_5)
#define NTC_SUPERCOOL_THRESHOLD                  (NTC_MINUS_20)
#define NTC_SUPERCOOL_RETURN_THRESHOLD           (NTC_MINUS_15)

#define NTC_ROOM_TEMPERATURE                     (NTC_25)

#define PWR_NTC_SAMPLE_NUM      (3)        /* (3)*1500ms = 4.5 sec window*/
#define PWR_NTC_AVERAGE_NUM     (3)        /* 4.5 sec window */
#endif

/***************************************************************************
 * DC input Config
***************************************************************************/

#ifdef HAS_DC_IN

#ifdef HENDRIX_Lite

#define DC_IN_ADC_THRESHOLD     (2767)          /* 2.23V,  */

#endif

#ifdef HENDRIX_L

#define DC_IN_ADC_THRESHOLD     (2767)          /* 2.23V,  */

#endif


#ifdef HENDRIX_M

#define DC_IN_ADC_THRESHOLD     (2172)          /* 1.7V, DC=11V */

#endif
#endif

#define POWER_STAGE1_DELAY (100)
#define POWER_STAGE2_DELAY (100)
#define POWER_STAGE3_DELAY (20)
#define POWER_STAGE4_DELAY (100)

#define POWER_ADC_UPDATE_PERIOD (100)


#define BT_RESET_PIN_ENABLE

// to do try to find suitable time out
#define PWR_SW_DEBOUNCE_TIME_MS     (200)

/***************************************************************************
 * GPIO Operation
 ***************************************************************************/

#define     SYS_PWR_ON                GPIO_OUT_PWR_EN
#define     SYS_PWR_ENABLE(x)         GpioDrv_SetBit(&(x),SYS_PWR_ON)
#define     SYS_PWR_DISABLE(x)        GpioDrv_ClearBit(&(x),SYS_PWR_ON)

#ifdef HAS_POWER_SWITCH_KEY
#define     PWR_SW_KEY                  GPIO_IN_POWER_KEY
#define     IS_PWR_SW_KEY_ON(x)         GpioDrv_ReadBit(&(x), PWR_SW_KEY)
#define     PWR_SW_ON_LEVEL             0
#else
#define     IS_PWR_SW_KEY_ON(x)
#endif

#ifdef  HAS_DSP_EN
#define     DSP_PWR_ON                        GPIO_OUT_DSP_3V3
#define     DSP_PWR_ENABLE(x)         GpioDrv_SetBit(&(x),DSP_PWR_ON);TYMQP_LOG(NULL,"DSP ENABLE");
#define     DSP_PWR_DISABLE(x)        GpioDrv_ClearBit(&(x),DSP_PWR_ON);TYMQP_LOG(NULL,"DSP DISABLE");
#else
#define     DSP_PWR_ENABLE(x)
#define     DSP_PWR_DISABLE(x)
#endif


/* IO expender GPIO Operation  */
#ifdef HAS_EXT_CHARGE_CTRL
#ifdef HAS_PWR_IO_EXPANDER
#define     EX_CHG_CTRL             IOE_OUT_EX_CHG_CTL
#define     EX_CHG_CTRL_ENABLE(x)         PowerDrv_IoeSetByID(&(x),EX_CHG_CTRL)
#define     EX_CHG_CTRL_DISABLE(x)        PowerDrv_IoeClearByID(&(x),EX_CHG_CTRL)
#else
#define     EX_CHG_CTRL             GPIO_OUT_EX_CHG_CTL
#define     EX_CHG_CTRL_ENABLE(x)         GpioDrv_SetBit(&(x),EX_CHG_CTRL)
#define     EX_CHG_CTRL_DISABLE(x)         GpioDrv_ClearBit(&(x),EX_CHG_CTRL)
#endif
#endif

#ifdef HAS_BAT_CHG_CURRENT_SELECT
#ifdef HAS_PWR_IO_EXPANDER              // ioe pin high --->  1.5A    ioe pin low ---> 2.5A
#define     BAT_CHG_CUR_SEL              IOE_OUT_ICHG_SEL
#define     BAT_CHG_CUR_LOW(x)         PowerDrv_IoeSetByID(&(x),BAT_CHG_CUR_SEL)
#define     BAT_CHG_CUR_HIGH(x)         PowerDrv_IoeClearByID(&(x),BAT_CHG_CUR_SEL)
#endif
#else
#define     BAT_CHG_CUR_LOW(x)
#define     BAT_CHG_CUR_HIGH(x)
#endif


#ifdef HAS_BAT_CHARGE
#ifdef HAS_PWR_IO_EXPANDERx
#define     BAT_CHG_ON              IOE_OUT_BAT_CHG_EN
#define     BAT_CHG_ENABLE(x)         PowerDrv_IoeSetByID(&(x),BAT_CHG_ON);TYMQP_LOG(NULL,"CHG ENABLE");
#define     BAT_CHG_DISABLE(x)         PowerDrv_IoeClearByID(&(x),BAT_CHG_ON);TYMQP_LOG(NULL,"CHG DISABLE");
#else
#define     BAT_CHG_ON              GPIO_OUT_BAT_CHG_EN
#define     BAT_CHG_ENABLE(x)         GpioDrv_ClearBit(&(x),BAT_CHG_ON);TYMQP_LOG(NULL,"CHG_ENABLE");
#define     BAT_CHG_DISABLE(x)        GpioDrv_SetBit(&(x),BAT_CHG_ON);TYMQP_LOG(NULL,"CHG_DISABLE");
#endif

#define  GPIO_CHG_STAT1           GPIO_IN_BAT_CHG_STATUS1
#define  GET_CHARGER_STAT1(x)     GpioDrv_ReadBit(&x,GPIO_CHG_STAT1)
#define  GPIO_CHG_STAT2           GPIO_IN_BAT_CHG_STATUS2
#define  GET_CHARGER_STAT2(x)     GpioDrv_ReadBit(&x,GPIO_CHG_STAT2)

/****************************************************************************
  state1(CHGOK):CHGOK is used to indicate the status of the charge cycle.
  state2(ACOK):The ACOK  pin  pulls  low when an input voltage is greater than battery
               voltage 300mV and over the under voltage lockout threshold.
*****************************************************************************/
#define  CHARGE_IN_PROCESS        0x00      // state1: voltage Low (charger open-drain on)
// state2: voltage Low (charger open-drain on)

#define  CHARGE_COMPLETE          0x01      // state1: voltage High (charger open-drain off)
// state2: voltage Low (charger open-drain on)

#define  GPIO_BAT_PG              GPIO_IN_BAT_PG
#define  IS_CHG_READY(x)          GpioDrv_ReadBit(&x,GPIO_BAT_PG)
#define  CHG_READY                FALSE             // PG low means charger chip have vcc to work;
#else
#define     BAT_CHG_ENABLE(x)
#define     BAT_CHG_DISABLE(x)
#define     GET_CHARGER_STAT1(x)
#define     GET_CHARGER_STAT2(x)
#define     IS_CHG_READY(x)
#endif

#ifdef HAS_BOOST_ENABLE
#ifdef HAS_PWR_IO_EXPANDERx
#define     BOOST_ON                IOE_OUT_BOOST_EN
#define     BOOST_ENABLE(x)         PowerDrv_IoeSetByID(&(x),BOOST_ON);TYMQP_LOG(NULL,"BOOST ENABLE");
#define     BOOST_DISABLE(x)         PowerDrv_IoeClearByID(&(x),BOOST_ON);TYMQP_LOG(NULL,"BOOST DISABLE");
#else
#define     BOOST_ON                GPIO_OUT_BOOST_EN
#define     BOOST_ENABLE(x)         GpioDrv_SetBit(&(x),BOOST_ON);TYMQP_LOG(NULL,"BOOST EN ENABLE");
#define     BOOST_DISABLE(x)        GpioDrv_ClearBit(&(x),BOOST_ON);TYMQP_LOG(NULL,"BOOST EN DISABLE");
#endif
#else
#define     BOOST_ENABLE(x)
#define     BOOST_DISABLE(x)
#endif

#ifdef HAS_AMP_CTRL
#ifdef HAS_PWR_IO_EXPANDERx
#define     AMP_ON                  IOE_OUT_AMP_ON
#define     AMP_ENABLE(x)           PowerDrv_IoeSetByID(&(x),AMP_ON);TYMQP_LOG(NULL,"AMP ENABLE");
#define     AMP_DISABLE(x)          PowerDrv_IoeClearByID(&(x),AMP_ON);TYMQP_LOG(NULL,"AMP DISABLE");
#else
#define     AMP_ON                  GPIO_OUT_AMP_ON
#define     AMP_ENABLE(x)           GpioDrv_SetBit(&(x),AMP_ON);TYMQP_LOG(NULL,"AMP ON ENABLE");
#define     AMP_DISABLE(x)          GpioDrv_ClearBit(&(x),AMP_ON);TYMQP_LOG(NULL,"AMP ON DISABLE");
#endif
#endif

/*MCU's GPIO control woofer*/
#define     WF_MUTE_Enable(x)       GpioDrv_SetBit(&(x),GPIO_OUT_WF_MUTE);TYMQP_LOG(NULL,"WF_MUTE");
#define     WF_MUTE_Disable(x)      GpioDrv_ClearBit(&(x),GPIO_OUT_WF_MUTE);TYMQP_LOG(NULL,"WF_UNMUTE");

/*MCU's GPIO control tweeter*/
#define     TW_PWDNN_UnMute(x)      GpioDrv_ClearBit(&(x),GPIO_OUT_TW_PWDNN);TYMQP_LOG(NULL,"TW_UNMUTE");
#define     TW_PWDNN_Mute(x)        GpioDrv_SetBit(&(x),GPIO_OUT_TW_PWDNN);TYMQP_LOG(NULL,"TW_MUTE");

/*MCU's GPIO get tweeter and woofer state*/
#define     GET_TW_FAULT_STATE(x)   GpioDrv_ReadBit(&x,GPIO_OUT_TW_FAULT)
#define     GET_WF_FAULT_STATE(x)   GpioDrv_ReadBit(&x,GPIO_OUT_WF_FAULT)

#endif /* #ifdef POWERDRV_LIGHT_CONFIG */

#define SETTING_RESEND_LIMIT    3
#define PAGE_SIZE               1024        // # of 32-bit Instructions per Page
#define SETTING_SAVE_MS         5000
#define IDLE_TIMEOUT_MS         3000
#define TIMER_PERIOD_MS         1000

typedef struct tSettingEntry
{
    uint8       vol_level;
    uint8       treble_level;
    uint8       bass_level;
    uint8       adcbatteryCapacity;
    uint32      btStatus;
    uint32      audioSource;
    uint8       batteryCapacity;
    uint8       batteryStatus;
    uint8       battChgTempLevel;
    uint8       battDchgTempLevel;
    uint8       swVer[SW_VERSION_LENGTH];
    uint8       hwVer[HW_VERSION_LENGTH];
    bool        isOverTemp;
    bool        isAuxInPlugIn;
    bool        isPwrSwitchOn;
    bool        isMusicPlaying;
    bool        btBattStatus;
    bool        isDCPlugIn;  //type: eDcInSta
    bool        isAmpFault;
    uint32      ShopModeWord;
    uint8       btVer[BT_VERSION_LENGTH];
    uint8       dspVer[DSP_VERSION_LENGTH];
    bool        allowPowerup;
    uint8       musicStatus;
    uint8       chargeStatsu;
    bool        isBattMVCloseToZero;
    bool        isBattNTCRemoved;
    bool        allowChgPwrup;
    uint32      storeCapacity;
    uint8       ntcTestValue;
} tSettingEntry;

static tSettingEntry setting;

static tSettingDatabase settingDB[SETID_MAX] =
{
    { &setting.vol_level,               sizeof(setting.vol_level),              SETTING_ATTR_VALID}, // SETID_VOLUME
    { &setting.treble_level,            sizeof(setting.treble_level),           SETTING_ATTR_VALID}, // SETID_TREBLE
    { &setting.bass_level,              sizeof(setting.bass_level),             SETTING_ATTR_VALID}, // SETID_BASS
    { &setting.adcbatteryCapacity,      sizeof(setting.adcbatteryCapacity),     SETTING_ATTR_VALID}, //SETID_ADC_CAPACITY
    { &setting.btStatus,                sizeof(setting.btStatus),               SETTING_ATTR_VALID}, // SETID_BT_STATUS
    { &setting.audioSource,             sizeof(setting.audioSource),            SETTING_ATTR_VALID | SETTING_ATTR_NVM }, //SETID_AUDIO_SOURCE
    { &setting.batteryCapacity,         sizeof(setting.batteryCapacity),        SETTING_ATTR_VALID}, //SETID_BATTERY_CAPACITY
    { &setting.batteryStatus,           sizeof(setting.batteryStatus),          SETTING_ATTR_VALID}, //SETID_BATTERY_CAPACITY_LEVEL
    { &setting.battChgTempLevel,        sizeof(setting.battChgTempLevel),       SETTING_ATTR_VALID}, //SETID_BATTERY_CHARGE_TEMP_LEVEL,
    { &setting.battDchgTempLevel,       sizeof(setting.battDchgTempLevel),      SETTING_ATTR_VALID}, //SETID_BATTERY_DISCHARGE_TEMP_LEVEL,
    { &setting.swVer,                   sizeof(setting.swVer),                  SETTING_ATTR_VALID}, // SETID_SW_VER
    { &setting.hwVer,                   sizeof(setting.hwVer),                  SETTING_ATTR_VALID}, // SETID_HW_VER
    { &setting.isOverTemp,              sizeof(setting.isOverTemp),             SETTING_ATTR_VALID}, // SETID_IS_OVER_TEMP
    { &setting.isAuxInPlugIn,           sizeof(setting.isAuxInPlugIn),          SETTING_ATTR_VALID}, // SETID_IS_AUXIN_PLUG_IN
    { &setting.isPwrSwitchOn,           sizeof(setting.isPwrSwitchOn),          SETTING_ATTR_VALID}, // SETID_IS_PWR_SWITH_ON
    { &setting.isMusicPlaying,          sizeof(setting.isMusicPlaying),         SETTING_ATTR_VALID}, // SETID_MUSIC_DET
    { &setting.btBattStatus,            sizeof(setting.btBattStatus),           SETTING_ATTR_VALID}, // SETID_SYSTEM_SLEEP
    { &setting.isDCPlugIn,              sizeof(setting.isDCPlugIn),             SETTING_ATTR_VALID}, // SETID_IS_DC_PLUG_IN
    { &setting.isAmpFault,              sizeof(setting.isAmpFault),             SETTING_ATTR_VALID}, // SETID_IS_AMP_FAULT
    { &setting.ShopModeWord,            sizeof(setting.ShopModeWord),           SETTING_ATTR_VALID | SETTING_ATTR_NVM }, //SETID_SHOP_MODE_WORD
    { &setting.btVer,                   sizeof(setting.btVer),                  SETTING_ATTR_VALID}, // SETID_BT_VER
    { &setting.dspVer,                  sizeof(setting.dspVer),                 SETTING_ATTR_VALID}, // SETID_DSP_VER
    { &setting.allowPowerup,            sizeof(setting.batteryCapacity),        SETTING_ATTR_VALID}, //SETID_ALLOW_POWERUP
    { &setting.musicStatus,             sizeof(setting.musicStatus),            SETTING_ATTR_VALID}, //SETID_MUSIC_STATUS
    { &setting.chargeStatsu,            sizeof(setting.chargeStatsu),           SETTING_ATTR_VALID}, //SETID_CHARGING_STATUS
    { &setting.isBattMVCloseToZero,     sizeof(setting.isBattMVCloseToZero),    SETTING_ATTR_VALID}, //SETID_IS_BATT_VOL_ZERO
    { &setting.isBattNTCRemoved,        sizeof(setting.isBattNTCRemoved),       SETTING_ATTR_VALID}, //SETID_IS_BATT_NTC_REMOVED
    { &setting.allowChgPwrup,           sizeof(setting.allowChgPwrup),          SETTING_ATTR_VALID}, //SETID_ALLOW_CHG_PWRUP
    { &setting.storeCapacity,           sizeof(setting.storeCapacity),          SETTING_ATTR_VALID | SETTING_ATTR_NVM }, //SETID_STORE_CAPACITY
    { &setting.ntcTestValue,            sizeof(setting.ntcTestValue),           SETTING_ATTR_VALID}, //SETID_NTC_TEST_VALUE
};

#define SETT_PAGE_ROM_ADDR      0x0800FC00

static const tSettingRomMap settingRomMap[] =
{
    { SETID_AUDIO_SOURCE,             SETT_PAGE_ROM_ADDR     },
    { SETID_STORE_CAPACITY,          (SETT_PAGE_ROM_ADDR+8)  },
    { SETID_SHOP_MODE_WORD,          (SETT_PAGE_ROM_ADDR+32) },
};


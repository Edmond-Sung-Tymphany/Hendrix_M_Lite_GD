/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.8 at Thu Mar 22 17:57:35 2018. */

#ifndef PB_PROTO_BTMCU_BT_MCU_PB_H_INCLUDED
#define PB_PROTO_BTMCU_BT_MCU_PB_H_INCLUDED
#include <pb.h>

#include "bt-mcu-ReqResp.pb.h"

#include "mcu-bt-ReqResp.pb.h"

#include "bt_state.pb.h"

#include "bt_dev_info.pb.h"

#include "ble_eq_tuning.pb.h"

#include "ble_light.pb.h"

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _Proto_BtMcu_Event_Type {
    Proto_BtMcu_Event_Type_BOOTED = 0,
    Proto_BtMcu_Event_Type_SYSTEM_STATUS_STANDBY = 1,
    Proto_BtMcu_Event_Type_SYSTEM_STATUS_ON = 2,
    Proto_BtMcu_Event_Type_SYSTEM_STATUS_BT_RESTART = 3,
    Proto_BtMcu_Event_Type_FACTORY_RESET_DONE = 4,
    Proto_BtMcu_Event_Type_SW_UPDATE_STARTED = 7,
    Proto_BtMcu_Event_Type_SW_UPDATE_FINISHED = 8,
    Proto_BtMcu_Event_Type_SW_UPDATE_FAILED = 9,
    Proto_BtMcu_Event_Type_COMFORT_TONE_START = 10,
    Proto_BtMcu_Event_Type_COMFORT_TONE_DONE = 11,
    Proto_BtMcu_Event_Type_VOLUME_CHANGED = 12,
    Proto_BtMcu_Event_Type_MUTE_CHANGED = 13,
    Proto_BtMcu_Event_Type_FACTORY_RESET_START = 16,
    Proto_BtMcu_Event_Type_BT_PAIRING_ENABLED = 17,
    Proto_BtMcu_Event_Type_BT_PAIRING_DISABLED = 18,
    Proto_BtMcu_Event_Type_BT_PAIRING_FAILED = 19,
    Proto_BtMcu_Event_Type_BT_PAIRING_SUCCEEDED = 20,
    Proto_BtMcu_Event_Type_BTLE_PAIRING_ENABLED = 21,
    Proto_BtMcu_Event_Type_BTLE_PAIRING_DISABLED = 22,
    Proto_BtMcu_Event_Type_BTLE_PAIRING_FAILED = 23,
    Proto_BtMcu_Event_Type_BTLE_PAIRING_SUCCEEDED = 24,
    Proto_BtMcu_Event_Type_SYSTEM_STATUS_TURNING_ON = 29,
    Proto_BtMcu_Event_Type_BT_CONNECTION_STATE = 30,
    Proto_BtMcu_Event_Type_BT_A2DP_CONNECTED = 31,
    Proto_BtMcu_Event_Type_BT_A2DP_DISCONNECTED = 32,
    Proto_BtMcu_Event_Type_BT_AUDIO_CUE_PLAY_START = 33,
    Proto_BtMcu_Event_Type_BT_AUDIO_CUE_PLAY_STOP = 34,
    Proto_BtMcu_Event_Type_SOURCE_CHANGED = 36,
    Proto_BtMcu_Event_Type_EQ_SET = 37,
    Proto_BtMcu_Event_Type_LIGHT_SET = 38
} Proto_BtMcu_Event_Type;
#define _Proto_BtMcu_Event_Type_MIN Proto_BtMcu_Event_Type_BOOTED
#define _Proto_BtMcu_Event_Type_MAX Proto_BtMcu_Event_Type_LIGHT_SET
#define _Proto_BtMcu_Event_Type_ARRAYSIZE ((Proto_BtMcu_Event_Type)(Proto_BtMcu_Event_Type_LIGHT_SET+1))

/* Struct definitions */
typedef struct _Proto_BtMcu_Event {
    bool has_type;
    Proto_BtMcu_Event_Type type;
    pb_size_t which_OneOf;
    union {
        uint32_t data;
        Proto_BtState_ConnState connState;
        Proto_BtState_PlayState playState;
        Proto_BtState_BleState bleState;
        uint32_t absoluteVolume;
        uint32_t volumeStep;
        uint32_t source;
        Proto_BleEqTuning_Data eq;
        Proto_BleLight_Data light;
    } OneOf;
/* @@protoc_insertion_point(struct:Proto_BtMcu_Event) */
} Proto_BtMcu_Event;

typedef struct _Proto_BtMcu_Req {
    bool has_type;
    Proto_BtMcu_ReqResp type;
    pb_size_t which_OneOf;
    union {
        uint32_t data;
    } OneOf;
/* @@protoc_insertion_point(struct:Proto_BtMcu_Req) */
} Proto_BtMcu_Req;

typedef struct _Proto_BtMcu_Resp {
    bool has_type;
    Proto_McuBt_ReqResp type;
    pb_size_t which_OneOf;
    union {
        uint32_t data;
        uint32_t swVersion;
        Proto_BtDevInfo_Data btInfo;
    } OneOf;
/* @@protoc_insertion_point(struct:Proto_BtMcu_Resp) */
} Proto_BtMcu_Resp;

/* Default values for struct fields */

/* Initializer values for message structs */
#define Proto_BtMcu_Req_init_default             {false, (Proto_BtMcu_ReqResp)0, 0, {0}}
#define Proto_BtMcu_Resp_init_default            {false, (Proto_McuBt_ReqResp)0, 0, {0}}
#define Proto_BtMcu_Event_init_default           {false, (Proto_BtMcu_Event_Type)0, 0, {0}}
#define Proto_BtMcu_Req_init_zero                {false, (Proto_BtMcu_ReqResp)0, 0, {0}}
#define Proto_BtMcu_Resp_init_zero               {false, (Proto_McuBt_ReqResp)0, 0, {0}}
#define Proto_BtMcu_Event_init_zero              {false, (Proto_BtMcu_Event_Type)0, 0, {0}}

/* Field tags (for use in manual encoding/decoding) */
#define Proto_BtMcu_Event_data_tag               10
#define Proto_BtMcu_Event_connState_tag          11
#define Proto_BtMcu_Event_playState_tag          12
#define Proto_BtMcu_Event_bleState_tag           13
#define Proto_BtMcu_Event_absoluteVolume_tag     14
#define Proto_BtMcu_Event_volumeStep_tag         15
#define Proto_BtMcu_Event_source_tag             16
#define Proto_BtMcu_Event_eq_tag                 17
#define Proto_BtMcu_Event_light_tag              18
#define Proto_BtMcu_Event_type_tag               1
#define Proto_BtMcu_Req_data_tag                 10
#define Proto_BtMcu_Req_type_tag                 1
#define Proto_BtMcu_Resp_data_tag                10
#define Proto_BtMcu_Resp_swVersion_tag           11
#define Proto_BtMcu_Resp_btInfo_tag              12
#define Proto_BtMcu_Resp_type_tag                1

/* Struct field encoding specification for nanopb */
extern const pb_field_t Proto_BtMcu_Req_fields[3];
extern const pb_field_t Proto_BtMcu_Resp_fields[5];
extern const pb_field_t Proto_BtMcu_Event_fields[11];

/* Maximum encoded size of messages (where known) */
#define Proto_BtMcu_Req_size                     8
#define Proto_BtMcu_Resp_size                    12
#define Proto_BtMcu_Event_size                   12

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define BT_MCU_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif

/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.8 at Thu Mar 22 17:57:36 2018. */

#ifndef PB_PROTO_MCUBT_MCU_BT_PB_H_INCLUDED
#define PB_PROTO_MCUBT_MCU_BT_PB_H_INCLUDED
#include <pb.h>

#include "bt-mcu-ReqResp.pb.h"

#include "mcu-bt-ReqResp.pb.h"

#include "ble_eq_tuning.pb.h"

#include "ble_light.pb.h"

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _Proto_McuBt_Event_Type {
    Proto_McuBt_Event_Type_LINE_IN_SENSE_ACTIVE = 0,
    Proto_McuBt_Event_Type_LINE_IN_SENSE_INACTIVE = 1,
    Proto_McuBt_Event_Type_BOOTLOADER_READY = 2,
    Proto_McuBt_Event_Type_FIRMWARE_UPDATE_FINISHED = 3,
    Proto_McuBt_Event_Type_SYSTEM_BOOTED = 4,
    Proto_McuBt_Event_Type_VOLUME_CHANGED = 5,
    Proto_McuBt_Event_Type_SYSTEM_OFF = 6,
    Proto_McuBt_Event_Type_SYSTEM_STANDBY = 7,
    Proto_McuBt_Event_Type_SOURCE_CHANGED = 8,
    Proto_McuBt_Event_Type_EQ_CHANGED = 9,
    Proto_McuBt_Event_Type_LIGHT_CHANGED = 10
} Proto_McuBt_Event_Type;
#define _Proto_McuBt_Event_Type_MIN Proto_McuBt_Event_Type_LINE_IN_SENSE_ACTIVE
#define _Proto_McuBt_Event_Type_MAX Proto_McuBt_Event_Type_LIGHT_CHANGED
#define _Proto_McuBt_Event_Type_ARRAYSIZE ((Proto_McuBt_Event_Type)(Proto_McuBt_Event_Type_LIGHT_CHANGED+1))

/* Struct definitions */
typedef struct _Proto_McuBt_Event {
    bool has_type;
    Proto_McuBt_Event_Type type;
    pb_size_t which_OneOf;
    union {
        uint32_t data;
        uint32_t absoluteVolume;
        uint32_t volumeStep;
        uint32_t source;
        Proto_BleEqTuning_Data eq;
        Proto_BleLight_Data light;
    } OneOf;
/* @@protoc_insertion_point(struct:Proto_McuBt_Event) */
} Proto_McuBt_Event;

typedef struct _Proto_McuBt_Req {
    bool has_type;
    Proto_McuBt_ReqResp type;
    pb_size_t which_OneOf;
    union {
        uint32_t data;
    } OneOf;
/* @@protoc_insertion_point(struct:Proto_McuBt_Req) */
} Proto_McuBt_Req;

typedef struct _Proto_McuBt_Resp {
    bool has_type;
    Proto_BtMcu_ReqResp type;
    pb_size_t which_OneOf;
    union {
        uint32_t data;
        bool audioCuePlayReady;
    } OneOf;
/* @@protoc_insertion_point(struct:Proto_McuBt_Resp) */
} Proto_McuBt_Resp;

/* Default values for struct fields */

/* Initializer values for message structs */
#define Proto_McuBt_Event_init_default           {false, (Proto_McuBt_Event_Type)0, 0, {0}}
#define Proto_McuBt_Req_init_default             {false, (Proto_McuBt_ReqResp)0, 0, {0}}
#define Proto_McuBt_Resp_init_default            {false, (Proto_BtMcu_ReqResp)0, 0, {0}}
#define Proto_McuBt_Event_init_zero              {false, (Proto_McuBt_Event_Type)0, 0, {0}}
#define Proto_McuBt_Req_init_zero                {false, (Proto_McuBt_ReqResp)0, 0, {0}}
#define Proto_McuBt_Resp_init_zero               {false, (Proto_BtMcu_ReqResp)0, 0, {0}}

/* Field tags (for use in manual encoding/decoding) */
#define Proto_McuBt_Event_data_tag               10
#define Proto_McuBt_Event_absoluteVolume_tag     11
#define Proto_McuBt_Event_volumeStep_tag         12
#define Proto_McuBt_Event_source_tag             13
#define Proto_McuBt_Event_eq_tag                 14
#define Proto_McuBt_Event_light_tag              15
#define Proto_McuBt_Event_type_tag               1
#define Proto_McuBt_Req_data_tag                 10
#define Proto_McuBt_Req_type_tag                 1
#define Proto_McuBt_Resp_data_tag                10
#define Proto_McuBt_Resp_audioCuePlayReady_tag   11
#define Proto_McuBt_Resp_type_tag                1

/* Struct field encoding specification for nanopb */
extern const pb_field_t Proto_McuBt_Event_fields[8];
extern const pb_field_t Proto_McuBt_Req_fields[3];
extern const pb_field_t Proto_McuBt_Resp_fields[4];

/* Maximum encoded size of messages (where known) */
#define Proto_McuBt_Event_size                   11
#define Proto_McuBt_Req_size                     8
#define Proto_McuBt_Resp_size                    8

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define MCU_BT_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif

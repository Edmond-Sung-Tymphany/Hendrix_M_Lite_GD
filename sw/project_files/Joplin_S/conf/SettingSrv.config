#define SETTING_RESEND_LIMIT    3
#define PAGE_SIZE               2048        // # of 32-bit Instructions per Page
#define SETTING_SAVE_MS         5000
#define IDLE_TIMEOUT_MS         3000
#define TIMER_PERIOD_MS         1000

typedef struct tSettingEntry
{
    uint32_t    channel;
    uint32_t    vol_level;
    uint32_t    treble_level;
    uint32_t    bass_level;
    uint32_t    btStatus;
    uint32_t    isRcaActivated;
    bool        isPwrSwitchOn;
    bool        isMusicPlaying;
    bool        systemSleep;
    uint8       hwVer[HW_VERSION_LENGTH];
} tSettingEntry;

static tSettingEntry setting;

static tSettingDatabase settingDB[SETID_MAX] =
{
    { &setting.channel,          sizeof(setting.channel),           SETTING_ATTR_VALID | SETTING_ATTR_NVM},
    { &setting.vol_level,        sizeof(setting.vol_level),         SETTING_ATTR_VALID},
    { &setting.treble_level,     sizeof(setting.treble_level),      SETTING_ATTR_VALID | SETTING_ATTR_NVM},
    { &setting.bass_level,       sizeof(setting.bass_level),        SETTING_ATTR_VALID | SETTING_ATTR_NVM},
    { &setting.btStatus,         sizeof(setting.btStatus),          SETTING_ATTR_VALID},
    { &setting.isRcaActivated,   sizeof(setting.isRcaActivated),    SETTING_ATTR_VALID | SETTING_ATTR_NVM},
    { &setting.isPwrSwitchOn,    sizeof(setting.isPwrSwitchOn),     SETTING_ATTR_VALID},
    { &setting.isMusicPlaying,   sizeof(setting.isMusicPlaying),    SETTING_ATTR_VALID},
    { &setting.systemSleep,      sizeof(setting.systemSleep),       SETTING_ATTR_VALID},
    { &setting.hwVer,            sizeof(setting.hwVer),             SETTING_ATTR_VALID},
};

#define SETT_PAGE_ROM_ADDR      0x0803E800

static const tSettingRomMap settingRomMap[] =
{
    { SETID_AUDIO_SOURCE,       SETT_PAGE_ROM_ADDR  },
    { SETID_TREBLE,             (SETT_PAGE_ROM_ADDR+4)  },
    { SETID_BASS,               (SETT_PAGE_ROM_ADDR+8)  },
    { SETID_IS_RCA_ACTIVATED,   (SETT_PAGE_ROM_ADDR+12) },
};


/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.8 at Mon Dec 18 16:01:24 2017. */

#ifndef PB_PROTO_MCUBT_MCU_BT_PB_H_INCLUDED
#define PB_PROTO_MCUBT_MCU_BT_PB_H_INCLUDED
#include <pb.h>

#include "bt-mcu-ReqResp.pb.h"

#include "mcu-bt-ReqResp.pb.h"

#include "tym-common.pb.h"

#include "tym-dsp.pb.h"

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _Proto_McuBt_Event_Type {
    Proto_McuBt_Event_Type_LINE_IN_SENSE_ACTIVE = 0,
    Proto_McuBt_Event_Type_LINE_IN_SENSE_INACTIVE = 1,
    Proto_McuBt_Event_Type_BOOTLOADER_READY = 2,
    Proto_McuBt_Event_Type_FIRMWARE_UPDATE_FINISHED = 3
} Proto_McuBt_Event_Type;
#define _Proto_McuBt_Event_Type_MIN Proto_McuBt_Event_Type_LINE_IN_SENSE_ACTIVE
#define _Proto_McuBt_Event_Type_MAX Proto_McuBt_Event_Type_FIRMWARE_UPDATE_FINISHED
#define _Proto_McuBt_Event_Type_ARRAYSIZE ((Proto_McuBt_Event_Type)(Proto_McuBt_Event_Type_FIRMWARE_UPDATE_FINISHED+1))

/* Struct definitions */
typedef struct _Proto_McuBt_Event {
    bool has_type;
    Proto_McuBt_Event_Type type;
/* @@protoc_insertion_point(struct:Proto_McuBt_Event) */
} Proto_McuBt_Event;

typedef struct _Proto_McuBt_Req {
    bool has_type;
    Proto_McuBt_ReqResp type;
    bool has_id;
    uint32_t id;
    pb_size_t which_data;
    union {
        Proto_TymDsp_AbsoluteVolume absoluteVolume;
        Proto_TymDsp_RelativeVolumeChange relativeVolumeChange;
    } data;
/* @@protoc_insertion_point(struct:Proto_McuBt_Req) */
} Proto_McuBt_Req;

typedef struct _Proto_McuBt_Resp {
    bool has_type;
    Proto_BtMcu_ReqResp type;
    bool has_id;
    uint32_t id;
    bool has_genericResponse;
    Proto_Tym_GenericResponse genericResponse;
    pb_size_t which_data;
    union {
        Proto_TymDsp_AbsoluteVolume volume;
        Proto_TymDsp_RelativeVolumeChange relativeVolumeChange;
    } data;
/* @@protoc_insertion_point(struct:Proto_McuBt_Resp) */
} Proto_McuBt_Resp;

/* Default values for struct fields */

/* Initializer values for message structs */
#define Proto_McuBt_Event_init_default           {false, (Proto_McuBt_Event_Type)0}
#define Proto_McuBt_Req_init_default             {false, (Proto_McuBt_ReqResp)0, false, 0, 0, {Proto_TymDsp_AbsoluteVolume_init_default}}
#define Proto_McuBt_Resp_init_default            {false, (Proto_BtMcu_ReqResp)0, false, 0, false, Proto_Tym_GenericResponse_init_default, 0, {Proto_TymDsp_AbsoluteVolume_init_default}}
#define Proto_McuBt_Event_init_zero              {false, (Proto_McuBt_Event_Type)0}
#define Proto_McuBt_Req_init_zero                {false, (Proto_McuBt_ReqResp)0, false, 0, 0, {Proto_TymDsp_AbsoluteVolume_init_zero}}
#define Proto_McuBt_Resp_init_zero               {false, (Proto_BtMcu_ReqResp)0, false, 0, false, Proto_Tym_GenericResponse_init_zero, 0, {Proto_TymDsp_AbsoluteVolume_init_zero}}

/* Field tags (for use in manual encoding/decoding) */
#define Proto_McuBt_Event_type_tag               1
#define Proto_McuBt_Req_absoluteVolume_tag       10
#define Proto_McuBt_Req_relativeVolumeChange_tag 11
#define Proto_McuBt_Req_type_tag                 1
#define Proto_McuBt_Req_id_tag                   2
#define Proto_McuBt_Resp_volume_tag              10
#define Proto_McuBt_Resp_relativeVolumeChange_tag 11
#define Proto_McuBt_Resp_type_tag                1
#define Proto_McuBt_Resp_id_tag                  2
#define Proto_McuBt_Resp_genericResponse_tag     3

/* Struct field encoding specification for nanopb */
extern const pb_field_t Proto_McuBt_Event_fields[2];
extern const pb_field_t Proto_McuBt_Req_fields[5];
extern const pb_field_t Proto_McuBt_Resp_fields[6];

/* Maximum encoded size of messages (where known) */
#define Proto_McuBt_Event_size                   2
#define Proto_McuBt_Req_size                     22
#define Proto_McuBt_Resp_size                    26

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define MCU_BT_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif

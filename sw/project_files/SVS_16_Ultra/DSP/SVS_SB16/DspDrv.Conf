/**
*  @file      vol_tab.h
*  @brief     This file implements the volume table for the Audio DSP ADAU1761.
*  @modified  Daniel.Duan
*  @date      2014-09-16
*  @copyright Tymphany Ltd.
*/

#ifndef __VOL_TAB_H__
#define __VOL_TAB_H__

#include "product.config"

#define HAS_PEAKING_FILTER
#define HAS_TONE_LOW_SHELF_FILTER
#define HAS_BUTTWORTH_LOW_PASS_FILTER
#define HAS_BUTTWORTH_HIGH_PASS_FILTER
#define HAS_FIRST_ORDER_HIGH_PASS_FILTER
#define HAS_FIRST_ORDER_LOW_PASS_FILTER

/* Dsp cfg parts, all are product-dependent */
#define DSP_SAMPLING_FREQ           (48000)
#define EQ_CTRL_NUM             	(7)



/**************** EQ, Volume, Phase, Polarity Control, Music Streaming address ******************/
#define RGC_CTRL_ADDRESS            MOD_EQS_RGC_ALG0_STAGE0_B0_ADDR
#define LP_CTRL_ADDRESS             MOD_EQS_LP_FILTER_ALG0_LOW_FILT1_PARAMB0_ADDR
#define LP_SWITCH_ADDRESS           MOD_EQS_LPSWITCH_MONOSWSLEW_ADDR
#define HP_CTRL_ADDRESS             MOD_EQS_USERHPVARIEDSLOPE_ALG0_STAGE0_B0_ADDR
#define TUNNING_ADDRESS             MOD_EQS_SUBTUNING_ALG0_STAGE0_B0_ADDR
#define PEQ_CTRL_ADDRESS            MOD_EQS_PEQ_ALG0_STAGE0_B0_ADDR
#define VOLUME_CTRL_ADDRESS         MOD_SW_INTERFACEREAD1_GPIOINTFACE0RDWR_ADDR
#define MUSIC_STREAM_STATUS_ADDRESS MOD_SIGNAL_DETECTION_READBACK1_ALG0_READBACKALGSIGMA2002_ADDR

#define INVALID_DELAY_CHANNEL           -1
#define DELAY_CHANNEL_0                 0
#define DELAY_CHANNEL_1                 1
#define DELAY_CHANNEL_0_ADDRESS         MOD_PHASE_DELAY0_CTRL0_DELAYAMT_ADDR
#define DELAY_CHANNEL_1_ADDRESS         MOD_PHASE_DELAY1_CTRL1_DELAYAMT_ADDR
#define DELAY_CHANNEL_CTRL_ADDRESS      MOD_PHASE_INVERTSWITCH_2_DCINPALG5_ADDR

#define INVALID_POLARITY_CHANNEL        -1
#define POLARITY_CHANNEL_0              0
#define POLARITY_CHANNEL_1              1
#define POLARITY_CHANNEL_0_ADDRESS      MOD_PHASE_INV0_CTRL0_EQ1940INVERT3GAIN_ADDR
#define POLARITY_CHANNEL_1_ADDRESS      MOD_PHASE_INV1_CTRL1_EQ1940INVERT2GAIN_ADDR
#define POLARITY_CHANNEL_CTRL_ADDRESS   MOD_PHASE_INVERTSWITCH_DCINPALG4_ADDR


#define LIMITER_LEVEL_MINUS_20_DB        (-20)
#define LIMITER_LEVEL_MINUS_22_DB        (-22)
#define LIMITER_LEVEL_MINUS_24_DB        (-24)
#define LIMITER_LEVEL_MINUS_26_DB        (-26)
#define LIMITER_LEVEL_MINUS_28_DB        (-28)
#define LIMITER_LEVEL_MINUS_30_DB        (-30)
#define LIMITER_LEVEL_MINUS_90_DB        (-90)

/**************** limiter coefficient data ******************/
#define LIMITER_COEFFICIENT_CTRL_ADDRESS       MOD_LIMITERS_ANTICLIPLIMITER_ALG0_STDRMSCOMPRESSORALG10_ADDR
#define LIMITER_COEFFICIENT_DATA_SIZE	136
static uint8 limiter_minus_20[LIMITER_COEFFICIENT_DATA_SIZE] = 
{
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x7F, 	0xE2, 	0x92,
	0x00, 	0x7D, 	0xCA, 	0xFF,
	0x00, 	0x77, 	0x6F, 	0x40,
	0x00, 	0x6C, 	0x62, 	0x4C,
	0x00, 	0x5D, 	0xDA, 	0x04,
	0x00, 	0x4D, 	0x7E, 	0x69,
	0x00, 	0x3D, 	0x6C, 	0x05,
	0x00, 	0x2F, 	0x12, 	0xD0,
	0x00, 	0x23, 	0x17, 	0x49,
	0x00, 	0x19, 	0x99, 	0xAD,
	0x00, 	0x12, 	0x64, 	0x82,
	0x00, 	0x0D, 	0x19, 	0x0C,
	0x00, 	0x09, 	0x4E, 	0x0B,
	0x00, 	0x06, 	0x9C, 	0x32
};

static uint8 limiter_minus_22[LIMITER_COEFFICIENT_DATA_SIZE] = 
{
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x7F, 	0xE0, 	0x50,
	0x00, 	0x7D, 	0xEB, 	0x49,
	0x00, 	0x78, 	0x17, 	0xD2,
	0x00, 	0x6D, 	0xE6, 	0xB1,
	0x00, 	0x60, 	0x45, 	0x22,
	0x00, 	0x50, 	0xBA, 	0x4C,
	0x00, 	0x40, 	0xEE, 	0xC9,
	0x00, 	0x32, 	0x82, 	0x6B,
	0x00, 	0x26, 	0x2F, 	0x6D,
	0x00, 	0x1C, 	0x34, 	0x02,
	0x00, 	0x14, 	0x75, 	0xA1,
	0x00, 	0x0E, 	0xA8, 	0x36,
	0x00, 	0x0A, 	0x6D, 	0x9E,
	0x00, 	0x07, 	0x68, 	0x7D,
	0x00, 	0x05, 	0x43, 	0x41
};

static uint8 limiter_minus_24[LIMITER_COEFFICIENT_DATA_SIZE] = 
{
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x7F, 	0xDE, 	0x0E,
	0x00, 	0x7E, 	0x06, 	0x32,
	0x00, 	0x78, 	0xA6, 	0xBD,
	0x00, 	0x6F, 	0x36, 	0x89,
	0x00, 	0x62, 	0x69, 	0x85,
	0x00, 	0x53, 	0xB0, 	0x96,
	0x00, 	0x44, 	0x38, 	0xE5,
	0x00, 	0x35, 	0xCF, 	0x88,
	0x00, 	0x29, 	0x3C, 	0xD8,
	0x00, 	0x1E, 	0xD7, 	0x75,
	0x00, 	0x16, 	0x9D, 	0x68,
	0x00, 	0x10, 	0x55, 	0x85,
	0x00, 	0x0B, 	0xAD, 	0x2D,
	0x00, 	0x08, 	0x4D, 	0x72,
	0x00, 	0x05, 	0xE5, 	0xE8,
	0x00, 	0x04, 	0x30, 	0xA1
};

static uint8 limiter_minus_26[LIMITER_COEFFICIENT_DATA_SIZE] = 
{
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x7F, 	0xDB, 	0xC8,
	0x00, 	0x7E, 	0x1C, 	0xD8,
	0x00, 	0x79, 	0x21, 	0x0D,
	0x00, 	0x70, 	0x5A, 	0xCE,
	0x00, 	0x64, 	0x50, 	0xD2,
	0x00, 	0x56, 	0x3E, 	0x86,
	0x00, 	0x47, 	0x4C, 	0xD2,
	0x00, 	0x38, 	0xF7, 	0xDE,
	0x00, 	0x2C, 	0x39, 	0xF5,
	0x00, 	0x21, 	0x7C, 	0xF7,
	0x00, 	0x18, 	0xD4, 	0xB8,
	0x00, 	0x12, 	0x1A, 	0x6A,
	0x00, 	0x0D, 	0x07, 	0xE3,
	0x00, 	0x09, 	0x4C, 	0xCA,
	0x00, 	0x06, 	0x9C, 	0x31,
	0x00, 	0x04, 	0xB2, 	0x20,
	0x00, 	0x03, 	0x55, 	0xFC
};

static uint8 limiter_minus_28[LIMITER_COEFFICIENT_DATA_SIZE] = 
{
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x7F, 	0xD9, 	0x87,
	0x00, 	0x7E, 	0x30, 	0x18,
	0x00, 	0x79, 	0x8A, 	0x99,
	0x00, 	0x71, 	0x5A, 	0xAD,
	0x00, 	0x66, 	0x03, 	0x4F,
	0x00, 	0x58, 	0x91, 	0x9F,
	0x00, 	0x4A, 	0x2D, 	0xBA,
	0x00, 	0x3B, 	0xFA, 	0xA8,
	0x00, 	0x2F, 	0x22, 	0xEA,
	0x00, 	0x24, 	0x1F, 	0x12,
	0x00, 	0x1B, 	0x15, 	0xCC,
	0x00, 	0x13, 	0xF1, 	0x9E,
	0x00, 	0x0E, 	0x79, 	0x2F,
	0x00, 	0x0A, 	0x63, 	0xD5,
	0x00, 	0x07, 	0x67, 	0xF3,
	0x00, 	0x05, 	0x43, 	0x41,
	0x00, 	0x03, 	0xBD, 	0x15,
	0x00, 	0x02, 	0xA7, 	0xE8
};

static uint8 limiter_minus_30[LIMITER_COEFFICIENT_DATA_SIZE] = 
{
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x7F, 	0xD7, 	0x45,
	0x00, 	0x7E, 	0x40, 	0x8A,
	0x00, 	0x79, 	0xE6, 	0x5F,
	0x00, 	0x72, 	0x3B, 	0xF0,
	0x00, 	0x67, 	0x88, 	0x00,
	0x00, 	0x5A, 	0xAF, 	0xDB,
	0x00, 	0x4C, 	0xDF, 	0x15,
	0x00, 	0x3E, 	0xD8, 	0x20,
	0x00, 	0x31, 	0xF5, 	0x2F,
	0x00, 	0x26, 	0xB9, 	0x94,
	0x00, 	0x1D, 	0x5B, 	0xEB,
	0x00, 	0x15, 	0xD6, 	0xAD,
	0x00, 	0x0F, 	0xFD, 	0x47,
	0x00, 	0x0B, 	0x8F, 	0x76,
	0x00, 	0x08, 	0x47, 	0xF3,
	0x00, 	0x05, 	0xE5, 	0xB2,
	0x00, 	0x04, 	0x30, 	0xA1,
	0x00, 	0x02, 	0xF9, 	0xFE,
	0x00, 	0x02, 	0x1D, 	0x51
};

#endif



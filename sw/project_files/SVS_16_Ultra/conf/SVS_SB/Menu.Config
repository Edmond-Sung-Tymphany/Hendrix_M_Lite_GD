/*
-------------------------------------------------------------------------------
TYMPHANY LTD





                  Menu config
                  -------------------------

                  SW Module Document




@file        Menu.Config
@brief       This file defines the menus.
@author      Bob.Xu 
@date        2014-08-12
@copyright (c) Tymphany Ltd. All rights reserved.

Change History:
VERSION    : 1    DRAFT      2014-08-12     Bob.Xu 
DESCRIPTION: First Draft. Generated by newclass.py
SCO/ERROR  : 
-------------------------------------------------------------------------------
*/

static const uint8 initialWelcomeInfo[][NUM_OF_SCREEN_DIGIT + 1] = 
{
#if defined(CES_2016_SWS_002_SUB)
  "TYMPHANY", //0
  " WOOFER ", //1
#elif defined(SVS_16_ULTRA_SB)
  "SVS SB16", //0
  " ULTRA  ", //1
#elif defined(SVS_16_ULTRA_PB)
  "SVS PB16", //0
  " ULTRA  ", //1
#else
  "SVS PC16", //0
  " ULTRA  ", //1
#endif
};

const static uint8 PRESET_1_ORIGIN_STRING[NUM_OF_SCREEN_DIGIT + 1] = " MOVIE  ";
const static uint8 PRESET_2_ORIGIN_STRING[NUM_OF_SCREEN_DIGIT + 1] = " MUSIC  ";
const static uint8 PRESET_3_ORIGIN_STRING[NUM_OF_SCREEN_DIGIT + 1]= " CUSTOM ";

/* Below strings are used for the page nodes, it should be synced with the one in setting server */
static uint8 PRESET_1_CURRENT_STRING[NUM_OF_SCREEN_DIGIT + 1] = " MOVIE  ";
static uint8 PRESET_2_CURRENT_STRING[NUM_OF_SCREEN_DIGIT + 1] = " MUSIC  ";
static uint8 PRESET_3_CURRENT_STRING[NUM_OF_SCREEN_DIGIT + 1]= " CUSTOM ";

/* This is used to init the flash area*/
const static uint8 PRESET_1_STRING[NUM_OF_SCREEN_DIGIT + 1]@"MENU_PRESET_1_NAME" = " MOVIE  ";
const static uint8 PRESET_2_STRING[NUM_OF_SCREEN_DIGIT + 1]@"MENU_PRESET_2_NAME" = " MUSIC  ";
const static uint8 PRESET_3_STRING[NUM_OF_SCREEN_DIGIT + 1]@"MENU_PRESET_3_NAME"= " CUSTOM ";
static uint8 PRESET_DEFUALT_STRING[NUM_OF_SCREEN_DIGIT + 1]= "DEFAULT ";
static uint8 VOLUME_STRING[NUM_OF_SCREEN_DIGIT + 1] = "VOLUME";
static uint8 LOW_PASS_STRING[NUM_OF_SCREEN_DIGIT + 1] = "LP FILT";
static uint8 LOW_PASS_OFF_STRINGP[NUM_OF_SCREEN_DIGIT + 1] = " LP OFF ";
static uint8 LOW_PASS_ON_STRING[NUM_OF_SCREEN_DIGIT + 1] = " LP ON  ";
static uint8 LOW_PASS_FREQ_STRING[NUM_OF_SCREEN_DIGIT + 1] = "LP FREQ ";
static uint8 LOW_PASS_SLOPE_STRING[NUM_OF_SCREEN_DIGIT + 1] = "LP SLOPE";
static uint8 HIGH_PASS_STRING[NUM_OF_SCREEN_DIGIT + 1] = "HP FILT ";
static uint8 HIGH_PASS_OFF_STRING[NUM_OF_SCREEN_DIGIT + 1] = " HP OFF ";
static uint8 HIGH_PASS_ON_STRING[NUM_OF_SCREEN_DIGIT + 1] = " HP ON  ";
static uint8 HIGH_PASS_FREQ_STRING[NUM_OF_SCREEN_DIGIT + 1] = "HP FREQ ";
static uint8 HIGH_PASS_SLOPE_STRING[NUM_OF_SCREEN_DIGIT + 1] = "HP SLOPE";
static uint8 PHASE_STRING[NUM_OF_SCREEN_DIGIT + 1] = "PHASE   ";
static uint8 POLARITY_STRING[NUM_OF_SCREEN_DIGIT + 1] = "POLARITY";
static uint8 POLARITY_POSITIVE_STRING[NUM_OF_SCREEN_DIGIT + 1] = "POSITIVE";
static uint8 POLARITY_NEGATIVE_STRING[NUM_OF_SCREEN_DIGIT + 1] = "NEGATIVE";
static uint8 DELAY_STRING[NUM_OF_SCREEN_DIGIT + 1] = "DELAY   ";
static uint8 PARA_EQ_STRING[NUM_OF_SCREEN_DIGIT + 1] = "PARA EQ ";
static uint8 PEQ1_STRING[NUM_OF_SCREEN_DIGIT + 1] = "  PEQ1  ";
static uint8 PEQ1_OFF_STRING[NUM_OF_SCREEN_DIGIT + 1] = "PEQ1 OFF";
static uint8 PEQ1_ON_STRING[NUM_OF_SCREEN_DIGIT + 1] = "PEQ1 ON";
static uint8 PEQ2_STRING[NUM_OF_SCREEN_DIGIT + 1] = "  PEQ2  ";
static uint8 PEQ2_OFF_STRING[NUM_OF_SCREEN_DIGIT + 1] = "PEQ2 OFF";
static uint8 PEQ2_ON_STRING[NUM_OF_SCREEN_DIGIT + 1] = "PEQ2 ON ";
static uint8 PEQ3_STRING[NUM_OF_SCREEN_DIGIT + 1] = "  PEQ3  ";
static uint8 PEQ3_OFF_STRING[NUM_OF_SCREEN_DIGIT + 1] = "PEQ3 OFF";
static uint8 PEQ3_ON_STRING[NUM_OF_SCREEN_DIGIT + 1] = "PEQ3 ON ";
static uint8 PEQ_FREQ_STRING[NUM_OF_SCREEN_DIGIT + 1] = "  FREQ  ";
static uint8 PEQ_BOOST_STRING[NUM_OF_SCREEN_DIGIT + 1] = " BOOST  ";
static uint8 PEQ_QFACTOR_STRING[NUM_OF_SCREEN_DIGIT + 1] = "Q FACTOR";
static uint8 RGC_STRING[NUM_OF_SCREEN_DIGIT + 1] = "RGC     ";
static uint8 RGC_OFF_STRING[NUM_OF_SCREEN_DIGIT + 1] = " RGC OFF";
static uint8 RGC_ON_STRING[NUM_OF_SCREEN_DIGIT + 1] = " RGC ON ";
static uint8 PRESET_STRING[NUM_OF_SCREEN_DIGIT + 1] = "PRESET  ";
static uint8 SAVE_TO_STRING[NUM_OF_SCREEN_DIGIT + 1] = "SAVE TO ";
static uint8 SETTING_STRING[NUM_OF_SCREEN_DIGIT + 1] = "SETTING ";
static uint8 DISPLAY_STRING[NUM_OF_SCREEN_DIGIT + 1] = "DISPLAY ";
static uint8 TIMEOUT_STRING[NUM_OF_SCREEN_DIGIT + 1] = "TIMEOUT ";
static uint8 STANDBY_STRING[NUM_OF_SCREEN_DIGIT + 1] = "STANDBY ";
static uint8 LPF_VALUE_STRING[NUM_OF_SCREEN_DIGIT + 1] = "LPF%3dHz";
static uint8 LPS_VALUE_STRING[NUM_OF_SCREEN_DIGIT + 1] = "LPS%3ddB";
static uint8 TIME_IN_SECOND_STRING[NUM_OF_SCREEN_DIGIT + 1] = "  %3dSEC";
static uint8 TIME_IN_MS_STRING[NUM_OF_SCREEN_DIGIT + 1] = "   %3dMS";
static uint8 LOADED_STRING[NUM_OF_SCREEN_DIGIT + 1] = " LOADED ";
static uint8 LOAD_STRING[NUM_OF_SCREEN_DIGIT + 1] = "  LOAD  ";
static uint8 REVERT_STRING[NUM_OF_SCREEN_DIGIT + 1] = " REVERT ";
static uint8 REVERTED_STRING[NUM_OF_SCREEN_DIGIT + 1] = "REVERTED";
static uint8 SAVED_STRING[NUM_OF_SCREEN_DIGIT + 1] = " SAVED  ";
static uint8 SAVE_STRING[NUM_OF_SCREEN_DIGIT + 1] = "  SAVE  ";
static uint8 EMPTY_STRING[NUM_OF_SCREEN_DIGIT + 1] = " EMPTY  ";
static uint8 DEGREE_VALUE_STRING[NUM_OF_SCREEN_DIGIT + 1] = "    %3d ";
static uint8 DISPLAY_OFF_STRING[NUM_OF_SCREEN_DIGIT + 1] = "   OFF  ";
static uint8 DISPLAY_LOGO_STRING[NUM_OF_SCREEN_DIGIT + 1] = "  LOGO  ";
static uint8 DISPLAY_AUTO_STRING[NUM_OF_SCREEN_DIGIT + 1] = "  AUTO  ";
static uint8 DISPLAY_ALWAYS_ON_STRING[NUM_OF_SCREEN_DIGIT + 1] = "   ON   ";
static uint8 DISPLAY_TRIGGER_STRING[NUM_OF_SCREEN_DIGIT + 1] = "TRIGGER ";
static uint8 CLEAN_SCREEN[NUM_OF_SCREEN_DIGIT + 1] = "        ";
static uint8 P1Q_VALUE_STRING[NUM_OF_SCREEN_DIGIT + 1] = "P1Q%5.1f";
static uint8 P1F_VALUE_STRING[NUM_OF_SCREEN_DIGIT + 1] = "P1F%3dHz";
static uint8 P1B_VALUE_STRING[NUM_OF_SCREEN_DIGIT + 3] = "P1B%4.1f";
static uint8 P2Q_VALUE_STRING[NUM_OF_SCREEN_DIGIT + 1] = "P2Q%5.1f";
static uint8 P2F_VALUE_STRING[NUM_OF_SCREEN_DIGIT + 1] = "P2F%3dHz";
static uint8 P2B_VALUE_STRING[NUM_OF_SCREEN_DIGIT + 1] = "P2B%4.1f";
static uint8 P3Q_VALUE_STRING[NUM_OF_SCREEN_DIGIT + 1] = "P3Q%5.1f";
static uint8 P3F_VALUE_STRING[NUM_OF_SCREEN_DIGIT + 1] = "P3F%3dHz";
static uint8 P3B_VALUE_STRING[NUM_OF_SCREEN_DIGIT + 1] = "P3B%4.1f";
static uint8 HPF_VALUE_STRING[NUM_OF_SCREEN_DIGIT + 1] = "HPF%3dHz";
static uint8 HPS_VALUE_STRING[NUM_OF_SCREEN_DIGIT + 1] = "HPS%3ddB";
static uint8 VOLUME_VALUE_STRING[NUM_OF_SCREEN_DIGIT + 1] = " V %3ddB";
static uint8 YES_NO_STRING[NUM_OF_SCREEN_DIGIT + 1] = " YES/NO ";
static uint8 RESET_DONE_STRING[NUM_OF_SCREEN_DIGIT + 1] = "  DONE  ";
static uint8 RESET_STRING[NUM_OF_SCREEN_DIGIT + 1] = " RESET  ";
static uint8 RGC_FREQ_STRING[NUM_OF_SCREEN_DIGIT + 1] = "RGC FREQ";
static uint8 RGC_SLOP_STRING[NUM_OF_SCREEN_DIGIT + 1] = "RGC SLOP";
static uint8 RGC_FREQ_VALUE_STRING[NUM_OF_SCREEN_DIGIT + 1] = "RGC%3dHz";
static uint8 RGC_SLOPE_VALUE_STRING[NUM_OF_SCREEN_DIGIT + 1] = "SL %3ddB";
static uint8 GOODBYE_STRING[NUM_OF_SCREEN_DIGIT + 1] = "GOODBYE";

static const tMenuDataAttr menuDataAttr[] =
{
/*   settingId               min    max  default  step  unit*/
  {PAGE_SETTING_DISPLAY,    0,     20,    0,    10,  DSP_SETT_ID_MAX, NULL},
  {PAGE_SETTING_TIMEOUT,    0,     600,   100,  100, DSP_SETT_ID_MAX, TIME_IN_SECOND_STRING},
  {PAGE_SETTING_STANDBY,    0,     20,    0,    10,  DSP_SETT_ID_MAX, NULL},
  {PAGE_SETTING_BRIGHTNESS, 0,     70,    20,   10,  DSP_SETT_ID_MAX, NULL},
  {PAGE_SETTING_LP_STATUS,  0,     10,    0,    0,   DSP_EQ_CTRL_USER_LP, NULL}, //0 means OFF, 10 means ON
  {PAGE_SETTING_LP_FRE,     300,   2000,  800,  10,  DSP_EQ_CTRL_USER_LP, LPF_VALUE_STRING},
  {PAGE_SETTING_LP_SLO,     60,    240,   120,  60,  DSP_EQ_CTRL_USER_LP, LPS_VALUE_STRING},
  {PAGE_SETTING_PEQ1_STATUS,0,     10,    0,    0,   DSP_EQ_CTRL_PEQ1,    NULL},
  {PAGE_SETTING_PEQ1_FRE,   200,   2000,  500,  10,  DSP_EQ_CTRL_PEQ1,    P1F_VALUE_STRING},
  {PAGE_SETTING_PEQ1_BOOST, -120,  60,    0,    1,   DSP_EQ_CTRL_PEQ1,    P1B_VALUE_STRING},
  {PAGE_SETTING_PEQ1_Q,     2,     100,   10,   1,   DSP_EQ_CTRL_PEQ1,    P1Q_VALUE_STRING},
  {PAGE_SETTING_PEQ2_STATUS,0,     10,    0,    0,   DSP_EQ_CTRL_PEQ2,    NULL},
  {PAGE_SETTING_PEQ2_FRE,   200,   2000,  500,  10,  DSP_EQ_CTRL_PEQ2,    P2F_VALUE_STRING},
  {PAGE_SETTING_PEQ2_BOOST, -120,  60,    0,    1,   DSP_EQ_CTRL_PEQ2,    P2B_VALUE_STRING},
  {PAGE_SETTING_PEQ2_Q,     2,     100,   10,   1,   DSP_EQ_CTRL_PEQ2,    P2Q_VALUE_STRING},
  {PAGE_SETTING_PEQ3_STATUS,0,     10,    0,    0,   DSP_EQ_CTRL_PEQ3,    NULL},
  {PAGE_SETTING_PEQ3_FRE,   200,   2000,  500,  10,  DSP_EQ_CTRL_PEQ3,    P3F_VALUE_STRING},
  {PAGE_SETTING_PEQ3_BOOST, -120,  60,    0,    1,   DSP_EQ_CTRL_PEQ3,    P3B_VALUE_STRING},
  {PAGE_SETTING_PEQ3_Q,     2,     100,   10,   1,   DSP_EQ_CTRL_PEQ3,    P3Q_VALUE_STRING},
  {PAGE_SETTING_RGC_STATUS, 0,     10,    0,    0,   DSP_EQ_CTRL_RGC,     NULL},
  {PAGE_SETTING_RGC_FREQ,   250,   400,   250,  10,  DSP_EQ_CTRL_RGC,     RGC_FREQ_VALUE_STRING},
  {PAGE_SETTING_RGC_SLOPE,  60,    120,   120,  60,  DSP_EQ_CTRL_RGC,     RGC_SLOPE_VALUE_STRING},
  {PAGE_SETTING_VOL,        -600,  0,    -200,  10,  DSP_VOLUME_SETT_ID,  VOLUME_VALUE_STRING},
  {PAGE_SETTING_PHASE,      0 ,    1800,  0,    10,  DSP_PHASE_SETT_ID,   DEGREE_VALUE_STRING},
  {PAGE_SETTING_POLARITY,   0,     10,    0,    10,  DSP_POLARITY_SETT_ID,NULL},
  {PAGE_SETTING_TUNNING,    120,   200,   200,  40,  DSP_TUNNING_SETT_ID, NULL},
};

static tPageNode * rootLevel[];
static tPageNode * lpOnOff[];
static tPageNode * lpOnSet[];
static tPageNode * peq[];
static tPageNode * peq1OnOff[];
static tPageNode * peq1Set[];
static tPageNode * peq2OnOff[];
static tPageNode * peq2Set[];
static tPageNode * peq3OnOff[];
static tPageNode * peq3Set[];
static tPageNode * rgcOnOff[];
static tPageNode * preset[];
static tPageNode * settings[];
static tPageNode * fcResetSetting[];
static tPageNode * rgcOnSet[];
static tPageNode *presetSaveToSet[];

static tKeyToPageNodeConf volUpButtonPageNode;
static tKeyToPageNodeConf volDownButtonPageNode;
static tKeyToPageNodeConf preset1LoadButtonPageNode;
static tKeyToPageNodeConf preset2LoadButtonPageNode;
static tKeyToPageNodeConf preset3LoadButtonPageNode;
static tKeyToPageNodeConf preset4LoadButtonPageNode;
static tKeyToPageNodeConf preset1SaveButtonPageNode;
static tKeyToPageNodeConf preset2SaveButtonPageNode;
static tKeyToPageNodeConf preset3SaveButtonPageNode;

static tKeyToPageNodeConf IRVolUpButtonPageNode;
static tKeyToPageNodeConf IRVolDownButtonPageNode;
static tKeyToPageNodeConf IRPreset1ButtonPageNode;
static tKeyToPageNodeConf IRPreset2ButtonPageNode;
static tKeyToPageNodeConf IRPreset3ButtonPageNode;

#define LEVEL_1_NUM_OF_BRO  9

/************************* volume ***************************/
static tPageNode volNode = //volume(level 1)
{
    .numOfBrother = LEVEL_1_NUM_OF_BRO,
    .ppChildren    = NULL,
    .pPageText    = VOLUME_STRING,
    .pageType     = PAGE_ACTION_TYPE,
    .pageSettId   = PAGE_SETTING_VOL,
    .pageStatus   = PAGE_DEACTIVE
};

/************************* Low pass filter***************************/
static tPageNode lpFilterNode = //Low pass filter(level 1)
{
    .numOfBrother = LEVEL_1_NUM_OF_BRO,
    .ppChildren   = &lpOnOff[0],
    .pPageText    = LOW_PASS_STRING,
    .pageType     = PAGE_NAVIGATION_TYPE,
    .pageStatus   = PAGE_DEACTIVE
};

static tPageNode lpOff = //low pass fitler off(Level 2)
{
    .numOfBrother = 2,
    .ppChildren   = NULL,
    .pPageText    = LOW_PASS_OFF_STRINGP,
    .pageType     = PAGE_NAVIGATION_ACTION_TYPE,// this node has setting also DLG should do navigation
    .pageSettId   = PAGE_SETTING_LP_OFF,
    .pageStatus   = PAGE_ACTIVE
};

static tPageNode lpOn = //low pass fitler off(level 2)
{
    .numOfBrother = 2,
    .ppChildren   = &lpOnSet[0],
    .pPageText    = LOW_PASS_ON_STRING,
    .pageType     = PAGE_NAVIGATION_ACTION_TYPE, //This is because we should turn on LP before enter to the next level
    .pageSettId   = PAGE_SETTING_LP_ON,
    .pageStatus   = PAGE_DEACTIVE
};

static tPageNode *lpOnOff[2] ={&lpOff, &lpOn};

static tPageNode lpFreq = //low pass fitler--frequency(level 3)
{
    .numOfBrother = 2,
    .ppChildren   = NULL,
    .pPageText    = LOW_PASS_FREQ_STRING,
    .pageType     = PAGE_ACTION_TYPE,
    .pageSettId   = PAGE_SETTING_LP_FRE,
    .pageStatus   = PAGE_STATUS_INVALID
};

static tPageNode lpSlope = //low pass fitler--slope(level 3)
{
    .numOfBrother = 2,
    .ppChildren   = NULL,
    .pPageText    = LOW_PASS_SLOPE_STRING,
    .pageType     = PAGE_ACTION_TYPE,
    .pageSettId   = PAGE_SETTING_LP_SLO,
    .pageStatus   = PAGE_STATUS_INVALID
};

static tPageNode *lpOnSet[2] ={&lpFreq,&lpSlope};

/**************************** PEQ ******************************/
static tPageNode paraEqNode = //PARA EQ
{
    .numOfBrother = LEVEL_1_NUM_OF_BRO,
    .ppChildren   = &peq[0],
    .pPageText    = PARA_EQ_STRING,
    .pageType     = PAGE_NAVIGATION_TYPE,
    .pageStatus   = PAGE_STATUS_INVALID
};

/**************************** PEQ1 ******************************/
static tPageNode peq1 = //PEQ1
{
    .numOfBrother = 3,
    .ppChildren   = &peq1OnOff[0],
    .pPageText    = PEQ1_STRING,
    .pageType     = PAGE_NAVIGATION_TYPE,
    .pageStatus   = PAGE_STATUS_INVALID
};

static tPageNode peq1Off = //PEQ1 Off
{
    .numOfBrother = 2,
    .ppChildren    = NULL,
    .pPageText    = PEQ1_OFF_STRING,
    .pageType     = PAGE_NAVIGATION_ACTION_TYPE,
    .pageSettId   = PAGE_SETTING_PEQ1_OFF,
    .pageStatus   = PAGE_ACTIVE
};

static tPageNode peq1On = //PEQ1 On
{
    .numOfBrother = 2,
    .ppChildren   = &peq1Set[0],
    .pPageText    = PEQ1_ON_STRING,
    .pageType     = PAGE_NAVIGATION_ACTION_TYPE,
    .pageSettId   = PAGE_SETTING_PEQ1_ON,
    .pageStatus   = PAGE_DEACTIVE
};

static tPageNode *peq1OnOff[] ={&peq1Off, &peq1On};

static tPageNode peq1Freq = //PEQ1 frequency
{
    .numOfBrother = 3,
    .ppChildren    = NULL,
    .pPageText    = PEQ_FREQ_STRING,
    .pageType     = PAGE_ACTION_TYPE,
    .pageSettId   = PAGE_SETTING_PEQ1_FRE,
    .pageStatus   = PAGE_STATUS_INVALID
};
static tPageNode peq1Gain = //PEQ1 gain
{
    .numOfBrother = 3,
    .ppChildren   = NULL,
    .pPageText    = PEQ_BOOST_STRING,
    .pageType     = PAGE_ACTION_TYPE,
    .pageSettId   = PAGE_SETTING_PEQ1_BOOST,
    .pageStatus   = PAGE_STATUS_INVALID
};
static tPageNode peq1Q = //PEQ1 Q
{
    .numOfBrother = 3,
    .ppChildren    = NULL,
    .pPageText    = PEQ_QFACTOR_STRING,
    .pageType     = PAGE_ACTION_TYPE,
    .pageSettId   = PAGE_SETTING_PEQ1_Q,
    .pageStatus   = PAGE_STATUS_INVALID
};

static tPageNode *peq1Set[] ={&peq1Freq, &peq1Gain, &peq1Q};


/**************************** PEQ2 ******************************/
static tPageNode peq2 = //PEQ2
{
    .numOfBrother = 3,
    .ppChildren   = &peq2OnOff[0],
    .pPageText    = PEQ2_STRING,
    .pageType     = PAGE_NAVIGATION_TYPE,
    .pageStatus   = PAGE_STATUS_INVALID
};

static tPageNode peq2Off = //PEQ2 Off
{
    .numOfBrother = 2,
    .ppChildren    = NULL,
    .pPageText    = PEQ2_OFF_STRING,
    .pageType     = PAGE_NAVIGATION_ACTION_TYPE,
    .pageSettId   = PAGE_SETTING_PEQ2_OFF,
    .pageStatus   = PAGE_ACTIVE
};

static tPageNode peq2On = //PEQ1 On
{
    .numOfBrother = 2,
    .ppChildren   = &peq2Set[0],
    .pPageText    = PEQ2_ON_STRING,
    .pageType     = PAGE_NAVIGATION_ACTION_TYPE,
    .pageSettId   = PAGE_SETTING_PEQ2_ON,
    .pageStatus   = PAGE_DEACTIVE
};

static tPageNode *peq2OnOff[] ={&peq2Off, &peq2On};

static tPageNode peq2Freq = //PEQ2 frequency
{
    .numOfBrother = 3,
    .ppChildren   = NULL,
    .pPageText    = PEQ_FREQ_STRING,
    .pageType     = PAGE_ACTION_TYPE,
    .pageSettId   = PAGE_SETTING_PEQ2_FRE,
    .pageStatus   = PAGE_STATUS_INVALID
};
static tPageNode peq2Gain = //PEQ2 gain
{
    .numOfBrother = 3,
    .ppChildren   = NULL,
    .pPageText    = PEQ_BOOST_STRING,
    .pageType     = PAGE_ACTION_TYPE,
    .pageSettId   = PAGE_SETTING_PEQ2_BOOST,
    .pageStatus   = PAGE_STATUS_INVALID
};
static tPageNode peq2Q = //PEQ2 Q
{
    .numOfBrother = 3,
    .ppChildren    = NULL,
    .pPageText    = PEQ_QFACTOR_STRING,
    .pageType     = PAGE_ACTION_TYPE,
    .pageSettId   = PAGE_SETTING_PEQ2_Q,
    .pageStatus   = PAGE_STATUS_INVALID
};

static tPageNode *peq2Set[] ={&peq2Freq, &peq2Gain, &peq2Q};

/**************************** PEQ3 ******************************/
static tPageNode peq3 = //PEQ3
{
    .numOfBrother = 3,
    .ppChildren   = &peq3OnOff[0],
    .pPageText    = PEQ3_STRING,
    .pageType     = PAGE_NAVIGATION_TYPE,
    .pageStatus   = PAGE_STATUS_INVALID
};

static tPageNode peq3Off = //PEQ3 Off
{
    .numOfBrother = 2,
    .ppChildren   = NULL,
    .pPageText    = PEQ3_OFF_STRING,
    .pageType     = PAGE_NAVIGATION_ACTION_TYPE,
    .pageSettId   = PAGE_SETTING_PEQ3_OFF,
    .pageStatus   = PAGE_ACTIVE
};

static tPageNode peq3On = //PEQ3 On
{
    .numOfBrother = 2,
    .ppChildren   = &peq3Set[0],
    .pPageText    = PEQ3_ON_STRING,
    .pageType     = PAGE_NAVIGATION_ACTION_TYPE,
    .pageSettId   = PAGE_SETTING_PEQ3_ON,
    .pageStatus   = PAGE_DEACTIVE
};

static tPageNode *peq3OnOff[] ={&peq3Off, &peq3On};

static tPageNode peq3Freq = //PEQ3 frequency
{
    .numOfBrother = 3,
    .ppChildren   = NULL,
    .pPageText    = PEQ_FREQ_STRING,
    .pageType     = PAGE_ACTION_TYPE,
    .pageSettId   = PAGE_SETTING_PEQ3_FRE,
    .pageStatus   = PAGE_STATUS_INVALID
};
static tPageNode peq3Gain = //PEQ3 gain
{
    .numOfBrother = 3,
    .ppChildren   = NULL,
    .pPageText    = PEQ_BOOST_STRING,
    .pageType     = PAGE_ACTION_TYPE,
    .pageSettId   = PAGE_SETTING_PEQ3_BOOST,
    .pageStatus   = PAGE_STATUS_INVALID
};
static tPageNode peq3Q = //PEQ3 Q
{
    .numOfBrother = 3,
    .ppChildren   = NULL,
    .pPageText    = PEQ_QFACTOR_STRING,
    .pageType     = PAGE_ACTION_TYPE,
    .pageSettId   = PAGE_SETTING_PEQ3_Q,
    .pageStatus   = PAGE_STATUS_INVALID
};

static tPageNode *peq3Set[] ={&peq3Freq, &peq3Gain, &peq3Q};
static tPageNode * peq[] = {&peq1,&peq2,&peq3};

/**************************** RGC ******************************/
static tPageNode RGCNode = //RGC
{
    .numOfBrother = LEVEL_1_NUM_OF_BRO,
    .ppChildren   = &rgcOnOff[0],
    .pPageText    = RGC_STRING,
    .pageType     = PAGE_NAVIGATION_TYPE,
    .pageStatus   = PAGE_STATUS_INVALID
};

static tPageNode rgcOff = //rgc off
{
    .numOfBrother = 2,
    .ppChildren   = NULL,
    .pPageText    = RGC_OFF_STRING,
    .pageType     = PAGE_NAVIGATION_ACTION_TYPE,
    .pageSettId   = PAGE_SETTING_RGC_OFF,
    .pageStatus   = PAGE_DEACTIVE
};
static tPageNode rgcOn = //rgc on
{
    .numOfBrother = 2,
    .ppChildren   = &rgcOnSet[0],
    .pPageText    = RGC_ON_STRING,
    .pageType     = PAGE_NAVIGATION_ACTION_TYPE,
    .pageSettId   = PAGE_SETTING_RGC_ON,
    .pageStatus   = PAGE_ACTIVE
};
static tPageNode *rgcOnOff[] ={&rgcOff, &rgcOn};

static tPageNode rgcFreq = //rgc--frequency(level 3)
{
    .numOfBrother = 2,
    .ppChildren   = NULL,
    .pPageText    = RGC_FREQ_STRING,
    .pageType     = PAGE_ACTION_TYPE,
    .pageSettId   = PAGE_SETTING_RGC_FREQ,
    .pageStatus   = PAGE_STATUS_INVALID
};

static tPageNode rgcSlope = //rgc--slope(level 3)
{
    .numOfBrother = 2,
    .ppChildren   = NULL,
    .pPageText    = RGC_SLOP_STRING,
    .pageType     = PAGE_ACTION_TYPE,
    .pageSettId   = PAGE_SETTING_RGC_SLOPE,
    .pageStatus   = PAGE_STATUS_INVALID
};

static tPageNode *rgcOnSet[2] ={&rgcFreq,&rgcSlope};
/*************************************************************/

static tPageNode phaseNode = //phase
{
    .numOfBrother = LEVEL_1_NUM_OF_BRO,
    .ppChildren   = NULL,
    .pPageText    = PHASE_STRING,
    .pageType     = PAGE_ACTION_TYPE,
    .pageSettId   = PAGE_SETTING_PHASE,
    .pageStatus   = PAGE_STATUS_INVALID
};

/*************************************************************/

static tPageNode polarityNode = //phase
{
    .numOfBrother = LEVEL_1_NUM_OF_BRO,
    .ppChildren   = NULL,
    .pPageText    = POLARITY_STRING,
    .pageType     = PAGE_ACTION_TYPE,
    .pageSettId   = PAGE_SETTING_POLARITY,
    .pageStatus   = PAGE_STATUS_INVALID
};


/**************************** Preset ******************************/
static tPageNode presetNode= //preset
{
    .numOfBrother = LEVEL_1_NUM_OF_BRO,
    .ppChildren   = &preset[0],
    .pPageText    = PRESET_STRING,
    .pageType     = PAGE_NAVIGATION_TYPE,
    .pageStatus   = PAGE_STATUS_INVALID
};

/**************************** Preset1 ******************************/
static tPageNode preset1= //preset
{
    .numOfBrother = 4,
    .ppChildren   = NULL,
    .pPageText    = PRESET_1_CURRENT_STRING,
    .pageType     = PAGE_NAVIG_ACTION_WITH_DELAY_TYPE,
    .pageSettId   = PAGE_SETTING_PRE1_LOAD,
    .pageStatus   = PAGE_STATUS_INVALID
};

/**************************** Preset2 ******************************/
static tPageNode preset2= //preset 2
{
    .numOfBrother = 4,
    .ppChildren   = NULL,
    .pPageText    = PRESET_2_CURRENT_STRING,
    .pageType     = PAGE_NAVIG_ACTION_WITH_DELAY_TYPE,
    .pageSettId   = PAGE_SETTING_PRE2_LOAD,
    .pageStatus   = PAGE_STATUS_INVALID
};


/**************************** Preset3 ******************************/
static tPageNode preset3= //preset 3
{
    .numOfBrother = 4,
    .ppChildren   = NULL,
    .pPageText    = PRESET_3_CURRENT_STRING,
    .pageType     = PAGE_NAVIG_ACTION_WITH_DELAY_TYPE,
    .pageSettId   = PAGE_SETTING_PRE3_LOAD,
    .pageStatus   = PAGE_STATUS_INVALID
};

/**************************** Preset default ******************************/

static tPageNode presetDefualt= //preset defualt
{
    .numOfBrother = 4,
    .ppChildren   = NULL,
    .pPageText    = PRESET_DEFUALT_STRING,
    .pageType     = PAGE_NAVIG_ACTION_WITH_DELAY_TYPE,
    .pageSettId   = PAGE_SETTING_PRE4_LOAD,
    .pageStatus   = PAGE_STATUS_INVALID
};

static tPageNode *preset[] ={&preset1, &preset2, &preset3, &presetDefualt};


/**************************** Save to ******************************/

static tPageNode saveTo= //SaveTo
{
    .numOfBrother = LEVEL_1_NUM_OF_BRO,
    .ppChildren   = &presetSaveToSet[0],
    .pPageText    = SAVE_TO_STRING,
    .pageType     = PAGE_NAVIGATION_TYPE,
    .pageStatus   = PAGE_STATUS_INVALID
};


/**************************** Save to Preset1 ******************************/
static tPageNode saveToPreset1= //preset
{
    .numOfBrother = 3,
    .ppChildren   = NULL,
    .pPageText    = PRESET_1_CURRENT_STRING,
    .pageType     = PAGE_NAVIG_ACTION_WITH_DELAY_TYPE,
    .pageStatus   = PAGE_STATUS_INVALID,
    .pageSettId   = PAGE_SETTING_PRE1_SAVE
};

/*************************************************/

/**************************** Save to Preset2 ******************************/
static tPageNode saveToPreset2= //preset
{
    .numOfBrother = 3,
    .ppChildren   = NULL,
    .pPageText    = PRESET_2_CURRENT_STRING,
    .pageType     = PAGE_NAVIG_ACTION_WITH_DELAY_TYPE,
    .pageStatus   = PAGE_STATUS_INVALID,
    .pageSettId   = PAGE_SETTING_PRE2_SAVE
};

/*************************************************/

/**************************** Save to Preset3 ******************************/
static tPageNode saveToPreset3= //preset
{
    .numOfBrother = 3,
    .ppChildren   = NULL,
    .pPageText    = PRESET_3_CURRENT_STRING,
    .pageType     = PAGE_NAVIG_ACTION_WITH_DELAY_TYPE,
    .pageStatus   = PAGE_STATUS_INVALID,
    .pageSettId   = PAGE_SETTING_PRE3_SAVE
};

static tPageNode *presetSaveToSet[] ={&saveToPreset1, &saveToPreset2, &saveToPreset3};
/*************************************************/

/**************************** Setting ******************************/

static tPageNode settingNode= //sys settings
{
    .numOfBrother = LEVEL_1_NUM_OF_BRO,
    .ppChildren   = &settings[0],
    .pPageText    = SETTING_STRING,
    .pageType     = PAGE_NAVIGATION_TYPE,
    .pageStatus   = PAGE_STATUS_INVALID
};
static tPageNode settDisplay=
{
    .numOfBrother = 4,
    .ppChildren   = NULL,
    .pPageText    = DISPLAY_STRING,
    .pageType     = PAGE_ACTION_TYPE,
    .pageSettId   = PAGE_SETTING_DISPLAY,
    .pageStatus   = PAGE_STATUS_INVALID
};
static tPageNode settTimeout=
{
    .numOfBrother = 4,
    .ppChildren   = NULL,
    .pPageText    = TIMEOUT_STRING,
    .pageType     = PAGE_ACTION_TYPE,
    .pageSettId   = PAGE_SETTING_TIMEOUT,
    .pageStatus   = PAGE_STATUS_INVALID
};

static tPageNode standbyNode = //standby mode
{
    .numOfBrother = 4,
    .ppChildren   = NULL,
    .pPageText    = STANDBY_STRING,
    .pageType     = PAGE_ACTION_TYPE,
    .pageSettId   = PAGE_SETTING_STANDBY,
    .pageStatus   = PAGE_STATUS_INVALID
};

/**************************** factory reset ******************************/
static tPageNode fcRestNode=
{
    .numOfBrother = 4,
    .ppChildren    = &fcResetSetting[0],
    .pPageText    = RESET_STRING,
    .pageType     = PAGE_NAVIGATION_TYPE,
    .pageStatus   = PAGE_STATUS_INVALID
};

static tPageNode resetYesOrNo =
{
    .numOfBrother = 1,
    .ppChildren   = NULL,
    .pPageText    = YES_NO_STRING,
    .pageType     = PAGE_EXIT_TYPE,
    .pageSettId   = PAGE_SETTING_RESET_YES,
    .pageStatus   = PAGE_STATUS_INVALID
};

static tPageNode *fcResetSetting[] ={&resetYesOrNo};

/****************************End of factory reset ******************************/

static tPageNode *settings[] ={&settDisplay, &settTimeout, &standbyNode, &fcRestNode};

/******************************************************************************/
static tPageNode * rootLevel[] =
{
    &volNode,       //0
    &lpFilterNode,  //1
    &phaseNode,     //2
    &polarityNode,  //3
    &paraEqNode,    //4
    &RGCNode,       //5
    &presetNode,    //6
    &saveTo,        //7
    &settingNode    //8
};

static tPageNode * nodesToUpdate[] = {&lpOff,&lpOn,&peq1Off,&peq1On,&peq2Off,&peq2On,&peq3Off,&peq3On,&rgcOff,&rgcOn};

static tKeyToPageNodeConf volUpButtonPageNode =
{
    .keyId          = VOLUME_UP_KEY,
    .keyEvt         = KEY_EVT_DOWN,
    .pPageNode      = &volNode,
    .expireTime     = 3000,
    .backToPrePage  = TRUE,
    .pNext          = &volDownButtonPageNode
};

static tKeyToPageNodeConf volDownButtonPageNode =
{
    .keyId          = VOLUME_DOWN_KEY,
    .keyEvt         = KEY_EVT_DOWN,
    .pPageNode      = &volNode,
    .expireTime     = 3000,
    .backToPrePage  = TRUE,
    .pNext          = &preset1LoadButtonPageNode
};

static tKeyToPageNodeConf preset1LoadButtonPageNode =
{
    .keyId          = PRESET_KEY_1_LOAD,
    .keyEvt         = KEY_EVT_DOWN,
    .pPageNode      = &preset1,
    .expireTime     = 3000,
    .backToPrePage  = TRUE,
    .pNext          = &preset2LoadButtonPageNode
};

static tKeyToPageNodeConf preset2LoadButtonPageNode =
{
    .keyId          = PRESET_KEY_2_LOAD,
    .keyEvt         = KEY_EVT_DOWN,
    .pPageNode      = &preset2,
    .expireTime     = 3000,
    .backToPrePage  = TRUE,
    .pNext          = &preset3LoadButtonPageNode
};

static tKeyToPageNodeConf preset3LoadButtonPageNode =
{
    .keyId          = PRESET_KEY_3_LOAD,
    .keyEvt         = KEY_EVT_DOWN,
    .pPageNode      = &preset3,
    .expireTime     = 3000,
    .backToPrePage  = TRUE,
    .pNext          = &preset4LoadButtonPageNode
};

static tKeyToPageNodeConf preset4LoadButtonPageNode =
{
    .keyId          = PRESET_KEY_4_LOAD,
    .keyEvt         = KEY_EVT_DOWN,
    .pPageNode      = &presetDefualt,
    .expireTime     = 3000,
    .backToPrePage  = TRUE,
    .pNext          = &preset1SaveButtonPageNode
};

static tKeyToPageNodeConf preset1SaveButtonPageNode =
{
    .keyId          = PRESET_KEY_1_SAVE,
    .keyEvt         = KEY_EVT_DOWN,
    .pPageNode      = &saveToPreset1,
    .expireTime     = 3000,
    .backToPrePage  = TRUE,
    .pNext          = &preset2SaveButtonPageNode
};
static tKeyToPageNodeConf preset2SaveButtonPageNode =
{
    .keyId          = PRESET_KEY_2_SAVE,
    .keyEvt         = KEY_EVT_DOWN,
    .pPageNode      = &saveToPreset2,
    .expireTime     = 3000,
    .backToPrePage  = TRUE,
    .pNext          = &preset3SaveButtonPageNode
};
static tKeyToPageNodeConf preset3SaveButtonPageNode =
{
    .keyId          = PRESET_KEY_3_SAVE,
    .keyEvt         = KEY_EVT_DOWN,
    .pPageNode      = &saveToPreset3,
    .expireTime     = 3000,
    .backToPrePage  = TRUE,
    .pNext          = &IRVolUpButtonPageNode
};

static tKeyToPageNodeConf IRVolUpButtonPageNode =
{
    .keyId          = IR_VOLUME_UP_KEY,
    .keyEvt         = KEY_EVT_DOWN,
    .pPageNode      = &volNode,
    .expireTime     = 3000,
    .backToPrePage  = TRUE,
    .pNext          = &IRVolDownButtonPageNode
};

static tKeyToPageNodeConf IRVolDownButtonPageNode =
{
    .keyId          = IR_VOLUME_DOWN_KEY,
    .keyEvt         = KEY_EVT_DOWN,
    .pPageNode      = &volNode,
    .expireTime     = 3000,
    .backToPrePage  = TRUE,
    .pNext          = NULL
};

static tMenu menu =
{
    .ppMenuEntrance     = rootLevel,
    .menuLoopBack       = TRUE,
    .pKeyToPageListHead = &volUpButtonPageNode,
    .navigActionwithDelayTime = 2000
};
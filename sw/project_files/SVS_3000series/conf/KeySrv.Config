/**
*  @file      KeySrv.Cofig
*  @brief     Config data for key server
*  @author    Bob.Xu
*  @date      27-Feb-2014
*  @copyright Tymphany Ltd.
*/
#include "AdcDrv.h"
#include "GpioDrv.h"
#include "AdcKeyDrv.h"
#include "GpioKeyDrv.h"

#define DEBOUNCE_SAMP_NUM               4
#define KEY_SERVER_TICK_MS              10
#define COMB_KEY_FLAG_RESET             0

/* Private variables */

static cAdcKeyDrv adcKeySet[NUM_OF_ADC_KEY];
static cADCDrv adcDrvForKey;


#ifdef HAS_INTERRUPT_WAKE_UP_KEY
#define POWER_MANAGER   MAIN_APP_ID
#endif

tKeySrvConfig keySrvConfig =
{
    /*
    * Press type Duration
    * Short Press (SP)               X <= 1.5s
    * Long Press (LP)         1.5s < X <= 5.0s
    * Very Long Press (VLP)   5.0s < X <= 7.5s
    * Very Very Long Press (VVLP)    X > 7.5s
    * Press and Hold (P&H)
    * -
    * Double Press (DP)       0.5s between presses
    */
    .timing.debounceTime = 40, /* ms */
    .timing.repeatStartTime= 500, /* ms */
    .timing.longPressTime = 1300,  /* Adjusted to 1.3 S for better UX. Refer to : https://pm.tymphany.com/SpiraTeam/243/Incident/11596.aspx */ 
    .timing.veryLongPressTime = 5000, /* ms */

    /* If repeatHoldTime[x] > 0, then after sent KEY_EVT_HOLD, post KEY_EVT_REPEAT in every repeatHoldTime[x] *
     * for the specific key until veryLongPressTime                                                            *
     * If repeatHoldTime[x] = 0, it means that it is not required to send KEY_EVT_REPEAT for the specific key. */
    .timing.repeatHoldTime[PLUS_KEY] = 80,  /*  this value should be changed according to user cases in applicaiton */
    .timing.repeatHoldTime[MINUS_KEY] = 80,   /* this value should be changed according to user cases in applicaiton*/

    .keyboardNum = KEYBOARD_NUMBER,
    .keyboardSet =
    {
        {ADC_DEV_TYPE, (cKeyDrv*)adcKeySet,  sizeof(cAdcKeyDrv),   &adcDrvForKey},
        /**
         * you can add other types of keyboard here
         */
    }
};


#ifdef HAS_COMB_KEY
#define NUM_OF_COMB_KEYS    4

//The definitation of Combine key must the same as eCombinedKey on MainApp_priv.h
static tCombKeyElem  combKeyGroupNext[] =
{
    {.keyId = CONNECT_KEY,     .combKeyTrigEvt = KEY_EVT_DOWN},
    {.keyId = VOLUME_UP_KEY,   .combKeyTrigEvt = KEY_EVT_DOWN},
};

static tCombKeyElem  combKeyGroupPrev[] =
{
    {.keyId = CONNECT_KEY,     .combKeyTrigEvt = KEY_EVT_DOWN},
    {.keyId = VOLUME_DOWN_KEY, .combKeyTrigEvt = KEY_EVT_DOWN},
};

static tCombKeyElem  combKeyGroupConfig[] =
{
    {.keyId = STANDBY_KEY,    .combKeyTrigEvt = KEY_EVT_HOLD},
    {.keyId = RESET_KEY,      .combKeyTrigEvt = KEY_EVT_HOLD},
};

static tCombKeyElem  combKeyGroupShopMode[] =
{
    {.keyId = CONNECT_KEY,    .combKeyTrigEvt = KEY_EVT_VERY_LONG_HOLD},
    {.keyId = RESET_KEY,      .combKeyTrigEvt = KEY_EVT_VERY_LONG_HOLD},
};

static tCombDef combKeysDef[NUM_OF_COMB_KEYS] =
{
    {
        .combKeyId = NEXT_KEY,
        .combKeyType = NORMAL_KEY_COMB_TYPE,
        .numOfKeyElem = 2,
        .timeElapse = 0,
        .resetTime = 1000, /* 1 second */
        .pCombKeyElems = combKeyGroupNext,
    },
    {
        .combKeyId = PREV_KEY,
        .combKeyType = NORMAL_KEY_COMB_TYPE,
        .numOfKeyElem = 2,
        .timeElapse = 0,
        .resetTime = 1000, /* 1 second */
        .pCombKeyElems = combKeyGroupPrev,
    },
    {
        .combKeyId = CONFIG_KEY,
        .combKeyType = NORMAL_KEY_COMB_TYPE,
        .numOfKeyElem = 2,
        .timeElapse = 0,
        .resetTime = 1000, /* 1 second */
        .pCombKeyElems = combKeyGroupConfig,
    },
    {
        .combKeyId = SHOP_MODE_KEY,
        .combKeyType = NORMAL_KEY_COMB_TYPE,
        .numOfKeyElem = 2,
        .timeElapse = 0,
        .resetTime = 1000, /* 1 second */
        .pCombKeyElems = combKeyGroupShopMode,
    },
};
#endif




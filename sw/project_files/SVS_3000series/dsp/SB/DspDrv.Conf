/**
*  @file      vol_tab.h
*  @brief     This file implements the volume table for the Audio DSP ADAU1761.
*  @modified  Daniel.Duan
*  @date      2014-09-16
*  @copyright Tymphany Ltd.
*/

#ifndef __VOL_TAB_H__
#define __VOL_TAB_H__

#include "product.config"

#define HAS_PEAKING_FILTER
#define HAS_TONE_LOW_SHELF_FILTER
#define HAS_BUTTWORTH_LOW_PASS_FILTER
#define HAS_BUTTWORTH_HIGH_PASS_FILTER
#define HAS_FIRST_ORDER_HIGH_PASS_FILTER
#define HAS_FIRST_ORDER_LOW_PASS_FILTER

/* Dsp cfg parts, all are product-dependent */
#define DSP_SAMPLING_FREQ           (48000)
#define EQ_CTRL_NUM             	(7)



/**************** EQ, Volume, Phase, Polarity Control, Music Streaming address ******************/
#define RGC_CTRL_ADDRESS            MOD_EQS_RGC_ALG0_STAGE0_B0_ADDR
#define LP_CTRL_ADDRESS             MOD_EQS_LP_FILTER_ALG0_LOW_FILT1_PARAMB0_ADDR
#define LP_SWITCH_ADDRESS           MOD_EQS_LPSWITCH_MONOSWSLEW_ADDR
#define HP_CTRL_ADDRESS             MOD_EQS_USERHPVARIEDSLOPE_ALG0_STAGE0_B0_ADDR
#define TUNNING_ADDRESS             MOD_EQS_EQ_ALG0_STAGE0_B0_ADDR
#define PEQ_CTRL_ADDRESS            MOD_EQS_PEQ_ALG0_STAGE0_B0_ADDR
#define VOLUME_CTRL_ADDRESS         MOD_VOLUMEGATE_INTERFACEREAD1_GPIOINTFACE0RDWR_ADDR
#define ADAU1761_GET_STREAM_STATUS_ADDR MOD_SIGNAL_DETECTION_READBACK1_READBACKALGSIGMA2001_ADDR
#define VOLUME_PGA_GAIN_ADJ_ADDRESS MOD_VOLUMEGATE_SINGLE1_ALG0_GAINS200ALGGROWDP1GAINTARGET_ADDR
#define EQ_BYPASS_ADDR              MOD_EQS_BYPASS_MONOSWSLEW_ADDR

#define INVALID_DELAY_CHANNEL           -1
#define DELAY_CHANNEL_0                 0
#define DELAY_CHANNEL_1                 1
#define DELAY_CHANNEL_0_ADDRESS         MOD_PHASE_DELAY0_CTRL0_DELAYAMT_ADDR
#define DELAY_CHANNEL_1_ADDRESS         MOD_PHASE_DELAY1_CTRL1_DELAYAMT_ADDR
#define DELAY_CHANNEL_CTRL_ADDRESS      MOD_PHASE_INVERTSWITCH_2_DCINPALG5_ADDR

#define INVALID_POLARITY_CHANNEL        -1
#define POLARITY_CHANNEL_0              0
#define POLARITY_CHANNEL_1              1
#define POLARITY_CHANNEL_0_ADDRESS      MOD_PHASE_INV0_CTRL0_EQ1940INVERT3GAIN_ADDR
#define POLARITY_CHANNEL_1_ADDRESS      MOD_PHASE_INV1_CTRL1_EQ1940INVERT2GAIN_ADDR
#define POLARITY_CHANNEL_CTRL_ADDRESS   MOD_PHASE_INVERTSWITCH_DCINPALG4_ADDR


#define LIMITER_LEVEL_MINUS_19_DB        (-19)
#define LIMITER_LEVEL_MINUS_22_DB        (-22)
#define LIMITER_LEVEL_MINUS_24_DB        (-24)
#define LIMITER_LEVEL_MINUS_26_DB        (-26)
#define LIMITER_LEVEL_MINUS_28_DB        (-28)
#define LIMITER_LEVEL_MINUS_30_DB        (-30)
#define LIMITER_LEVEL_MINUS_90_DB        (-90)

/**************** limiter coefficient data ******************/
#define LIMITER_COEFFICIENT_CTRL_ADDRESS       MOD_LIMITERS_ANTICLIPLIMITER_ALG0_STDRMSCOMPRESSORALG10_ADDR
#define LIMITER_COEFFICIENT_DATA_SIZE	136

const static uint8 limiter_minus_20[LIMITER_COEFFICIENT_DATA_SIZE] =
{
    0x00,0x80,0x00,0x00,
    0x00,0x80,0x00,0x00,
    0x00,0x80,0x00,0x00,
    0x00,0x80,0x00,0x00,
    0x00,0x80,0x00,0x00,
    0x00,0x80,0x00,0x00,
    0x00,0x80,0x00,0x00,
    0x00,0x80,0x00,0x00,
    0x00,0x80,0x00,0x00,
    0x00,0x80,0x00,0x00,
    0x00,0x80,0x00,0x00,
    0x00,0x80,0x00,0x00,
    0x00,0x80,0x00,0x00,
    0x00,0x80,0x00,0x00,
    0x00,0x80,0x00,0x00,
    0x00,0x80,0x00,0x00,
    0x00,0x80,0x00,0x00,
    0x00,0x80,0x00,0x00,
    0x00,0x80,0x00,0x00,
    0x00,0x80,0x00,0x00,
    0x00,0x80,0x00,0x00,
    0x00,0x80,0x00,0x00,
    0x00,0x80,0x00,0x00,
    0x00,0x80,0x00,0x00,
    0x00,0x80,0x00,0x00,
    0x00,0x65,0xE8,0x8D,
    0x00,0x48,0x65,0x2E,
    0x00,0x33,0x6D,0xE2,
    0x00,0x24,0x88,0xFB,
    0x00,0x19,0xF4,0x4F,
    0x00,0x12,0x70,0x16,
    0x00,0x0D,0x19,0x20,
    0x00,0x09,0x4E,0x0B,
    0x00,0x06,0x9C,0x32
};


const static uint8 limiter_minus_21[LIMITER_COEFFICIENT_DATA_SIZE] =
{
    0x00,0x80,0x00,0x00,
    0x00,0x80,0x00,0x00,
    0x00,0x80,0x00,0x00,
    0x00,0x80,0x00,0x00,
    0x00,0x80,0x00,0x00,
    0x00,0x80,0x00,0x00,
    0x00,0x80,0x00,0x00,
    0x00,0x80,0x00,0x00,
    0x00,0x80,0x00,0x00,
    0x00,0x80,0x00,0x00,
    0x00,0x80,0x00,0x00,
    0x00,0x80,0x00,0x00,
    0x00,0x80,0x00,0x00,
    0x00,0x80,0x00,0x00,
    0x00,0x80,0x00,0x00,
    0x00,0x80,0x00,0x00,
    0x00,0x80,0x00,0x00,
    0x00,0x80,0x00,0x00,
    0x00,0x80,0x00,0x00,
    0x00,0x80,0x00,0x00,
    0x00,0x80,0x00,0x00,
    0x00,0x80,0x00,0x00,
    0x00,0x80,0x00,0x00,
    0x00,0x80,0x00,0x00,
    0x00,0x7F,0x63,0xBC,
    0x00,0x5A,0xEE,0x3B,
    0x00,0x40,0x98,0xBE,
    0x00,0x2D,0xE3,0x9F,
    0x00,0x20,0x99,0x74,
    0x00,0x17,0x28,0x92,
    0x00,0x10,0x73,0xA1,
    0x00,0x0B,0xAF,0xEC,
    0x00,0x08,0x4D,0x72,
    0x00,0x05,0xE5,0xE8
};

const uint8 limiter_minus_22[LIMITER_COEFFICIENT_DATA_SIZE] = 
{
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x72, 	0x36, 	0x27,
	0x00, 	0x51, 	0x22, 	0xA5,
	0x00, 	0x39, 	0xA3, 	0x5D,
	0x00, 	0x28, 	0xF2, 	0x24,
	0x00, 	0x1D, 	0x16, 	0x76,
	0x00, 	0x14, 	0xA9, 	0xEE,
	0x00, 	0x0E, 	0xAD, 	0xF1,
	0x00, 	0x0A, 	0x6D, 	0xA0,
	0x00, 	0x07, 	0x68, 	0x7D,
	0x00, 	0x05, 	0x43, 	0x41
};

const static uint8 limiter_minus_24[LIMITER_COEFFICIENT_DATA_SIZE] = 
{
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x7F, 	0x52, 	0x6A,
	0x00, 	0x5A, 	0xEE, 	0x3B,
	0x00, 	0x40, 	0x98, 	0xBE,
	0x00, 	0x2D, 	0xE3, 	0x9F,
	0x00, 	0x20, 	0x99, 	0x74,
	0x00, 	0x17, 	0x28, 	0x92,
	0x00, 	0x10, 	0x73, 	0xA1,
	0x00, 	0x0B, 	0xAF, 	0xEB,
	0x00, 	0x08, 	0x4D, 	0x72,
	0x00, 	0x05, 	0xE5, 	0xE8,
	0x00, 	0x04, 	0x30, 	0xA1
};

const static uint8 limiter_minus_26[LIMITER_COEFFICIENT_DATA_SIZE] = 
{
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x65, 	0xE8, 	0x8D,
	0x00, 	0x48, 	0x65, 	0x2E,
	0x00, 	0x33, 	0x6D, 	0xE2,
	0x00, 	0x24, 	0x88, 	0xFB,
	0x00, 	0x19, 	0xF4, 	0x4F,
	0x00, 	0x12, 	0x70, 	0x16,
	0x00, 	0x0D, 	0x19, 	0x20,
	0x00, 	0x09, 	0x4E, 	0x0B,
	0x00, 	0x06, 	0x9C, 	0x31,
	0x00, 	0x04, 	0xB2, 	0x20,
	0x00, 	0x03, 	0x55, 	0xFC
};

const static uint8 limiter_minus_28[LIMITER_COEFFICIENT_DATA_SIZE] = 
{
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x72, 	0x36, 	0x27,
	0x00, 	0x51, 	0x22, 	0xA5,
	0x00, 	0x39, 	0xA3, 	0x5D,
	0x00, 	0x28, 	0xF2, 	0x24,
	0x00, 	0x1D, 	0x16, 	0x76,
	0x00, 	0x14, 	0xA9, 	0xEE,
	0x00, 	0x0E, 	0xAD, 	0xF1,
	0x00, 	0x0A, 	0x6D, 	0x9F,
	0x00, 	0x07, 	0x68, 	0x7D,
	0x00, 	0x05, 	0x43, 	0x41,
	0x00, 	0x03, 	0xBD, 	0x15,
	0x00, 	0x02, 	0xA7, 	0xE8
};

const static uint8 limiter_minus_29[LIMITER_COEFFICIENT_DATA_SIZE] = 
{
    0x00,0x80,0x00,0x00,
    0x00,0x80,0x00,0x00,
    0x00,0x80,0x00,0x00,
    0x00,0x80,0x00,0x00,
    0x00,0x80,0x00,0x00,
    0x00,0x80,0x00,0x00,
    0x00,0x80,0x00,0x00,
    0x00,0x80,0x00,0x00,
    0x00,0x80,0x00,0x00,
    0x00,0x80,0x00,0x00,
    0x00,0x80,0x00,0x00,
    0x00,0x80,0x00,0x00,
    0x00,0x80,0x00,0x00,
    0x00,0x80,0x00,0x00,
    0x00,0x80,0x00,0x00,
    0x00,0x80,0x00,0x00,
    0x00,0x80,0x00,0x00,
    0x00,0x80,0x00,0x00,
    0x00,0x80,0x00,0x00,
    0x00,0x80,0x00,0x00,
    0x00,0x80,0x00,0x00,
    0x00,0x80,0x00,0x00,
    0x00,0x65,0xE8,0x8D,
    0x00,0x48,0x65,0x2E,
    0x00,0x33,0x6D,0xE2,
    0x00,0x24,0x88,0xFB,
    0x00,0x19,0xF4,0x4F,
    0x00,0x12,0x70,0x16,
    0x00,0x0D,0x19,0x20,
    0x00,0x09,0x4E,0x0B,
    0x00,0x06,0x9C,0x31,
    0x00,0x04,0xB2,0x20,
    0x00,0x03,0x55,0xFC,
    0x00,0x02,0x5E,0xAB

};

const static uint8 limiter_minus_30[LIMITER_COEFFICIENT_DATA_SIZE] = 
{
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x80, 	0x00, 	0x00,
	0x00, 	0x7F, 	0x2F, 	0xD0,
	0x00, 	0x5A, 	0xEE, 	0x3B,
	0x00, 	0x40, 	0x98, 	0xBE,
	0x00, 	0x2D, 	0xE3, 	0x9F,
	0x00, 	0x20, 	0x99, 	0x74,
	0x00, 	0x17, 	0x28, 	0x92,
	0x00, 	0x10, 	0x73, 	0xA1,
	0x00, 	0x0B, 	0xAF, 	0xEC,
	0x00, 	0x08, 	0x4D, 	0x72,
	0x00, 	0x05, 	0xE5, 	0xE8,
	0x00, 	0x04, 	0x30, 	0xA1,
	0x00, 	0x02, 	0xF9, 	0xFE,
	0x00, 	0x02, 	0x1D, 	0x51
};

#endif



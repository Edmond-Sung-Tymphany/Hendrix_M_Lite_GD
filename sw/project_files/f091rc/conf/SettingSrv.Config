#define SETTING_RESEND_LIMIT    3
#define PAGE_SIZE               2048        // # of 32-bit Instructions per Page
#define SETTING_SAVE_MS         5000
#define IDLE_TIMEOUT_MS         3000
#define TIMER_PERIOD_MS         1000

typedef struct tSettingEntry
{
    tBatteryInfo    bi;             /**< SETID_BATT_INFO    */
    uint8   vol_level;              /**< SETID_VOLUME       */
    bool    isAcPlugIn;             /**< SETID_AC_STATUS    */
    eAudioChannel channel;
    bool isAuxInPlugIn;
    uint8 maxVolume;
    bool isMusicPlaying;            /***< SETID_MUSIC_DET */
} tSettingEntry;

static tSettingEntry setting;

static tSettingDatabase settingDB[SETID_MAX] =
{
    { &setting.bi,          sizeof(setting.bi),         SETTING_ATTR_VALID},
    { &setting.vol_level,   sizeof(setting.vol_level),   SETTING_ATTR_VALID},
    { &setting.isAcPlugIn,  sizeof(setting.isAcPlugIn),  SETTING_ATTR_VALID},
    /*DSP_INIT_DATA*/
    { NULL,                 15*PAGE_SIZE,               SETTING_ATTR_VALID | SETTING_ATTR_NVM},
    /*DSP_TUNABLE_PART*/
    { NULL,                 PAGE_SIZE,                  SETTING_ATTR_VALID | SETTING_ATTR_NVM},
    { &setting.channel,       sizeof(setting.channel),     SETTING_ATTR_VALID},
    { &setting.isAuxInPlugIn, sizeof(setting.isAuxInPlugIn), SETTING_ATTR_VALID},
    { &setting.maxVolume,   sizeof(setting.maxVolume),   SETTING_ATTR_VALID},
    { &setting.isMusicPlaying, sizeof(setting.isMusicPlaying), SETTING_ATTR_VALID},
};

#define SETT_PAGE_ROM_ADDR      0x0801BC00
#define SETT_ELEMENT_MAX_SIZE   0x0100

static const tSettingRomMap settingRomMap[] =
{
    { SETID_DSP_INIT_DATA,      0x0801C000  },
    { SETID_DSP_TUNABLE_PART,   0x0801FC00  },
};


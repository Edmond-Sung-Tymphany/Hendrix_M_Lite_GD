/*
-------------------------------------------------------------------------------
TYMPHANY LTD





                  Menu config
                  -------------------------

                  SW Module Document




@file        Menu.Config
@brief       This file defines the menus.
@author      Bob.Xu 
@date        2014-08-12
@copyright (c) Tymphany Ltd. All rights reserved.

Change History:
VERSION    : 1    DRAFT      2014-08-12     Bob.Xu 
DESCRIPTION: First Draft. Generated by newclass.py
SCO/ERROR  : 
-------------------------------------------------------------------------------
*/

static const uint8 displayText[][NUM_OF_SCREEN_DIGIT + 1] = 
{
#if defined(CES_2015_SWS_002_SUB)
  "WELCOME ", //0
  "CES 2015", //1
#elif defined(SVS_14_ULTRA_SB)
  "  SVS   ", //0
  "ULTRA SB", //1
#elif defined(SVS_14_ULTRA_PB)
  "  SVS   ", //0
  "ULTRA PB", //1
#else
  "  SVS   ", //0
  "ULTRA PC", //1
#endif
  "GOODBYE ", //2
  "VOLUME  ", //3
  "LP FILT ", //4
  " LP OFF ", //5
  " LP ON  ", //6
  "LP-FREQ ", //7
  "LP-SLOPE", //8
  "HP FILT ", //9
  " HP OFF ", //10
  " HP ON  ", //11
  "HP-FREQ ", //12
  "HP-SLOPE", //13
  "PHASE   ", //14
  "Delay   ", //15
  "PARA EQ ", //16
  "  PEQ1  ", //17
  "PEQ1 OFF", //18
  "PEQ1 ON ", //19
  "  PEQ2  ", //20
  "PEQ2 OFF", //21
  "PEQ2 ON ", //22
  "  PEQ3  ", //23
  "PEQ3 OFF", //24
  "PEQ3 ON ", //25
  "  FREQ  ", //26
  " BOOST  ", //27
  "QFACTOR ", //28
  "RGC     ", //29
  " RGC OFF", //30
  " RGC ON ", //31
  "PRESET  ", //32
  "PRESET 1", //33
  "PR1 LOAD", //34
  "PR1 SAVE", //35
  "PRESET 2", //36
  "PR2 LOAD", //37
  "PR2 SAVE", //38
  "PRESET 3", //39
  "PR3 LOAD", //40
  "PR3 SAVE", //41
  "SETTING ", //42
  "DISPLAY ", //43
  "TIMEOUT ", //44
  "STANDBY ", //45
  "LPF%3dHz", //46
  "LPS%3ddB", //47
  "  %3dSEC", //48
  "   %3dMS", //49
  " LOADED ", //50
  " SAVED  ", //51
  " EMPTY  ", //52
  "    %3d ", //53 degree
  "   OFF  ", //54
  "  LOGO  ", //55
  "P1Q%5.1f", //56
  "  AUTO  ", //57
  " MANUAL ", //58
  "TRIGGER ", //59
  "        ", //60
  "HPF%3dHz", //61
  "HPS%3ddB", //62
  "P1F%3dHz", //63
  "P1B%3ddB", //64
  "P2F%3dHz", //65
  "P2B%3ddB", //66
  "P2Q%5.1f", //67
  "P3F%3dHz", //68
  "P3B%3ddB", //69
  "P3Q%5.1f", //70
  " V %3ddB", //71
  "   BT   ", //72
  " BT ON  ", //73
  " BT OFF ", //74
  "CLEAR BT", //75
  " YES/NO ", //76
  "  DONE  ", //77
  " RESET  ", //78
  "RGC FREQ", //79
  "RGC SLOP", //80
  "RGC%3dHz", //81
  "SL %3ddB", //82
};

const tMenuDataAttr menuDataAttr[] =
{
/*   settingId               min    max  default  step  unit*/
  {PAGE_SETTING_LP_FRE,     300,   2000,  800,  50,  DSP_EQ_CTRL_USER_LP, displayText[46]},
  {PAGE_SETTING_LP_SLO,     60,    240,   120,  60,  DSP_EQ_CTRL_USER_LP, displayText[47]},
  {PAGE_SETTING_POLARI,     0 ,    1800,  0,    150, DSP_PHASE_SETT_ID,   displayText[53]},
  {PAGE_SETTING_PEQ1_FRE,   200,   2000,  500,  50,  DSP_EQ_CTRL_PEQ1,    displayText[63]},
  {PAGE_SETTING_PEQ1_BOOST, -120,  60,    0,    10,  DSP_EQ_CTRL_PEQ1,    displayText[64]},
  {PAGE_SETTING_PEQ1_Q,     0,     100,   10,   2,   DSP_EQ_CTRL_PEQ1,    displayText[56]},
  {PAGE_SETTING_PEQ2_FRE,   200,   2000,  500,  50,  DSP_EQ_CTRL_PEQ2,    displayText[65]},
  {PAGE_SETTING_PEQ2_BOOST, -120,  60,    0,    10,  DSP_EQ_CTRL_PEQ2,    displayText[66]},
  {PAGE_SETTING_PEQ2_Q,     0,     100,   10,   2,   DSP_EQ_CTRL_PEQ2,    displayText[67]},
  {PAGE_SETTING_PEQ3_FRE,   200,   2000,  500,  50,  DSP_EQ_CTRL_PEQ3,    displayText[68]},
  {PAGE_SETTING_PEQ3_BOOST, -120,  60,    0,    10,  DSP_EQ_CTRL_PEQ3,    displayText[69]},
  {PAGE_SETTING_PEQ3_Q,     0,     100,   10,   2,   DSP_EQ_CTRL_PEQ3,    displayText[70]},
  {PAGE_SETTING_RGC_FREQ,   250,   400,   250,  60,  DSP_EQ_CTRL_RGC,     displayText[81]},
  {PAGE_SETTING_RGC_SLOPE,  60,    120,   120,  60,  DSP_EQ_CTRL_RGC,     displayText[82]},
  {PAGE_SETTING_LP_STATUS,  0,     10,    0,    0,   DSP_EQ_CTRL_USER_LP, NULL}, //0 means OFF, 10 means ON
  {PAGE_SETTING_PEQ1_STATUS,0,     10,    0,    0,   DSP_EQ_CTRL_PEQ1,    NULL},
  {PAGE_SETTING_PEQ2_STATUS,0,     10,    0,    0,   DSP_EQ_CTRL_PEQ2,    NULL},
  {PAGE_SETTING_PEQ3_STATUS,0,     10,    0,    0,   DSP_EQ_CTRL_PEQ3,    NULL},
  {PAGE_SETTING_RGC_STATUS, 0,     10,    0,    0,   DSP_EQ_CTRL_RGC,     NULL},
  {PAGE_SETTING_VOL,        -600,  0,    -200,  10,  DSP_VOLUME_SETT_ID,  displayText[71]},
  {PAGE_SETTING_DISPLAY,    0,     20,    0,    10,  DSP_SETT_ID_MAX, NULL},
  {PAGE_SETTING_TIMEOUT,    100,   600,   100,  100, DSP_SETT_ID_MAX, displayText[48]},
  {PAGE_SETTING_STANDBY,    0,     20,    0,    10,  DSP_SETT_ID_MAX, displayText[56]},
  {PAGE_SETTING_TUNNING,    120,   200,   200,   40, DSP_TUNNING_SETT_ID, displayText[46]},
};

static const tPageNode * rootLevel[];
const static tPageNode * lpOnOff[];
const static tPageNode * lpOnSett[];
const static tPageNode * peq[];
const static tPageNode * peq1OnOff[];
const static tPageNode * peq1Sett[];
const static tPageNode * peq2OnOff[];
const static tPageNode * peq2Sett[];
const static tPageNode * peq3OnOff[];
const static tPageNode * peq3Sett[];
const static tPageNode * rgcOnOff[];
const static tPageNode * preset[];
const static tPageNode * preset1Sett[];
const static tPageNode * preset2Sett[];
const static tPageNode * preset3Sett[];
const static tPageNode * settings[];
const static tPageNode * btSettings[];
const static tPageNode * fcResetSetting[];
const static tPageNode * rgcOnSett[];
/************************* volume ***************************/
const static tPageNode volNode = //volume(level 1)
{
    .numOfBrother = 10,
    .ppChildren    = NULL,
    .pPageText    = displayText[3],
    .pageType     = PAGE_ACTION_TYPE,
    .pageSettId   = PAGE_SETTING_VOL
};

/************************* Low pass filter***************************/
const static tPageNode lpFilterNode = //Low pass filter(level 1)
{
    .numOfBrother = 10,
    .ppChildren   = &lpOnOff[0],
    .pPageText    = displayText[4],
    .pageType     = PAGE_NAVIGATION_TYPE,
};

const static tPageNode lpOff = //low pass fitler off(Level 2)
{
    .numOfBrother = 2,
    .ppChildren   = NULL,
    .pPageText    = displayText[5],
    .pageType     = PAGE_NAVIGATION_ACTION_TYPE,// this node has setting also DLG should do navigation
    .pageSettId   = PAGE_SETTING_LP_OFF
};

const static tPageNode lpOn = //low pass fitler off(level 2)
{
    .numOfBrother = 2,
    .ppChildren   = &lpOnSett[0],
    .pPageText    = displayText[6],
    .pageType     = PAGE_NAVIGATION_ACTION_TYPE, //This is because we should turn on LP before enter to the next level
    .pageSettId   = PAGE_SETTING_LP_ON
};

const static tPageNode *lpOnOff[2] ={&lpOff, &lpOn};

const static tPageNode lpFreq = //low pass fitler--frequency(level 3)
{
    .numOfBrother = 2,
    .ppChildren   = NULL,
    .pPageText    = displayText[7],
    .pageType     = PAGE_ACTION_TYPE,
    .pageSettId   = PAGE_SETTING_LP_FRE
};

const static tPageNode lpSlope = //low pass fitler--slope(level 3)
{
    .numOfBrother = 2,
    .ppChildren   = NULL,
    .pPageText    = displayText[8],
    .pageType     = PAGE_ACTION_TYPE,
    .pageSettId   = PAGE_SETTING_LP_SLO
};

const static tPageNode *lpOnSett[2] ={&lpFreq,&lpSlope};

/**************************** PEQ ******************************/
const static tPageNode paraEqNode = //PARA EQ
{
    .numOfBrother = 10,
    .ppChildren   = &peq[0],
    .pPageText    = displayText[16],
    .pageType     = PAGE_NAVIGATION_TYPE,
};

/**************************** PEQ1 ******************************/
const static tPageNode peq1 = //PEQ1
{
    .numOfBrother = 3,
    .ppChildren   = &peq1OnOff[0],
    .pPageText    = displayText[17],
    .pageType     = PAGE_NAVIGATION_TYPE,
};

const static tPageNode peq1Off = //PEQ1 Off
{
    .numOfBrother = 2,
    .ppChildren    = NULL,
    .pPageText    = displayText[18],
    .pageType     = PAGE_NAVIGATION_ACTION_TYPE,
    .pageSettId   = PAGE_SETTING_PEQ1_OFF
};

const static tPageNode peq1On = //PEQ1 On
{
    .numOfBrother = 2,
    .ppChildren   = &peq1Sett[0],
    .pPageText    = displayText[19],
    .pageType     = PAGE_NAVIGATION_ACTION_TYPE,
    .pageSettId   = PAGE_SETTING_PEQ1_ON
};

const static tPageNode *peq1OnOff[] ={&peq1Off, &peq1On};

const static tPageNode peq1Freq = //PEQ1 frequency
{
    .numOfBrother = 3,
    .ppChildren    = NULL,
    .pPageText    = displayText[26],
    .pageType     = PAGE_ACTION_TYPE,
    .pageSettId   = PAGE_SETTING_PEQ1_FRE
};
const static tPageNode peq1Gain = //PEQ1 gain
{
    .numOfBrother = 3,
    .ppChildren   = NULL,
    .pPageText    = displayText[27],
    .pageType     = PAGE_ACTION_TYPE,
    .pageSettId   = PAGE_SETTING_PEQ1_BOOST
};
const static tPageNode peq1Q = //PEQ1 Q
{
    .numOfBrother = 3,
    .ppChildren    = NULL,
    .pPageText    = displayText[28],
    .pageType     = PAGE_ACTION_TYPE,
    .pageSettId   = PAGE_SETTING_PEQ1_Q
};

const static tPageNode *peq1Sett[] ={&peq1Freq, &peq1Gain, &peq1Q};


/**************************** PEQ2 ******************************/
const static tPageNode peq2 = //PEQ2
{
    .numOfBrother = 3,
    .ppChildren   = &peq2OnOff[0],
    .pPageText    = displayText[20],
    .pageType     = PAGE_NAVIGATION_TYPE,
};

const static tPageNode peq2Off = //PEQ2 Off
{
    .numOfBrother = 2,
    .ppChildren    = NULL,
    .pPageText    = displayText[21],
    .pageType     = PAGE_NAVIGATION_ACTION_TYPE,
    .pageSettId   = PAGE_SETTING_PEQ2_OFF
};

const static tPageNode peq2On = //PEQ1 On
{
    .numOfBrother = 2,
    .ppChildren   = &peq2Sett[0],
    .pPageText    = displayText[22],
    .pageType     = PAGE_NAVIGATION_ACTION_TYPE,
    .pageSettId   = PAGE_SETTING_PEQ2_ON
};

const static tPageNode *peq2OnOff[] ={&peq2Off, &peq2On};

const static tPageNode peq2Freq = //PEQ2 frequency
{
    .numOfBrother = 3,
    .ppChildren   = NULL,
    .pPageText    = displayText[26],
    .pageType     = PAGE_ACTION_TYPE,
    .pageSettId   = PAGE_SETTING_PEQ2_FRE
};
const static tPageNode peq2Gain = //PEQ2 gain
{
    .numOfBrother = 3,
    .ppChildren   = NULL,
    .pPageText    = displayText[27],
    .pageType     = PAGE_ACTION_TYPE,
    .pageSettId   = PAGE_SETTING_PEQ2_BOOST
};
const static tPageNode peq2Q = //PEQ2 Q
{
    .numOfBrother = 3,
    .ppChildren    = NULL,
    .pPageText    = displayText[28],
    .pageType     = PAGE_ACTION_TYPE,
    .pageSettId   = PAGE_SETTING_PEQ2_Q
};

const static tPageNode *peq2Sett[] ={&peq2Freq, &peq2Gain, &peq2Q};

/**************************** PEQ3 ******************************/
const static tPageNode peq3 = //PEQ3
{
    .numOfBrother = 3,
    .ppChildren   = &peq3OnOff[0],
    .pPageText    = displayText[23],
    .pageType     = PAGE_NAVIGATION_TYPE,
};

const static tPageNode peq3Off = //PEQ3 Off
{
    .numOfBrother = 2,
    .ppChildren   = NULL,
    .pPageText    = displayText[24],
    .pageType     = PAGE_NAVIGATION_ACTION_TYPE,
    .pageSettId   = PAGE_SETTING_PEQ3_OFF
};

const static tPageNode peq3On = //PEQ3 On
{
    .numOfBrother = 2,
    .ppChildren   = &peq3Sett[0],
    .pPageText    = displayText[25],
    .pageType     = PAGE_NAVIGATION_ACTION_TYPE,
    .pageSettId   = PAGE_SETTING_PEQ3_ON
};

const static tPageNode *peq3OnOff[] ={&peq3Off, &peq3On};

const static tPageNode peq3Freq = //PEQ3 frequency
{
    .numOfBrother = 3,
    .ppChildren   = NULL,
    .pPageText    = displayText[26],
    .pageType     = PAGE_ACTION_TYPE,
    .pageSettId   = PAGE_SETTING_PEQ3_FRE
};
const static tPageNode peq3Gain = //PEQ3 gain
{
    .numOfBrother = 3,
    .ppChildren   = NULL,
    .pPageText    = displayText[27],
    .pageType     = PAGE_ACTION_TYPE,
    .pageSettId   = PAGE_SETTING_PEQ3_BOOST
};
const static tPageNode peq3Q = //PEQ3 Q
{
    .numOfBrother = 3,
    .ppChildren   = NULL,
    .pPageText    = displayText[28],
    .pageType     = PAGE_ACTION_TYPE,
    .pageSettId   = PAGE_SETTING_PEQ3_Q
};

const static tPageNode *peq3Sett[] ={&peq3Freq, &peq3Gain, &peq3Q};
const static tPageNode * peq[] = {&peq1,&peq2,&peq3};

/**************************** RGC ******************************/
const static tPageNode RGCNode = //RGC
{
    .numOfBrother = 10,
    .ppChildren   = &rgcOnOff[0],
    .pPageText    = displayText[29],
    .pageType     = PAGE_NAVIGATION_TYPE,
};

const static tPageNode rgcOff = //rgc off
{
    .numOfBrother = 2,
    .ppChildren   = NULL,
    .pPageText    = displayText[30],
    .pageType     = PAGE_NAVIGATION_ACTION_TYPE,
    .pageSettId   = PAGE_SETTING_RGC_OFF
};
const static tPageNode rgcOn = //rgc on
{
    .numOfBrother = 2,
    .ppChildren   = &rgcOnSett[0],
    .pPageText    = displayText[31],
    .pageType     = PAGE_NAVIGATION_ACTION_TYPE,
    .pageSettId   = PAGE_SETTING_RGC_ON
};
const static tPageNode *rgcOnOff[] ={&rgcOff, &rgcOn};

const static tPageNode rgcFreq = //rgc--frequency(level 3)
{
    .numOfBrother = 2,
    .ppChildren   = NULL,
    .pPageText    = displayText[79],
    .pageType     = PAGE_ACTION_TYPE,
    .pageSettId   = PAGE_SETTING_RGC_FREQ
};

const static tPageNode rgcSlope = //rgc--slope(level 3)
{
    .numOfBrother = 2,
    .ppChildren   = NULL,
    .pPageText    = displayText[80],
    .pageType     = PAGE_ACTION_TYPE,
    .pageSettId   = PAGE_SETTING_RGC_SLOPE
};

const static tPageNode *rgcOnSett[2] ={&rgcFreq,&rgcSlope};
/*************************************************************/

const static tPageNode phaseNode = //phase
{
    .numOfBrother = 10,
    .ppChildren   = NULL,
    .pPageText    = displayText[14],
    .pageType     = PAGE_ACTION_TYPE,
    .pageSettId   = PAGE_SETTING_POLARI
};

/**************************** Preset ******************************/
const static tPageNode presetNode= //preset
{
    .numOfBrother = 10,
    .ppChildren   = &preset[0],
    .pPageText    = displayText[32],
    .pageType     = PAGE_NAVIGATION_TYPE,
};

/**************************** Preset1 ******************************/
const static tPageNode preset1= //preset
{
    .numOfBrother = 3,
    .ppChildren   = &preset1Sett[0],
    .pPageText    = displayText[33],
    .pageType     = PAGE_NAVIGATION_TYPE,
};

const static tPageNode preset1Load= //preset
{
    .numOfBrother = 2,
    .ppChildren   = NULL,
    .pPageText    = displayText[34],
    .pageType     = PAGE_ACTION_TYPE,
    .pageSettId   = PAGE_SETTING_PRE1_LOAD
};

const static tPageNode preset1Save= //preset
{
    .numOfBrother = 2,
    .ppChildren   = NULL,
    .pPageText    = displayText[35],
    .pageType     = PAGE_ACTION_TYPE,
    .pageSettId   = PAGE_SETTING_PRE1_SAVE
};
const static tPageNode *preset1Sett[] ={&preset1Load, &preset1Save};

/**************************** Preset2 ******************************/
const static tPageNode preset2= //preset 2
{
    .numOfBrother = 3,
    .ppChildren   = &preset2Sett[0],
    .pPageText    = displayText[36],
    .pageType     = PAGE_NAVIGATION_TYPE,
};

const static tPageNode preset2Load= //preset
{
    .numOfBrother = 2,
    .ppChildren   = NULL,
    .pPageText    = displayText[37],
    .pageType     = PAGE_ACTION_TYPE,
    .pageSettId   = PAGE_SETTING_PRE2_LOAD
};

const static tPageNode preset2Save= //preset
{
    .numOfBrother = 2,
    .ppChildren   = NULL,
    .pPageText    = displayText[38],
    .pageType     = PAGE_ACTION_TYPE,
    .pageSettId   = PAGE_SETTING_PRE2_SAVE
};
const static tPageNode *preset2Sett[] ={&preset2Load, &preset2Save};

/**************************** Preset3 ******************************/
const static tPageNode preset3= //preset 3
{
    .numOfBrother = 3,
    .ppChildren   = &preset3Sett[0],
    .pPageText    = displayText[39],
    .pageType     = PAGE_NAVIGATION_TYPE,
};

const static tPageNode preset3Load= //preset
{
    .numOfBrother = 2,
    .ppChildren   = NULL,
    .pPageText    = displayText[40],
    .pageType     = PAGE_ACTION_TYPE,
    .pageSettId   = PAGE_SETTING_PRE3_LOAD
};

const static tPageNode preset3Save= //preset
{
    .numOfBrother = 2,
    .ppChildren   = NULL,
    .pPageText    = displayText[41],
    .pageType     = PAGE_ACTION_TYPE,
    .pageSettId   = PAGE_SETTING_PRE3_SAVE
};
const static tPageNode *preset3Sett[] ={&preset3Load, &preset3Save};

const static tPageNode *preset[] ={&preset1, &preset2, &preset3};

/**************************** Setting ******************************/

const static tPageNode settingNode= //sys settings
{
    .numOfBrother = 10,
    .ppChildren   = &settings[0],
    .pPageText    = displayText[42],
    .pageType     = PAGE_NAVIGATION_TYPE,
};
const static tPageNode settDisplay=
{
    .numOfBrother = 2,
    .ppChildren   = NULL,
    .pPageText    = displayText[43],
    .pageType     = PAGE_ACTION_TYPE,
    .pageSettId   = PAGE_SETTING_DISPLAY
};
const static tPageNode settTimeout= 
{
    .numOfBrother = 2,
    .ppChildren   = NULL,
    .pPageText    = displayText[44],
    .pageType     = PAGE_ACTION_TYPE,
    .pageSettId   = PAGE_SETTING_TIMEOUT
};
const static tPageNode *settings[] ={&settDisplay, &settTimeout};


const static tPageNode standbyNode = //standby mode
{
    .numOfBrother = 10,
    .ppChildren   = NULL,
    .pPageText    = displayText[45],
    .pageType     = PAGE_ACTION_TYPE,
    .pageSettId   = PAGE_SETTING_STANDBY
};

/**************************** BT ******************************/
const static tPageNode btNode=
{
    .numOfBrother = 10,
    .ppChildren    = &btSettings[0],
    .pPageText    = displayText[72],
    .pageType     = PAGE_NAVIGATION_TYPE,
};

const static tPageNode btOn=
{
    .numOfBrother = 3,
    .ppChildren   = NULL,
    .pPageText    = displayText[73],
    .pageType     = PAGE_NAVIGATION_ACTION_TYPE,
    .pageSettId   = PAGE_SETTING_BT_ON
};

const static tPageNode btOff=
{
    .numOfBrother = 3,
    .ppChildren   = NULL,
    .pPageText    = displayText[74],
    .pageType     = PAGE_NAVIGATION_ACTION_TYPE,
    .pageSettId   = PAGE_SETTING_BT_OFF
};

const static tPageNode clearBt=
{
    .numOfBrother = 3,
    .ppChildren   = NULL,
    .pPageText    = displayText[75],
    .pageType     = PAGE_NAVIGATION_ACTION_TYPE,
    .pageSettId   = PAGE_SETTING_CLEAR_BT
};

const static tPageNode *btSettings[] ={&btOn, &btOff,&clearBt};

/**************************** factory reset ******************************/
const static tPageNode fcRestNode=
{
    .numOfBrother = 10,
    .ppChildren    = &fcResetSetting[0],
    .pPageText    = displayText[78],
    .pageType     = PAGE_NAVIGATION_TYPE,
};

const static tPageNode resetYesOrNo =
{
    .numOfBrother = 2,
    .ppChildren   = NULL,
    .pPageText    = displayText[76],
    .pageType     = PAGE_EXIT_TYPE,
    .pageSettId   = PAGE_SETTING_RESET_YES
};

const static tPageNode *fcResetSetting[] ={&resetYesOrNo};
/******************************************************************************/
static const tPageNode * rootLevel[] =
{
    &volNode,       //0
    &lpFilterNode,  //1
    &phaseNode,     //2
    &paraEqNode,    //3
    &RGCNode,       //4
    &presetNode,    //5
    &settingNode,   //6
    &standbyNode,   //7
    &btNode,        //8
    &fcRestNode,    //9
};

static tMenu const menu = 
{
    .ppMenuEntrance = rootLevel,
    .menuLoopBack   = TRUE
};
#define SETTING_RESEND_LIMIT    3
#define PAGE_SIZE               1024        // # of 32-bit Instructions per Page
#define SETTING_SAVE_MS         5000
#define IDLE_TIMEOUT_MS         3000
#define TIMER_PERIOD_MS         1000

typedef struct tSettingEntry
{
#ifdef HAS_BATTERY
    tBatteryInfo    bi;             /**< SETID_BATT_INFO    */
#endif
    uint8   vol_level;              /**< SETID_VOLUME       */
    bool    isAcPlugIn;             /**< SETID_AC_STATUS    */
#ifdef HAS_ALLPLAY
    AllPlaySrvInfoEvt allplayInfo;  /**< SETID_ALLPLAY_INFO */
#endif // HAS_ALLPLAY
#ifdef HAS_GRAPHICAL_EQ
    uint8 eqGains[GRAPHICAL_EQ_BANDS_NUM];
#endif
#ifdef AUDIO_MULTI_SOURCE
    eAudioChannel channel; 
    bool isAuxInPlugIn;
    bool isRcaInPlugIn;
    bool isSpdifInPlugIn;
#endif
    uint8 maxVolume;
#ifdef HAS_POWER_DELEGATE
    ePowerMode powerMode;
#endif
#ifdef HAS_BLUETOOTH
    eBtStatus btStatus;
#endif 
#ifdef HAS_BT_DELEGATE
    eCallState callState;
#endif    
#ifdef HAS_MENU
    arrMenuData menuData;
#endif
#ifdef HAS_PRESET_1
    arrPreset1 preset1;
#endif
#ifdef HAS_PRESET_2
    arrPreset2 preset2;
#endif
#ifdef HAS_PRESET_3
    arrPreset3 preset3;
#endif
    bool isMusicPlaying;            /***< SETID_MUSIC_DET */
#ifdef LED_HAS_RGB
    Color ledRgbColor;
#endif
    uint8   audioSource;
}tSettingEntry;


static tSettingEntry setting;
static tSettingDatabase settingDB[SETID_MAX] =
{
#ifdef HAS_BATTERY
    { &setting.bi,          sizeof(setting.bi),         SETTING_ATTR_VALID},
#else
    { NULL,                 0,                          NULL},
#endif
    { &setting.vol_level,   sizeof(setting.vol_level),   SETTING_ATTR_VALID | SETTING_ATTR_NVM},
    { &setting.isAcPlugIn,  sizeof(setting.isAcPlugIn),  SETTING_ATTR_VALID},
#ifdef HAS_ALLPLAY
    { &setting.allplayInfo, sizeof(setting.allplayInfo), SETTING_ATTR_VALID},
#else
    { NULL,                 0,                          NULL},
#endif  // HAS_ALLPLAY
    { NULL,                 0,                          NULL}, // SETID_DSP_INIT_DATA: no use
    { NULL,                 0,                          NULL}, //SETID_DSP_TUNABLE_PART: no use
#ifdef HAS_GRAPHICAL_EQ
    { &setting.eqGains,     ArraySize(setting.eqGains), SETTING_ATTR_VALID},
#else
    { NULL,                 0,                          NULL},
#endif
#ifdef AUDIO_MULTI_SOURCE
    { &setting.channel,       sizeof(setting.channel),     SETTING_ATTR_VALID},
    { &setting.isAuxInPlugIn, sizeof(setting.isAuxInPlugIn), SETTING_ATTR_VALID | SETTING_ATTR_NVM},
    { &setting.isRcaInPlugIn, sizeof(setting.isRcaInPlugIn), SETTING_ATTR_VALID},
    { &setting.isSpdifInPlugIn, sizeof(setting.isSpdifInPlugIn), SETTING_ATTR_VALID},
#else
    { NULL,                 0,                          NULL},
    { NULL,                 0,                          NULL},
    { NULL,                 0,                          NULL},
    { NULL,                 0,                          NULL},
#endif
    { &setting.maxVolume,   sizeof(setting.maxVolume),   SETTING_ATTR_VALID},
#ifdef HAS_POWER_DELEGATE
    { &setting.powerMode,   sizeof(setting.powerMode),   SETTING_ATTR_VALID},
#else
    { NULL,                 0,                          NULL},
#endif
#ifdef HAS_BLUETOOTH
    { &setting.btStatus,    sizeof(setting.btStatus),   SETTING_ATTR_VALID},
#else
    { NULL,                 0,                          NULL},
#endif

#ifdef HAS_BT_DELEGATE
    { &setting.callState,   sizeof(setting.callState),  SETTING_ATTR_VALID},
#else
    { NULL,                 0,                          NULL},
#endif
#ifdef HAS_MENU
    { &setting.menuData,    sizeof(setting.menuData),       SETTING_ATTR_VALID | SETTING_ATTR_NVM},
#else
    { NULL,                 0,                          NULL},
#endif

#ifdef HAS_PRESET_1
    { &setting.preset1,    sizeof(setting.menuData),       SETTING_ATTR_VALID | SETTING_ATTR_NVM},
#else
    { NULL,                 0,                          NULL},
#endif

#ifdef HAS_PRESET_2
    { &setting.preset2,    sizeof(setting.menuData),       SETTING_ATTR_VALID | SETTING_ATTR_NVM},
#else
    { NULL,                 0,                          NULL},
#endif

#ifdef HAS_PRESET_3
    { &setting.preset3,    sizeof(setting.menuData),       SETTING_ATTR_VALID | SETTING_ATTR_NVM},
#else
    { NULL,                 0,                          NULL},
#endif
    { &setting.isMusicPlaying, sizeof(setting.isMusicPlaying), SETTING_ATTR_VALID},
#ifdef LED_HAS_RGB
    { &setting.ledRgbColor, sizeof(setting.ledRgbColor), SETTING_ATTR_VALID},
#else
    { NULL,                 0,                          NULL},
#endif
    { &setting.audioSource, sizeof(setting.audioSource), SETTING_ATTR_VALID | SETTING_ATTR_NVM},
};

#define SETT_PAGE_ROM_ADDR      NVM_STORAGE_ADDR_LAST_ITEM
#define SETT_ELEMENT_MIN_SIZE   sizeof(uint32)
#define SETT_ELEMENT_MAX_SIZE   0x0100

static const tSettingRomMap settingRomMap[] =
{
    { SETID_AUDIO_SOURCE,       SETT_PAGE_ROM_ADDR                              },
    { SETID_VOLUME,             SETT_PAGE_ROM_ADDR + SETT_ELEMENT_MIN_SIZE      },
    { SETID_IS_AUXIN_PLUG_IN,   SETT_PAGE_ROM_ADDR + 2*SETT_ELEMENT_MIN_SIZE    }
};


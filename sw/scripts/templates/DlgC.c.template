/*
-------------------------------------------------------------------------------
TYMPHANY LTD





                  ${name} Delegate
                  -------------------------

                  SW Module Document




@file        ${nameAndExt}
@brief       ${brief}
@author      ${user} 
@date        ${date}
@Copyright (c) <2015> Tymphany HK Ltd. All rights reserved.

DESCRIPTION: Generated by newclass.py
SCO/ERROR  : 
-------------------------------------------------------------------------------
*/

#include "./${name}Dlg_priv.h"
#include "trace.h"

#ifdef Q_SPY
#define CAST_ME c${name}Dlg * ${name}Dlg = (c${name}Dlg *) me;
#else
#define CAST_ME
#endif

/* Private functions / variables. */

/* Internal event queue - Size as needed */
static QEvt const *${name}EvtQue[???];



/*****************************************************************************************************************
 *
 * Ctor / Xtor functions
 *
 *****************************************************************************************************************/
c${name}Dlg * ${name}Dlg_Ctor(c${name}Dlg *me, tDlgCtorData * ctorData) /* You probably want to change this and inherit tDlgCtorData */
{
    CAST_ME;
    /* Add to QSPY directory - only does so if QSPY enabled. 
    * Remember to make sure these items exist
    */
    QS_OBJ_DICTIONARY(${name}Dlg);
    QS_OBJ_DICTIONARY(${name}Dlg_PreActive);
    QS_OBJ_DICTIONARY(${name}Dlg_Active);
    QS_OBJ_DICTIONARY(${name}Dlg_DeActive);
    
    /* Call super... */
    CREATE_DLG(me, c${name}Dlg, &${name}Dlg_Initial);

    /* ... then do my own construction */

    /* Active object start */
    QActive_start((QActive*)me, (tDlgCtorData *)ctorData->priority, ${name}EvtQue, Q_DIM(${name}EvtQue), (void *)0, 0U, (QEvt *)0);

    /* Subscribe */

    /* return */
    return me;

}

void ${name}Dlg_Xtor(c${name}Dlg *me);
{
    /* Do my own clean up... */

   /* ... then call super */
   DESTROY_DLG(me);
}

/*****************************************************************************************************************
 *
 * State functions
 *
 *****************************************************************************************************************/
/* Initial state */
static QState ${name}Dlg_Initial(c${name}Dlg * const me)
{
    /* Fill me in */
    return Q_TRAN(&${name}Dlg_Active);
}

/*   Active state - first state where "normal" service begins  */
static QState ${name}Dlg_Active(c${name}Dlg * const me, QEvt const * const e)
{
    switch (e->sig)
    {
        /* fill me in */
        default:
            break;
    }
    return Q_SUPER(&QHsm_top);
}

/*****************************************************************************************************************
 *
 * private functions
 *
 *****************************************************************************************************************/

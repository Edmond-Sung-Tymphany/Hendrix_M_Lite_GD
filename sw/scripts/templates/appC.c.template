/*
-------------------------------------------------------------------------------
TYMPHANY LTD





                  ${name} Application
                  -------------------------

                  SW Module Document




@file        ${nameAndExt}
@brief       ${brief}
@author      ${user} 
@date        ${date}
@Copyright (c) <2015> Tymphany HK Ltd. All rights reserved.

DESCRIPTION: Generated by newclass.py
SCO/ERROR  : 
-------------------------------------------------------------------------------
*/

#include "./${name}App_priv.h"
#include "trace.h"

#ifdef Q_SPY
#define CAST_ME c${name}App * ${name}App = (c${name}App *) me;
#else
#define CAST_ME
#endif

/* Private functions / variables. */

/* Internal event queue - Size as needed */
static QEvt const *${name}EvtQue[???];

/*****************************************************************************************************************
 *
 * Start-up / shut-down functions
 *
 *****************************************************************************************************************/
void ${name}App_StartUp(cPersistantObj *me)
{
    CAST_ME;
    /* Add to QSPY directory - only does so if QSPY enabled. 
    * Remember to make sure these items exist
    */
    QS_OBJ_DICTIONARY(${name}App);
    QS_OBJ_DICTIONARY(${name}App_PreActive);
    QS_OBJ_DICTIONARY(${name}App_Active);
    QS_OBJ_DICTIONARY(${name}App_DeActive);
    
    /* start up the object and let it run. Called by the controller */
    Application_Ctor((cApplication*)me, Q_STATE_CAST(${name}App_Initial));

    /* Active object start */
    QActive_start((QActive*)me, MY_ID, ${name}EvtQue, Q_DIM(${name}EvtQue), (void *)0, 0U, (QEvt *)0);

    /* Subscribe */
}

void ${name}App_ShutDown(cPersistantObj *me)
{
    /* Clean memory and shut-down. Called by the controller */
    Application_Xtor((cApplication*)me);
}

/*****************************************************************************************************************
 *
 * State functions
 *
 *****************************************************************************************************************/
/* Initial state */
static QState ${name}App_Initial(c${name}App * const me)
{

    return Q_TRAN(&{name}App_Active);
}

/* Active state  - super state for "normal" behaviour */
static QState ${name}App_Active(c${name}App * const me, QEvt const * const e)
{
    switch (e->sig)
    {
        /* fill me in! */
        default: break;
    }
    return Q_SUPER(&QHsm_top);
}

/*****************************************************************************************************************
 *
 * private functions
 *
 *****************************************************************************************************************/

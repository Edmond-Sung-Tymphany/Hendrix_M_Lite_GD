syntax = "proto2";
import "firmware-update.proto";
import "common.proto";
import "hdmi.proto";
import "power-link.proto";
import "ase-fep-ReqResp.proto";
import "fep-ase-ReqResp.proto";
import "production.proto";
import "system.proto";
import "dsp.proto";
import "eeb.proto";
import "wpl.proto";
import "puc.proto";
import "player.proto";
import "light-sensor.proto";
import "soundwall.proto";

package Proto.AseFep;

message Req {
	/// this should be copied from the request to the response
	/// to be able to pair messages
	optional ReqResp type = 1;

	/// this should be copied from the request to the response
	/// to be able to pair messages
	optional uint32 id = 2;

	/// field numbers from 3 to 9 are reserved

	oneof data {
		FirmwareUpdate.Chunk firmwareUpdateChunk = 10;
		Hdmi.HdmiInput hdmiInput = 11;
		Dsp.LineInSensitivity lineInSensitivity = 12;
		Dsp.RequestAudioInput audioInput = 13;
		Dsp.RequestPositionSoundMode positionSoundMode = 14;
		Dsp.RequestInternalSpeakerCompensation internalSpeakerCompensation = 15;
		PowerLink.SetON powerLinkSetOn = 16;
		PowerLink.SetMute powerLinkSetMute = 17;
		Dsp.InternalAmplifierCommand internalAmplifierCommand = 18;
		Eeb.EebTelegram eebTelegramTransmit = 19;
		Production.LedModeSet ledMode = 20;
		Production.GetButtonState getButtonState = 21;
		Hdmi.StandbyCmd standbyType = 22;
		Wpl.Request wplRequest = 23;
		Puc.PucCommand sendPucCommand = 24;
		System.PowerRequest powerRequest = 25;
		PowerLink.Data powerLinkData = 26;
		Dsp.ToslinkOutSampleRate toslinkOutSampleRate = 27;
		Dsp.SpeakerEnableCommand speakerEnableCommand = 28;
		Hdmi.AudioModeSelect audioMode = 29;
		LightSensor.Command lightSensorCommand = 30;
		SoundWall.A2Bmode reqA2Bmode = 31;
		SoundWall.GainAndDelay reqGainAndDelay = 32;
		SoundWall.DriverGain reqDriverGain = 33;
		SoundWall.BassAndRoomEQ reqBassAndRoomEQ = 34;
		Dsp.Parameter dspParameter = 35;
		SoundWall.PowerMode reqPowerMode = 36;
		SoundWall.NodeIndex nodeIndex = 37;
		SoundWall.MuteMode muteMode = 38;
		SoundWall.ReqTestTone reqTestTone = 39;
		Dsp.AbsoluteVolume dspAbsoluteVolume = 40;
	}
}

message Resp {
	/// this should be copied from the request to the response
	/// to be able to pair messages
	optional FepAse.ReqResp type = 1;

	/// this should be copied from the request to the response
	/// to be able to pair messages
	optional uint32 id = 2;

	optional Core.GenericResponse genericResponse = 3;

	/// field numbers from 4 to 9 are reserved

	oneof data {
		System.NetworkInfo networkInfo = 10;
		Dsp.AbsoluteVolume volume = 11;
	}
}


/// Event report from ASE to FEP (Local UI).
message Event {
	enum Type {
		/// ASE has completed the boot sequence and is ready to receive messages from FEP
		BOOTED = 0;

		/// Event send when ASE enter source standby
		SYSTEM_STATUS_STANDBY = 1;
		/// Event send when exiting standby (a source has started from standby)
		SYSTEM_STATUS_ON = 2;
		/// ASE is going to restart, FEP will gracefully shut down DSP and amplifier and signal reboot on the local UI.
		SYSTEM_STATUS_ASE_RESTART = 3;

		/// Event send when >>reset to factory<< is done
		/// When starting factory reset procedure, FACTORY_RESET_START is sent
		FACTORY_RESET_DONE = 4;

		/// Event send when the product is ON, but no user interaction is registered for a given time period, default is
		/// 5 minutes. How the FEP will react to the event is product specific, dimming the LEDs is one option.
		SYSTEM_STATUS_ON_NO_OPERATION = 5;

		/// associated data in productionTunnel
		TUNNEL = 6;

		/// Software update of the ASE has started, local UI must show software update in progress. ASE reboot is part
		/// of the update process, if new firmware is available for the FEP, firmware update starts after ASE reboot.
		SW_UPDATE_STARTED = 7;
		SW_UPDATE_FINISHED = 8;
		SW_UPDATE_FAILED = 9;

		/// ASE indicates to FEP when the comfort sound playback starts. FEP has to turn on the DSP in case the DSP is off.
		COMFORT_TONE_START = 10;
		/// ASE indicates to FEP when the comfort sound playback is finished. FEP can turn off the DSP in case it was off
		/// before the comfort sound playback.
		COMFORT_TONE_DONE = 11;

		/// associated data in field of type Dsp.AbsoluteVolume
		/// field fade_duration should be ignored. Use DSP_VOLUME_FADE request to fade volume
		VOLUME_CHANGED = 12;

		/// associated data in field of type Dsp.Mute
		MUTE_CHANGED = 13;

		/// associated data in field of type System.NetworkInfo
		NETWORK_INFO = 14;

		/// associated data in field of type Player.Data
		PLAYER_DATA = 15;

		/// Event send when >>reset to factory<< is initiated
		/// FACTORY_RESET_DONE is sent when factory reset procedure has finished
		FACTORY_RESET_START = 16;

		/// Bluetooth pairing is active. ASE is in discoverable state(BT).
		BT_PAIRING_ENABLED = 17;

		/// Bluetooth pairing is inactive. ASE is NOT in discoverable state(BT).
		BT_PAIRING_DISABLED = 18;

		/// Pair of Bluetooth accessory failed.
		BT_PAIRING_FAILED = 19;

		/// A Bluetooth accessory has been successfully paired.
		BT_PAIRING_SUCCEEDED = 20;

		/// Bluetooth Low Energy pairing is active. ASE is in discoverable state(BTLE).
		BTLE_PAIRING_ENABLED = 21;

		/// Bluetooth Low Energy pairing is inactive. ASE is NOT in discoverable state(BTLE).
		BTLE_PAIRING_DISABLED = 22;

		/// Pair of Bluetooth Low Energy accessory failed.
		BTLE_PAIRING_FAILED = 23;

		/// A Bluetooth Low Energy accessory has been successfully paired.
		BTLE_PAIRING_SUCCEEDED = 24;

		/// Informs the peer that System.Log message is ready to be received
		LOG_MESSAGE_AVAILABLE = 25;

		/// This is a symmetric event to LOG_MESSAGE_AVAILABLE
		LOG_MESSAGE_UNAVAILABLE = 26;

		/// Event that is reporting currently set ToneTouch parameters.
		/// Fep should apply parameters from data if possible
		/// associated data is of type Dsp.ToneTouch
		DSP_TONE_TOUCH = 27;

		/// Event send when ASE enter source multiroom standby
		SYSTEM_STATUS_STANDBY_MULTIROOM = 28;

		/// Event send when on state is requested
		SYSTEM_STATUS_TURNING_ON = 29;

		/// Event send when audio only state is requested
		SYSTEM_STATUS_AUDIO_ONLY = 30;

		// A Bluetooth player has been connected to the ASE
		BT_PLAYER_CONNECTED = 31;

		// A Bluetooth player has been disconnected to the ASE
		BT_PLAYER_DISCONNECTED = 32;
	}
	optional Type type = 1;

	/// field numbers from 2 to 8 are reserved

	oneof data {
		uint32 soundwallParam = 9;
		Production.Tunnel productionTunnel = 10;
		Dsp.AbsoluteVolume volume = 11;
		Dsp.Mute mute = 12;
		System.NetworkInfo networkInfo = 13;
		Player.Data playerData = 14;
		Dsp.ToneTouch dspToneTouch = 15;
	}
}

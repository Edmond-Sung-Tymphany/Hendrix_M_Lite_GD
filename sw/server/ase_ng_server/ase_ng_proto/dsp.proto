syntax = "proto2";
package Proto.Dsp;

/// Set the line-in sensitivity level.
message LineInSensitivity {
    enum Sensitivity {
        /// Line-in is triggered by a weak input signal. Suitable for most MP3 players.
        HIGH = 0;
        /// Line-in is triggered by a medium input signal. Use with standard audio equipment and computers.
        MEDIUM = 1;
        /// Line-in is triggered by a strong input signal. Suitable for DVD/BD players.
        LOW = 2;
        /// Line-in sense is disabled
        DISABLED = 3;
    }
    optional Sensitivity sensitivity = 1;
}

message AbsoluteVolume {
	optional uint32 volume = 1;

	/// In milliseconds the duration of the fade operation
	optional uint32 fade_duration = 2;
}

message RelativeVolumeChange {
	optional int32 volumeChange = 1;
}

message Mute {
	optional bool mute = 1;
}

/// Set audio input request
message RequestAudioInput {
	enum AudioInput {
		ASE = 0;
		LINE = 1;
		TOS_LINK = 2;
		POWER_LINK = 3;
		HDMI = 4;
		WIRELESS_MULTICHANNEL = 5;
		HDMI_ARC = 6;
		MICROPHONE_1 = 7;
		MICROPHONE_2 = 8;
	}
	/// Configure the audio input path.
	optional AudioInput input = 1;

	/// Configure whether to use local playback or not when ever the input/output path allows it.
	optional bool local = 2;
}

/// Position sound mode setting
message PositionSoundMode {
    enum Position {
        UNDEFINED = 0;
        FREE = 1;
        WALL = 2;
        CORNER = 3;
        TABLE = 4;
    }
    enum Orientation {
        NONE = 0;
        HORIZONTAL = 1;
        VERTICAL = 2;
    }
    optional Position position = 1;
    optional Orientation orientation = 2;
}

message RequestPositionSoundMode {
	optional PositionSoundMode positionSoundMode = 1;
}

message ResponsePositionSoundMode {
	enum Error {
		NO_ERROR = 1;
		POSITION_ERROR = 2;
		ORIENTATION_ERROR = 3;
		COMBINATION_ERROR = 4;
	}
	optional Error error = 1;
	/// Current position sound mode
	optional PositionSoundMode mode = 2;
}

message InternalSpeaker {
    enum Position {
        LEFT = 0;
        RIGHT = 1;
        CENTRE = 2;
    }
    enum Type {
        TWEETER = 0;
        MIDRANGE = 1;
        WOOFER = 2;
        FULLRANGE = 3;
    }
    /// Valid combinations for FS1:
    /// CENTRE - WOOFER
    /// CENTRE - FULLRANGE
    ///
    /// Valid combinations for FS2:
    /// CENTRE - WOOFER
    /// LEFT - MIDRANGE
    /// RIGHT - MIDRANGE
    /// CENTRE - TWEETER
    optional Position position = 1;
    optional Type type = 2;
    /// The amount of gain compensation to apply to the speaker unit in dB
    optional double compensation = 3;
}

/// Set the internal speaker compensation gain for one or more speaker units.
/// If a speaker unit's performance deviates from the specifications, a gain value can be applied to compensated for the
/// deviation. The FEP or one of its sub-components persist the compensation gain in non-volatile memory. FEP replies
/// with RequestInternalSpeakerCompensation.
message RequestInternalSpeakerCompensation {
    repeated InternalSpeaker internalSpeaker = 1;
}

/// Response when setting or getting internal speaker compensation
message ResponseInternalSpeakerCompensation {
    enum Error {
        NO_ERROR = 1;
        POSITION_ERROR = 2;
        TYPE_ERROR = 3;
        POSITION_TYPE_COMBINATION_ERROR = 4;
        GAIN_ERROR = 5;
    }
    optional Error error = 1;
    /// Current internal speaker compensation
    repeated InternalSpeaker internalSpeaker = 2;
}

message InternalAmplifierCommand {
	enum State {
		OFF = 0;
		ON = 1;
	}

	/// Desired amplifier state
	optional State state = 1;
}

/// Speaker enable command - provides api to enable or disable speakers
/// Only speakers that are listed should be modified. Other speakers should be left intact.
message SpeakerEnableCommand {
	message Speaker {
		enum Id {
			FRONT = 0;
			REAR = 1;
		}
		optional Id id = 1;
		optional bool enabled = 2;
	}

	repeated Speaker speaker = 1;
}

// @brief Event containg the NTC data
message NTCDataEvent {
	message NTCValue {
		enum NTC {
			EXT_NTC1 = 0;
			EXT_NTC2 = 1;
			EXT_NTC3 = 2;
			EXT_NTC4 = 3;
			EXT_NTC5 = 4;
			EXT_NTC6 = 5;
			EXT_NTC7 = 6;
			EXT_NTC8 = 7;
			AMP_NTC_CH1 = 8;
			AMP_NTC_CH2_3 = 9;
			AMP_NTC_CH4 = 10;
			AMP_NTC_CH5 = 11;
			AMP_NTC_CH6_7 = 12;
			AMP_NTC_CH8 = 13;
			NTC_PSU = 14;
			NTC_DSP = 15;
			NTC_AMP = 16;
		}		
		optional NTC id = 1;
		required int32 value= 2;
	}
	repeated NTCValue ntcValues = 1;
}

message ToslinkOutSampleRate {
	optional uint32 sampleRate = 1;
}

message Parameter {
	enum Type {
		LOUDNESS = 0;
		BASS = 1;
		TREBLE = 2;
	}
	/// Mandatory field - specifies which dsp parameter should be altered
	optional Type type = 1;

	/// Mandatory field - parameter value
	optional int32 value = 2;
}

message ToneTouch {
	optional double Gx1 = 1;
	optional double Gy1 = 2;
	optional double Gx2 = 3;
	optional double Gy2 = 4;
	optional double Gz = 5;
	optional double k5 = 6;
	optional double k6 = 7;
	optional bool enabled = 8;
}

/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.7 at Tue May 16 18:29:05 2017. */

#ifndef PB_PROTO_ASEFEP_ASE_FEP_PB_H_INCLUDED
#define PB_PROTO_ASEFEP_ASE_FEP_PB_H_INCLUDED
#include <pb.h>

#include "firmware-update.pb.h"

#include "common.pb.h"

#include "hdmi.pb.h"

#include "power-link.pb.h"

#include "ase-fep-ReqResp.pb.h"

#include "fep-ase-ReqResp.pb.h"

#include "production.pb.h"

#include "system.pb.h"

#include "dsp.pb.h"

#include "eeb.pb.h"

#include "wpl.pb.h"

#include "puc.pb.h"

#include "player.pb.h"

#include "light-sensor.pb.h"

#include "soundwall.pb.h"

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _Proto_AseFep_Event_Type {
    Proto_AseFep_Event_Type_BOOTED = 0,
    Proto_AseFep_Event_Type_SYSTEM_STATUS_STANDBY = 1,
    Proto_AseFep_Event_Type_SYSTEM_STATUS_ON = 2,
    Proto_AseFep_Event_Type_SYSTEM_STATUS_ASE_RESTART = 3,
    Proto_AseFep_Event_Type_FACTORY_RESET_DONE = 4,
    Proto_AseFep_Event_Type_SYSTEM_STATUS_ON_NO_OPERATION = 5,
    Proto_AseFep_Event_Type_TUNNEL = 6,
    Proto_AseFep_Event_Type_SW_UPDATE_STARTED = 7,
    Proto_AseFep_Event_Type_SW_UPDATE_FINISHED = 8,
    Proto_AseFep_Event_Type_SW_UPDATE_FAILED = 9,
    Proto_AseFep_Event_Type_COMFORT_TONE_START = 10,
    Proto_AseFep_Event_Type_COMFORT_TONE_DONE = 11,
    Proto_AseFep_Event_Type_VOLUME_CHANGED = 12,
    Proto_AseFep_Event_Type_MUTE_CHANGED = 13,
    Proto_AseFep_Event_Type_NETWORK_INFO = 14,
    Proto_AseFep_Event_Type_PLAYER_DATA = 15,
    Proto_AseFep_Event_Type_FACTORY_RESET_START = 16,
    Proto_AseFep_Event_Type_BT_PAIRING_ENABLED = 17,
    Proto_AseFep_Event_Type_BT_PAIRING_DISABLED = 18,
    Proto_AseFep_Event_Type_BT_PAIRING_FAILED = 19,
    Proto_AseFep_Event_Type_BT_PAIRING_SUCCEEDED = 20,
    Proto_AseFep_Event_Type_BTLE_PAIRING_ENABLED = 21,
    Proto_AseFep_Event_Type_BTLE_PAIRING_DISABLED = 22,
    Proto_AseFep_Event_Type_BTLE_PAIRING_FAILED = 23,
    Proto_AseFep_Event_Type_BTLE_PAIRING_SUCCEEDED = 24,
    Proto_AseFep_Event_Type_LOG_MESSAGE_AVAILABLE = 25,
    Proto_AseFep_Event_Type_LOG_MESSAGE_UNAVAILABLE = 26,
    Proto_AseFep_Event_Type_DSP_TONE_TOUCH = 27,
    Proto_AseFep_Event_Type_SYSTEM_STATUS_STANDBY_MULTIROOM = 28,
    Proto_AseFep_Event_Type_SYSTEM_STATUS_TURNING_ON = 29,
    Proto_AseFep_Event_Type_SYSTEM_STATUS_AUDIO_ONLY = 30,
    Proto_AseFep_Event_Type_BT_PLAYER_CONNECTED = 31,
    Proto_AseFep_Event_Type_BT_PLAYER_DISCONNECTED = 32
} Proto_AseFep_Event_Type;
#define _Proto_AseFep_Event_Type_MIN Proto_AseFep_Event_Type_BOOTED
#define _Proto_AseFep_Event_Type_MAX Proto_AseFep_Event_Type_BT_PLAYER_DISCONNECTED
#define _Proto_AseFep_Event_Type_ARRAYSIZE ((Proto_AseFep_Event_Type)(Proto_AseFep_Event_Type_BT_PLAYER_DISCONNECTED+1))

/* Struct definitions */
typedef struct _Proto_AseFep_Event {
    bool has_type;
    Proto_AseFep_Event_Type type;
    pb_size_t which_data;
    union {
        uint32_t soundwallParam;
        Proto_Production_Tunnel productionTunnel;
        Proto_Dsp_AbsoluteVolume volume;
        Proto_Dsp_Mute mute;
        Proto_System_NetworkInfo networkInfo;
        Proto_Player_Data playerData;
        Proto_Dsp_ToneTouch dspToneTouch;
    } data;
/* @@protoc_insertion_point(struct:Proto_AseFep_Event) */
} Proto_AseFep_Event;

typedef struct _Proto_AseFep_Req {
    bool has_type;
    Proto_AseFep_ReqResp type;
    bool has_id;
    uint32_t id;
    pb_size_t which_data;
    union {
        Proto_FirmwareUpdate_Chunk firmwareUpdateChunk;
        Proto_Hdmi_HdmiInput hdmiInput;
        Proto_Dsp_LineInSensitivity lineInSensitivity;
        Proto_Dsp_RequestAudioInput audioInput;
        Proto_Dsp_RequestPositionSoundMode positionSoundMode;
        Proto_Dsp_RequestInternalSpeakerCompensation internalSpeakerCompensation;
        Proto_PowerLink_SetON powerLinkSetOn;
        Proto_PowerLink_SetMute powerLinkSetMute;
        Proto_Dsp_InternalAmplifierCommand internalAmplifierCommand;
        Proto_Eeb_EebTelegram eebTelegramTransmit;
        Proto_Production_LedModeSet ledMode;
        Proto_Production_GetButtonState getButtonState;
        Proto_Hdmi_StandbyCmd standbyType;
        Proto_Wpl_Request wplRequest;
        Proto_Puc_PucCommand sendPucCommand;
        Proto_System_PowerRequest powerRequest;
        Proto_PowerLink_Data powerLinkData;
        Proto_Dsp_ToslinkOutSampleRate toslinkOutSampleRate;
        Proto_Dsp_SpeakerEnableCommand speakerEnableCommand;
        Proto_Hdmi_AudioModeSelect audioMode;
        Proto_LightSensor_Command lightSensorCommand;
        Proto_SoundWall_A2Bmode reqA2Bmode;
        Proto_SoundWall_GainAndDelay reqGainAndDelay;
        Proto_SoundWall_DriverGain reqDriverGain;
        Proto_SoundWall_BassAndRoomEQ reqBassAndRoomEQ;
        Proto_Dsp_Parameter dspParameter;
        Proto_SoundWall_PowerMode reqPowerMode;
        Proto_SoundWall_NodeIndex nodeIndex;
        Proto_SoundWall_MuteMode muteMode;
        Proto_SoundWall_ReqTestTone reqTestTone;
        Proto_Dsp_AbsoluteVolume dspAbsoluteVolume;
    } data;
/* @@protoc_insertion_point(struct:Proto_AseFep_Req) */
} Proto_AseFep_Req;

typedef struct _Proto_AseFep_Resp {
    bool has_type;
    Proto_FepAse_ReqResp type;
    bool has_id;
    uint32_t id;
    bool has_genericResponse;
    Proto_Core_GenericResponse genericResponse;
    pb_size_t which_data;
    union {
        Proto_System_NetworkInfo networkInfo;
        Proto_Dsp_AbsoluteVolume volume;
    } data;
/* @@protoc_insertion_point(struct:Proto_AseFep_Resp) */
} Proto_AseFep_Resp;

/* Default values for struct fields */

/* Initializer values for message structs */
#define Proto_AseFep_Req_init_default            {false, (Proto_AseFep_ReqResp)0, false, 0, 0, {Proto_FirmwareUpdate_Chunk_init_default}}
#define Proto_AseFep_Resp_init_default           {false, (Proto_FepAse_ReqResp)0, false, 0, false, Proto_Core_GenericResponse_init_default, 0, {Proto_System_NetworkInfo_init_default}}
#define Proto_AseFep_Event_init_default          {false, (Proto_AseFep_Event_Type)0, 0, {0}}
#define Proto_AseFep_Req_init_zero               {false, (Proto_AseFep_ReqResp)0, false, 0, 0, {Proto_FirmwareUpdate_Chunk_init_zero}}
#define Proto_AseFep_Resp_init_zero              {false, (Proto_FepAse_ReqResp)0, false, 0, false, Proto_Core_GenericResponse_init_zero, 0, {Proto_System_NetworkInfo_init_zero}}
#define Proto_AseFep_Event_init_zero             {false, (Proto_AseFep_Event_Type)0, 0, {0}}

/* Field tags (for use in manual encoding/decoding) */
#define Proto_AseFep_Event_soundwallParam_tag    9
#define Proto_AseFep_Event_productionTunnel_tag  10
#define Proto_AseFep_Event_volume_tag            11
#define Proto_AseFep_Event_mute_tag              12
#define Proto_AseFep_Event_networkInfo_tag       13
#define Proto_AseFep_Event_playerData_tag        14
#define Proto_AseFep_Event_dspToneTouch_tag      15
#define Proto_AseFep_Event_type_tag              1
#define Proto_AseFep_Req_firmwareUpdateChunk_tag 10
#define Proto_AseFep_Req_hdmiInput_tag           11
#define Proto_AseFep_Req_lineInSensitivity_tag   12
#define Proto_AseFep_Req_audioInput_tag          13
#define Proto_AseFep_Req_positionSoundMode_tag   14
#define Proto_AseFep_Req_internalSpeakerCompensation_tag 15
#define Proto_AseFep_Req_powerLinkSetOn_tag      16
#define Proto_AseFep_Req_powerLinkSetMute_tag    17
#define Proto_AseFep_Req_internalAmplifierCommand_tag 18
#define Proto_AseFep_Req_eebTelegramTransmit_tag 19
#define Proto_AseFep_Req_ledMode_tag             20
#define Proto_AseFep_Req_getButtonState_tag      21
#define Proto_AseFep_Req_standbyType_tag         22
#define Proto_AseFep_Req_wplRequest_tag          23
#define Proto_AseFep_Req_sendPucCommand_tag      24
#define Proto_AseFep_Req_powerRequest_tag        25
#define Proto_AseFep_Req_powerLinkData_tag       26
#define Proto_AseFep_Req_toslinkOutSampleRate_tag 27
#define Proto_AseFep_Req_speakerEnableCommand_tag 28
#define Proto_AseFep_Req_audioMode_tag           29
#define Proto_AseFep_Req_lightSensorCommand_tag  30
#define Proto_AseFep_Req_reqA2Bmode_tag          31
#define Proto_AseFep_Req_reqGainAndDelay_tag     32
#define Proto_AseFep_Req_reqDriverGain_tag       33
#define Proto_AseFep_Req_reqBassAndRoomEQ_tag    34
#define Proto_AseFep_Req_dspParameter_tag        35
#define Proto_AseFep_Req_reqPowerMode_tag        36
#define Proto_AseFep_Req_nodeIndex_tag           37
#define Proto_AseFep_Req_muteMode_tag            38
#define Proto_AseFep_Req_reqTestTone_tag         39
#define Proto_AseFep_Req_dspAbsoluteVolume_tag   40
#define Proto_AseFep_Req_type_tag                1
#define Proto_AseFep_Req_id_tag                  2
#define Proto_AseFep_Resp_networkInfo_tag        10
#define Proto_AseFep_Resp_volume_tag             11
#define Proto_AseFep_Resp_type_tag               1
#define Proto_AseFep_Resp_id_tag                 2
#define Proto_AseFep_Resp_genericResponse_tag    3

/* Struct field encoding specification for nanopb */
extern const pb_field_t Proto_AseFep_Req_fields[34];
extern const pb_field_t Proto_AseFep_Resp_fields[6];
extern const pb_field_t Proto_AseFep_Event_fields[9];

/* Maximum encoded size of messages (where known) */
/* Proto_AseFep_Req_size depends on runtime parameters */
#define Proto_AseFep_Resp_size                   50
#define Proto_AseFep_Event_size                  133

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define ASE_FEP_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif

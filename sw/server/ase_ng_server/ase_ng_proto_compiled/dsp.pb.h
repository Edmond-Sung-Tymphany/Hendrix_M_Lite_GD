/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.7 at Tue May 16 18:29:06 2017. */

#ifndef PB_PROTO_DSP_DSP_PB_H_INCLUDED
#define PB_PROTO_DSP_DSP_PB_H_INCLUDED
#include <pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _Proto_Dsp_LineInSensitivity_Sensitivity {
    Proto_Dsp_LineInSensitivity_Sensitivity_HIGH = 0,
    Proto_Dsp_LineInSensitivity_Sensitivity_MEDIUM = 1,
    Proto_Dsp_LineInSensitivity_Sensitivity_LOW = 2,
    Proto_Dsp_LineInSensitivity_Sensitivity_DISABLED = 3
} Proto_Dsp_LineInSensitivity_Sensitivity;
#define _Proto_Dsp_LineInSensitivity_Sensitivity_MIN Proto_Dsp_LineInSensitivity_Sensitivity_HIGH
#define _Proto_Dsp_LineInSensitivity_Sensitivity_MAX Proto_Dsp_LineInSensitivity_Sensitivity_DISABLED
#define _Proto_Dsp_LineInSensitivity_Sensitivity_ARRAYSIZE ((Proto_Dsp_LineInSensitivity_Sensitivity)(Proto_Dsp_LineInSensitivity_Sensitivity_DISABLED+1))

typedef enum _Proto_Dsp_RequestAudioInput_AudioInput {
    Proto_Dsp_RequestAudioInput_AudioInput_ASE = 0,
    Proto_Dsp_RequestAudioInput_AudioInput_LINE = 1,
    Proto_Dsp_RequestAudioInput_AudioInput_TOS_LINK = 2,
    Proto_Dsp_RequestAudioInput_AudioInput_POWER_LINK = 3,
    Proto_Dsp_RequestAudioInput_AudioInput_HDMI = 4,
    Proto_Dsp_RequestAudioInput_AudioInput_WIRELESS_MULTICHANNEL = 5,
    Proto_Dsp_RequestAudioInput_AudioInput_HDMI_ARC = 6,
    Proto_Dsp_RequestAudioInput_AudioInput_MICROPHONE_1 = 7,
    Proto_Dsp_RequestAudioInput_AudioInput_MICROPHONE_2 = 8
} Proto_Dsp_RequestAudioInput_AudioInput;
#define _Proto_Dsp_RequestAudioInput_AudioInput_MIN Proto_Dsp_RequestAudioInput_AudioInput_ASE
#define _Proto_Dsp_RequestAudioInput_AudioInput_MAX Proto_Dsp_RequestAudioInput_AudioInput_MICROPHONE_2
#define _Proto_Dsp_RequestAudioInput_AudioInput_ARRAYSIZE ((Proto_Dsp_RequestAudioInput_AudioInput)(Proto_Dsp_RequestAudioInput_AudioInput_MICROPHONE_2+1))

typedef enum _Proto_Dsp_PositionSoundMode_Position {
    Proto_Dsp_PositionSoundMode_Position_UNDEFINED = 0,
    Proto_Dsp_PositionSoundMode_Position_FREE = 1,
    Proto_Dsp_PositionSoundMode_Position_WALL = 2,
    Proto_Dsp_PositionSoundMode_Position_CORNER = 3,
    Proto_Dsp_PositionSoundMode_Position_TABLE = 4
} Proto_Dsp_PositionSoundMode_Position;
#define _Proto_Dsp_PositionSoundMode_Position_MIN Proto_Dsp_PositionSoundMode_Position_UNDEFINED
#define _Proto_Dsp_PositionSoundMode_Position_MAX Proto_Dsp_PositionSoundMode_Position_TABLE
#define _Proto_Dsp_PositionSoundMode_Position_ARRAYSIZE ((Proto_Dsp_PositionSoundMode_Position)(Proto_Dsp_PositionSoundMode_Position_TABLE+1))

typedef enum _Proto_Dsp_PositionSoundMode_Orientation {
    Proto_Dsp_PositionSoundMode_Orientation_NONE = 0,
    Proto_Dsp_PositionSoundMode_Orientation_HORIZONTAL = 1,
    Proto_Dsp_PositionSoundMode_Orientation_VERTICAL = 2
} Proto_Dsp_PositionSoundMode_Orientation;
#define _Proto_Dsp_PositionSoundMode_Orientation_MIN Proto_Dsp_PositionSoundMode_Orientation_NONE
#define _Proto_Dsp_PositionSoundMode_Orientation_MAX Proto_Dsp_PositionSoundMode_Orientation_VERTICAL
#define _Proto_Dsp_PositionSoundMode_Orientation_ARRAYSIZE ((Proto_Dsp_PositionSoundMode_Orientation)(Proto_Dsp_PositionSoundMode_Orientation_VERTICAL+1))

typedef enum _Proto_Dsp_ResponsePositionSoundMode_Error {
    Proto_Dsp_ResponsePositionSoundMode_Error_NO_ERROR = 1,
    Proto_Dsp_ResponsePositionSoundMode_Error_POSITION_ERROR = 2,
    Proto_Dsp_ResponsePositionSoundMode_Error_ORIENTATION_ERROR = 3,
    Proto_Dsp_ResponsePositionSoundMode_Error_COMBINATION_ERROR = 4
} Proto_Dsp_ResponsePositionSoundMode_Error;
#define _Proto_Dsp_ResponsePositionSoundMode_Error_MIN Proto_Dsp_ResponsePositionSoundMode_Error_NO_ERROR
#define _Proto_Dsp_ResponsePositionSoundMode_Error_MAX Proto_Dsp_ResponsePositionSoundMode_Error_COMBINATION_ERROR
#define _Proto_Dsp_ResponsePositionSoundMode_Error_ARRAYSIZE ((Proto_Dsp_ResponsePositionSoundMode_Error)(Proto_Dsp_ResponsePositionSoundMode_Error_COMBINATION_ERROR+1))

typedef enum _Proto_Dsp_InternalSpeaker_Position {
    Proto_Dsp_InternalSpeaker_Position_LEFT = 0,
    Proto_Dsp_InternalSpeaker_Position_RIGHT = 1,
    Proto_Dsp_InternalSpeaker_Position_CENTRE = 2
} Proto_Dsp_InternalSpeaker_Position;
#define _Proto_Dsp_InternalSpeaker_Position_MIN Proto_Dsp_InternalSpeaker_Position_LEFT
#define _Proto_Dsp_InternalSpeaker_Position_MAX Proto_Dsp_InternalSpeaker_Position_CENTRE
#define _Proto_Dsp_InternalSpeaker_Position_ARRAYSIZE ((Proto_Dsp_InternalSpeaker_Position)(Proto_Dsp_InternalSpeaker_Position_CENTRE+1))

typedef enum _Proto_Dsp_InternalSpeaker_Type {
    Proto_Dsp_InternalSpeaker_Type_TWEETER = 0,
    Proto_Dsp_InternalSpeaker_Type_MIDRANGE = 1,
    Proto_Dsp_InternalSpeaker_Type_WOOFER = 2,
    Proto_Dsp_InternalSpeaker_Type_FULLRANGE = 3
} Proto_Dsp_InternalSpeaker_Type;
#define _Proto_Dsp_InternalSpeaker_Type_MIN Proto_Dsp_InternalSpeaker_Type_TWEETER
#define _Proto_Dsp_InternalSpeaker_Type_MAX Proto_Dsp_InternalSpeaker_Type_FULLRANGE
#define _Proto_Dsp_InternalSpeaker_Type_ARRAYSIZE ((Proto_Dsp_InternalSpeaker_Type)(Proto_Dsp_InternalSpeaker_Type_FULLRANGE+1))

typedef enum _Proto_Dsp_ResponseInternalSpeakerCompensation_Error {
    Proto_Dsp_ResponseInternalSpeakerCompensation_Error_NO_ERROR = 1,
    Proto_Dsp_ResponseInternalSpeakerCompensation_Error_POSITION_ERROR = 2,
    Proto_Dsp_ResponseInternalSpeakerCompensation_Error_TYPE_ERROR = 3,
    Proto_Dsp_ResponseInternalSpeakerCompensation_Error_POSITION_TYPE_COMBINATION_ERROR = 4,
    Proto_Dsp_ResponseInternalSpeakerCompensation_Error_GAIN_ERROR = 5
} Proto_Dsp_ResponseInternalSpeakerCompensation_Error;
#define _Proto_Dsp_ResponseInternalSpeakerCompensation_Error_MIN Proto_Dsp_ResponseInternalSpeakerCompensation_Error_NO_ERROR
#define _Proto_Dsp_ResponseInternalSpeakerCompensation_Error_MAX Proto_Dsp_ResponseInternalSpeakerCompensation_Error_GAIN_ERROR
#define _Proto_Dsp_ResponseInternalSpeakerCompensation_Error_ARRAYSIZE ((Proto_Dsp_ResponseInternalSpeakerCompensation_Error)(Proto_Dsp_ResponseInternalSpeakerCompensation_Error_GAIN_ERROR+1))

typedef enum _Proto_Dsp_InternalAmplifierCommand_State {
    Proto_Dsp_InternalAmplifierCommand_State_OFF = 0,
    Proto_Dsp_InternalAmplifierCommand_State_ON = 1
} Proto_Dsp_InternalAmplifierCommand_State;
#define _Proto_Dsp_InternalAmplifierCommand_State_MIN Proto_Dsp_InternalAmplifierCommand_State_OFF
#define _Proto_Dsp_InternalAmplifierCommand_State_MAX Proto_Dsp_InternalAmplifierCommand_State_ON
#define _Proto_Dsp_InternalAmplifierCommand_State_ARRAYSIZE ((Proto_Dsp_InternalAmplifierCommand_State)(Proto_Dsp_InternalAmplifierCommand_State_ON+1))

typedef enum _Proto_Dsp_SpeakerEnableCommand_Speaker_Id {
    Proto_Dsp_SpeakerEnableCommand_Speaker_Id_FRONT = 0,
    Proto_Dsp_SpeakerEnableCommand_Speaker_Id_REAR = 1
} Proto_Dsp_SpeakerEnableCommand_Speaker_Id;
#define _Proto_Dsp_SpeakerEnableCommand_Speaker_Id_MIN Proto_Dsp_SpeakerEnableCommand_Speaker_Id_FRONT
#define _Proto_Dsp_SpeakerEnableCommand_Speaker_Id_MAX Proto_Dsp_SpeakerEnableCommand_Speaker_Id_REAR
#define _Proto_Dsp_SpeakerEnableCommand_Speaker_Id_ARRAYSIZE ((Proto_Dsp_SpeakerEnableCommand_Speaker_Id)(Proto_Dsp_SpeakerEnableCommand_Speaker_Id_REAR+1))

typedef enum _Proto_Dsp_NTCDataEvent_NTCValue_NTC {
    Proto_Dsp_NTCDataEvent_NTCValue_NTC_EXT_NTC1 = 0,
    Proto_Dsp_NTCDataEvent_NTCValue_NTC_EXT_NTC2 = 1,
    Proto_Dsp_NTCDataEvent_NTCValue_NTC_EXT_NTC3 = 2,
    Proto_Dsp_NTCDataEvent_NTCValue_NTC_EXT_NTC4 = 3,
    Proto_Dsp_NTCDataEvent_NTCValue_NTC_EXT_NTC5 = 4,
    Proto_Dsp_NTCDataEvent_NTCValue_NTC_EXT_NTC6 = 5,
    Proto_Dsp_NTCDataEvent_NTCValue_NTC_EXT_NTC7 = 6,
    Proto_Dsp_NTCDataEvent_NTCValue_NTC_EXT_NTC8 = 7,
    Proto_Dsp_NTCDataEvent_NTCValue_NTC_AMP_NTC_CH1 = 8,
    Proto_Dsp_NTCDataEvent_NTCValue_NTC_AMP_NTC_CH2_3 = 9,
    Proto_Dsp_NTCDataEvent_NTCValue_NTC_AMP_NTC_CH4 = 10,
    Proto_Dsp_NTCDataEvent_NTCValue_NTC_AMP_NTC_CH5 = 11,
    Proto_Dsp_NTCDataEvent_NTCValue_NTC_AMP_NTC_CH6_7 = 12,
    Proto_Dsp_NTCDataEvent_NTCValue_NTC_AMP_NTC_CH8 = 13,
    Proto_Dsp_NTCDataEvent_NTCValue_NTC_NTC_PSU = 14,
    Proto_Dsp_NTCDataEvent_NTCValue_NTC_NTC_DSP = 15,
    Proto_Dsp_NTCDataEvent_NTCValue_NTC_NTC_AMP = 16
} Proto_Dsp_NTCDataEvent_NTCValue_NTC;
#define _Proto_Dsp_NTCDataEvent_NTCValue_NTC_MIN Proto_Dsp_NTCDataEvent_NTCValue_NTC_EXT_NTC1
#define _Proto_Dsp_NTCDataEvent_NTCValue_NTC_MAX Proto_Dsp_NTCDataEvent_NTCValue_NTC_NTC_AMP
#define _Proto_Dsp_NTCDataEvent_NTCValue_NTC_ARRAYSIZE ((Proto_Dsp_NTCDataEvent_NTCValue_NTC)(Proto_Dsp_NTCDataEvent_NTCValue_NTC_NTC_AMP+1))

typedef enum _Proto_Dsp_Parameter_Type {
    Proto_Dsp_Parameter_Type_LOUDNESS = 0,
    Proto_Dsp_Parameter_Type_BASS = 1,
    Proto_Dsp_Parameter_Type_TREBLE = 2
} Proto_Dsp_Parameter_Type;
#define _Proto_Dsp_Parameter_Type_MIN Proto_Dsp_Parameter_Type_LOUDNESS
#define _Proto_Dsp_Parameter_Type_MAX Proto_Dsp_Parameter_Type_TREBLE
#define _Proto_Dsp_Parameter_Type_ARRAYSIZE ((Proto_Dsp_Parameter_Type)(Proto_Dsp_Parameter_Type_TREBLE+1))

/* Struct definitions */
typedef struct _Proto_Dsp_NTCDataEvent {
    pb_callback_t ntcValues;
/* @@protoc_insertion_point(struct:Proto_Dsp_NTCDataEvent) */
} Proto_Dsp_NTCDataEvent;

typedef struct _Proto_Dsp_RequestInternalSpeakerCompensation {
    pb_callback_t internalSpeaker;
/* @@protoc_insertion_point(struct:Proto_Dsp_RequestInternalSpeakerCompensation) */
} Proto_Dsp_RequestInternalSpeakerCompensation;

typedef struct _Proto_Dsp_SpeakerEnableCommand {
    pb_callback_t speaker;
/* @@protoc_insertion_point(struct:Proto_Dsp_SpeakerEnableCommand) */
} Proto_Dsp_SpeakerEnableCommand;

typedef struct _Proto_Dsp_AbsoluteVolume {
    bool has_volume;
    uint32_t volume;
    bool has_fade_duration;
    uint32_t fade_duration;
/* @@protoc_insertion_point(struct:Proto_Dsp_AbsoluteVolume) */
} Proto_Dsp_AbsoluteVolume;

typedef struct _Proto_Dsp_InternalAmplifierCommand {
    bool has_state;
    Proto_Dsp_InternalAmplifierCommand_State state;
/* @@protoc_insertion_point(struct:Proto_Dsp_InternalAmplifierCommand) */
} Proto_Dsp_InternalAmplifierCommand;

typedef struct _Proto_Dsp_InternalSpeaker {
    bool has_position;
    Proto_Dsp_InternalSpeaker_Position position;
    bool has_type;
    Proto_Dsp_InternalSpeaker_Type type;
    bool has_compensation;
    double compensation;
/* @@protoc_insertion_point(struct:Proto_Dsp_InternalSpeaker) */
} Proto_Dsp_InternalSpeaker;

typedef struct _Proto_Dsp_LineInSensitivity {
    bool has_sensitivity;
    Proto_Dsp_LineInSensitivity_Sensitivity sensitivity;
/* @@protoc_insertion_point(struct:Proto_Dsp_LineInSensitivity) */
} Proto_Dsp_LineInSensitivity;

typedef struct _Proto_Dsp_Mute {
    bool has_mute;
    bool mute;
/* @@protoc_insertion_point(struct:Proto_Dsp_Mute) */
} Proto_Dsp_Mute;

typedef struct _Proto_Dsp_NTCDataEvent_NTCValue {
    bool has_id;
    Proto_Dsp_NTCDataEvent_NTCValue_NTC id;
    int32_t value;
/* @@protoc_insertion_point(struct:Proto_Dsp_NTCDataEvent_NTCValue) */
} Proto_Dsp_NTCDataEvent_NTCValue;

typedef struct _Proto_Dsp_Parameter {
    bool has_type;
    Proto_Dsp_Parameter_Type type;
    bool has_value;
    int32_t value;
/* @@protoc_insertion_point(struct:Proto_Dsp_Parameter) */
} Proto_Dsp_Parameter;

typedef struct _Proto_Dsp_PositionSoundMode {
    bool has_position;
    Proto_Dsp_PositionSoundMode_Position position;
    bool has_orientation;
    Proto_Dsp_PositionSoundMode_Orientation orientation;
/* @@protoc_insertion_point(struct:Proto_Dsp_PositionSoundMode) */
} Proto_Dsp_PositionSoundMode;

typedef struct _Proto_Dsp_RelativeVolumeChange {
    bool has_volumeChange;
    int32_t volumeChange;
/* @@protoc_insertion_point(struct:Proto_Dsp_RelativeVolumeChange) */
} Proto_Dsp_RelativeVolumeChange;

typedef struct _Proto_Dsp_RequestAudioInput {
    bool has_input;
    Proto_Dsp_RequestAudioInput_AudioInput input;
    bool has_local;
    bool local;
/* @@protoc_insertion_point(struct:Proto_Dsp_RequestAudioInput) */
} Proto_Dsp_RequestAudioInput;

typedef struct _Proto_Dsp_ResponseInternalSpeakerCompensation {
    bool has_error;
    Proto_Dsp_ResponseInternalSpeakerCompensation_Error error;
    pb_callback_t internalSpeaker;
/* @@protoc_insertion_point(struct:Proto_Dsp_ResponseInternalSpeakerCompensation) */
} Proto_Dsp_ResponseInternalSpeakerCompensation;

typedef struct _Proto_Dsp_SpeakerEnableCommand_Speaker {
    bool has_id;
    Proto_Dsp_SpeakerEnableCommand_Speaker_Id id;
    bool has_enabled;
    bool enabled;
/* @@protoc_insertion_point(struct:Proto_Dsp_SpeakerEnableCommand_Speaker) */
} Proto_Dsp_SpeakerEnableCommand_Speaker;

typedef struct _Proto_Dsp_ToneTouch {
    bool has_Gx1;
    double Gx1;
    bool has_Gy1;
    double Gy1;
    bool has_Gx2;
    double Gx2;
    bool has_Gy2;
    double Gy2;
    bool has_Gz;
    double Gz;
    bool has_k5;
    double k5;
    bool has_k6;
    double k6;
    bool has_enabled;
    bool enabled;
/* @@protoc_insertion_point(struct:Proto_Dsp_ToneTouch) */
} Proto_Dsp_ToneTouch;

typedef struct _Proto_Dsp_ToslinkOutSampleRate {
    bool has_sampleRate;
    uint32_t sampleRate;
/* @@protoc_insertion_point(struct:Proto_Dsp_ToslinkOutSampleRate) */
} Proto_Dsp_ToslinkOutSampleRate;

typedef struct _Proto_Dsp_RequestPositionSoundMode {
    bool has_positionSoundMode;
    Proto_Dsp_PositionSoundMode positionSoundMode;
/* @@protoc_insertion_point(struct:Proto_Dsp_RequestPositionSoundMode) */
} Proto_Dsp_RequestPositionSoundMode;

typedef struct _Proto_Dsp_ResponsePositionSoundMode {
    bool has_error;
    Proto_Dsp_ResponsePositionSoundMode_Error error;
    bool has_mode;
    Proto_Dsp_PositionSoundMode mode;
/* @@protoc_insertion_point(struct:Proto_Dsp_ResponsePositionSoundMode) */
} Proto_Dsp_ResponsePositionSoundMode;

/* Default values for struct fields */

/* Initializer values for message structs */
#define Proto_Dsp_LineInSensitivity_init_default {false, (Proto_Dsp_LineInSensitivity_Sensitivity)0}
#define Proto_Dsp_AbsoluteVolume_init_default    {false, 0, false, 0}
#define Proto_Dsp_RelativeVolumeChange_init_default {false, 0}
#define Proto_Dsp_Mute_init_default              {false, 0}
#define Proto_Dsp_RequestAudioInput_init_default {false, (Proto_Dsp_RequestAudioInput_AudioInput)0, false, 0}
#define Proto_Dsp_PositionSoundMode_init_default {false, (Proto_Dsp_PositionSoundMode_Position)0, false, (Proto_Dsp_PositionSoundMode_Orientation)0}
#define Proto_Dsp_RequestPositionSoundMode_init_default {false, Proto_Dsp_PositionSoundMode_init_default}
#define Proto_Dsp_ResponsePositionSoundMode_init_default {false, (Proto_Dsp_ResponsePositionSoundMode_Error)0, false, Proto_Dsp_PositionSoundMode_init_default}
#define Proto_Dsp_InternalSpeaker_init_default   {false, (Proto_Dsp_InternalSpeaker_Position)0, false, (Proto_Dsp_InternalSpeaker_Type)0, false, 0}
#define Proto_Dsp_RequestInternalSpeakerCompensation_init_default {{{NULL}, NULL}}
#define Proto_Dsp_ResponseInternalSpeakerCompensation_init_default {false, (Proto_Dsp_ResponseInternalSpeakerCompensation_Error)0, {{NULL}, NULL}}
#define Proto_Dsp_InternalAmplifierCommand_init_default {false, (Proto_Dsp_InternalAmplifierCommand_State)0}
#define Proto_Dsp_SpeakerEnableCommand_init_default {{{NULL}, NULL}}
#define Proto_Dsp_SpeakerEnableCommand_Speaker_init_default {false, (Proto_Dsp_SpeakerEnableCommand_Speaker_Id)0, false, 0}
#define Proto_Dsp_NTCDataEvent_init_default      {{{NULL}, NULL}}
#define Proto_Dsp_NTCDataEvent_NTCValue_init_default {false, (Proto_Dsp_NTCDataEvent_NTCValue_NTC)0, 0}
#define Proto_Dsp_ToslinkOutSampleRate_init_default {false, 0}
#define Proto_Dsp_Parameter_init_default         {false, (Proto_Dsp_Parameter_Type)0, false, 0}
#define Proto_Dsp_ToneTouch_init_default         {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}
#define Proto_Dsp_LineInSensitivity_init_zero    {false, (Proto_Dsp_LineInSensitivity_Sensitivity)0}
#define Proto_Dsp_AbsoluteVolume_init_zero       {false, 0, false, 0}
#define Proto_Dsp_RelativeVolumeChange_init_zero {false, 0}
#define Proto_Dsp_Mute_init_zero                 {false, 0}
#define Proto_Dsp_RequestAudioInput_init_zero    {false, (Proto_Dsp_RequestAudioInput_AudioInput)0, false, 0}
#define Proto_Dsp_PositionSoundMode_init_zero    {false, (Proto_Dsp_PositionSoundMode_Position)0, false, (Proto_Dsp_PositionSoundMode_Orientation)0}
#define Proto_Dsp_RequestPositionSoundMode_init_zero {false, Proto_Dsp_PositionSoundMode_init_zero}
#define Proto_Dsp_ResponsePositionSoundMode_init_zero {false, (Proto_Dsp_ResponsePositionSoundMode_Error)0, false, Proto_Dsp_PositionSoundMode_init_zero}
#define Proto_Dsp_InternalSpeaker_init_zero      {false, (Proto_Dsp_InternalSpeaker_Position)0, false, (Proto_Dsp_InternalSpeaker_Type)0, false, 0}
#define Proto_Dsp_RequestInternalSpeakerCompensation_init_zero {{{NULL}, NULL}}
#define Proto_Dsp_ResponseInternalSpeakerCompensation_init_zero {false, (Proto_Dsp_ResponseInternalSpeakerCompensation_Error)0, {{NULL}, NULL}}
#define Proto_Dsp_InternalAmplifierCommand_init_zero {false, (Proto_Dsp_InternalAmplifierCommand_State)0}
#define Proto_Dsp_SpeakerEnableCommand_init_zero {{{NULL}, NULL}}
#define Proto_Dsp_SpeakerEnableCommand_Speaker_init_zero {false, (Proto_Dsp_SpeakerEnableCommand_Speaker_Id)0, false, 0}
#define Proto_Dsp_NTCDataEvent_init_zero         {{{NULL}, NULL}}
#define Proto_Dsp_NTCDataEvent_NTCValue_init_zero {false, (Proto_Dsp_NTCDataEvent_NTCValue_NTC)0, 0}
#define Proto_Dsp_ToslinkOutSampleRate_init_zero {false, 0}
#define Proto_Dsp_Parameter_init_zero            {false, (Proto_Dsp_Parameter_Type)0, false, 0}
#define Proto_Dsp_ToneTouch_init_zero            {false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0}

/* Field tags (for use in manual encoding/decoding) */
#define Proto_Dsp_NTCDataEvent_ntcValues_tag     1
#define Proto_Dsp_RequestInternalSpeakerCompensation_internalSpeaker_tag 1
#define Proto_Dsp_SpeakerEnableCommand_speaker_tag 1
#define Proto_Dsp_AbsoluteVolume_volume_tag      1
#define Proto_Dsp_AbsoluteVolume_fade_duration_tag 2
#define Proto_Dsp_InternalAmplifierCommand_state_tag 1
#define Proto_Dsp_InternalSpeaker_position_tag   1
#define Proto_Dsp_InternalSpeaker_type_tag       2
#define Proto_Dsp_InternalSpeaker_compensation_tag 3
#define Proto_Dsp_LineInSensitivity_sensitivity_tag 1
#define Proto_Dsp_Mute_mute_tag                  1
#define Proto_Dsp_NTCDataEvent_NTCValue_id_tag   1
#define Proto_Dsp_NTCDataEvent_NTCValue_value_tag 2
#define Proto_Dsp_Parameter_type_tag             1
#define Proto_Dsp_Parameter_value_tag            2
#define Proto_Dsp_PositionSoundMode_position_tag 1
#define Proto_Dsp_PositionSoundMode_orientation_tag 2
#define Proto_Dsp_RelativeVolumeChange_volumeChange_tag 1
#define Proto_Dsp_RequestAudioInput_input_tag    1
#define Proto_Dsp_RequestAudioInput_local_tag    2
#define Proto_Dsp_ResponseInternalSpeakerCompensation_error_tag 1
#define Proto_Dsp_ResponseInternalSpeakerCompensation_internalSpeaker_tag 2
#define Proto_Dsp_SpeakerEnableCommand_Speaker_id_tag 1
#define Proto_Dsp_SpeakerEnableCommand_Speaker_enabled_tag 2
#define Proto_Dsp_ToneTouch_Gx1_tag              1
#define Proto_Dsp_ToneTouch_Gy1_tag              2
#define Proto_Dsp_ToneTouch_Gx2_tag              3
#define Proto_Dsp_ToneTouch_Gy2_tag              4
#define Proto_Dsp_ToneTouch_Gz_tag               5
#define Proto_Dsp_ToneTouch_k5_tag               6
#define Proto_Dsp_ToneTouch_k6_tag               7
#define Proto_Dsp_ToneTouch_enabled_tag          8
#define Proto_Dsp_ToslinkOutSampleRate_sampleRate_tag 1
#define Proto_Dsp_RequestPositionSoundMode_positionSoundMode_tag 1
#define Proto_Dsp_ResponsePositionSoundMode_error_tag 1
#define Proto_Dsp_ResponsePositionSoundMode_mode_tag 2

/* Struct field encoding specification for nanopb */
extern const pb_field_t Proto_Dsp_LineInSensitivity_fields[2];
extern const pb_field_t Proto_Dsp_AbsoluteVolume_fields[3];
extern const pb_field_t Proto_Dsp_RelativeVolumeChange_fields[2];
extern const pb_field_t Proto_Dsp_Mute_fields[2];
extern const pb_field_t Proto_Dsp_RequestAudioInput_fields[3];
extern const pb_field_t Proto_Dsp_PositionSoundMode_fields[3];
extern const pb_field_t Proto_Dsp_RequestPositionSoundMode_fields[2];
extern const pb_field_t Proto_Dsp_ResponsePositionSoundMode_fields[3];
extern const pb_field_t Proto_Dsp_InternalSpeaker_fields[4];
extern const pb_field_t Proto_Dsp_RequestInternalSpeakerCompensation_fields[2];
extern const pb_field_t Proto_Dsp_ResponseInternalSpeakerCompensation_fields[3];
extern const pb_field_t Proto_Dsp_InternalAmplifierCommand_fields[2];
extern const pb_field_t Proto_Dsp_SpeakerEnableCommand_fields[2];
extern const pb_field_t Proto_Dsp_SpeakerEnableCommand_Speaker_fields[3];
extern const pb_field_t Proto_Dsp_NTCDataEvent_fields[2];
extern const pb_field_t Proto_Dsp_NTCDataEvent_NTCValue_fields[3];
extern const pb_field_t Proto_Dsp_ToslinkOutSampleRate_fields[2];
extern const pb_field_t Proto_Dsp_Parameter_fields[3];
extern const pb_field_t Proto_Dsp_ToneTouch_fields[9];

/* Maximum encoded size of messages (where known) */
#define Proto_Dsp_LineInSensitivity_size         2
#define Proto_Dsp_AbsoluteVolume_size            12
#define Proto_Dsp_RelativeVolumeChange_size      11
#define Proto_Dsp_Mute_size                      2
#define Proto_Dsp_RequestAudioInput_size         4
#define Proto_Dsp_PositionSoundMode_size         4
#define Proto_Dsp_RequestPositionSoundMode_size  6
#define Proto_Dsp_ResponsePositionSoundMode_size 8
#define Proto_Dsp_InternalSpeaker_size           13
/* Proto_Dsp_RequestInternalSpeakerCompensation_size depends on runtime parameters */
/* Proto_Dsp_ResponseInternalSpeakerCompensation_size depends on runtime parameters */
#define Proto_Dsp_InternalAmplifierCommand_size  2
/* Proto_Dsp_SpeakerEnableCommand_size depends on runtime parameters */
#define Proto_Dsp_SpeakerEnableCommand_Speaker_size 4
/* Proto_Dsp_NTCDataEvent_size depends on runtime parameters */
#define Proto_Dsp_NTCDataEvent_NTCValue_size     13
#define Proto_Dsp_ToslinkOutSampleRate_size      6
#define Proto_Dsp_Parameter_size                 13
#define Proto_Dsp_ToneTouch_size                 65

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define DSP_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif

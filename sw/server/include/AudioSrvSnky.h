/*
-------------------------------------------------------------------------------
TYMPHANY LTD





                  Audio Server
                  -------------------------

                  SW Module Document




@file        AudioSrv.h
@brief       This file declare the structure and interfaces of the audio server
@author      Bob.Xu
@date        2014-02-17
@copyright (c) Tymphany Ltd. All rights reserved.

Change History:
VERSION    : 1    DRAFT      2014-08-22     Bob.Xu
DESCRIPTION: First Draft. Generated by newclass.py
SCO/ERROR  :
-------------------------------------------------------------------------------
*/









//TO DO: Audio server refactor will start after discussion of the new
//DSP driver with Daniel










#ifndef AUDIOSRV_H
#define AUDIOSRV_H

#ifdef __cplusplus
extern "C" {
#endif

#include "server.h"

#define AUDIO_ACTIVE_DELAY_UNMUTE_TIME          500         // 500ms
#define AUDIO_ACTIVE_LINE_IN_JACK_SCAN_TIME     1000        // 1000ms
#define AUDIO_ACTIVE_MUSIC_DETECT_TIME          1000        // 1000ms
#define AUDIO_SWITCH_CHANNEL_DELAY_TIME         100

typedef enum
{
    AUDIO_VOL_DOWN_EVT,
    AUDIO_VOL_UP_EVT,

}eAudioEvt;

typedef enum
{
    AUDIO_CHANNEL_INVALID,
    AUDIO_CHANNEL_0,
    AUDIO_CHANNEL_1,
    AUDIO_CHANNEL_2,
    END_AUDIO_CHANNEL
}eAudioChannel;

typedef enum
{
    AUDIO_VOLUME_INVALID,
    AUDIO_VOLUME_DOWN,
    AUDIO_VOLUME_UP,
    AUDIO_SET_VOLUME_EVT,
    AUDIO_MUTE_EVT,
    AUDIO_MUSIC_DETECTED_EVT,
    AUDIO_SWITCH_CH_EVT,
    AUDIO_SET_TUNNING_EVT,
    AUDIO_PRESET_EVT,
    AUDIO_SET_BGC_EVT,
    AUDIO_SET_HP_FILTER_EVT,  /* High pass filter */
    AUDIO_SET_LP_FILTER_EVT,  /* Low pass filter */
    AUDIO_SET_POLARITY_EVT,
    AUDIO_PLAINEQ_EVT,
    AUDIO_PRESET_EQ_EVT,
    END_AUDIO_VOLUME_UPDOWN
}eAudioVolumeUpDownDirection;

IND_EVT(AudioSrcInd)
    uint8 AudioSrc;
END_IND_EVT(AudioSrcInd)

IND_EVT(AudioStateEvt)
    bool IsJackIn;
END_IND_EVT(AudioStateEvt)


IND_EVT(AudioMusicDetectStateEvt)
    bool bIsMusicDetected;
END_IND_EVT(AudioMusicDetectStateEvt)

#ifdef AUDIO_MULTI_SOURCE
REQ_EVT(AudioChannelSwitchReqEvt)
    eAudioChannel channel;
END_REQ_EVT(AudioChannelSwitchReqEvt)
#endif //AUDIO_MULTI_SOURCE

REQ_EVT(AudioMusicDetectReqEvt)
END_REQ_EVT(AudioMusicDetectReqEvt)

RESP_EVT(AudioMusicDetectRspEvt)
    bool bIsMusicDetected;
END_RESP_EVT(AudioMusicDetectRspEvt)

REQ_EVT(AudioVolumeSetReqEvt)
    uint8 volume;
END_REQ_EVT(AudioVolumeSetReqEvt)

REQ_EVT(AudioPEQSetReqEvt)
    uint8 pEQ;
END_REQ_EVT(AudioPEQSetReqEvt)


REQ_EVT(AudioLineInjackDetecionEvt)
END_REQ_EVT(AudioLineInjackDetecionEvt)

RESP_EVT(AudioLineInjackDetecionRespEvt)
    bool bIsPlugged;
END_RESP_EVT(AudioLineInjackDetecionRespEvt)

REQ_EVT(AudioVolumeUpdownReqEvt)
    eAudioVolumeUpDownDirection vol_updown;
END_REQ_EVT(AudioVolumeUpdownReqEvt)


REQ_EVT(AudioMuteReqEvt)
    bool mute;
END_REQ_EVT(AudioMuteReqEvt)

REQ_EVT(AudioPlainEQReqEvt)
    bool plainEqOn;
END_REQ_EVT(AudioPlainEQReqEvt)

SUBCLASS(cAudioSrv, cServer)
    /* private data */
    QTimeEvt scanJackEvt; /* Can we not use a divisor from the main ticker to do this??? */
    int32 muteTimer;
    int32 unmuteTimer;
    int32 JackScanTimer;
    int32 musicDetectTimer;
    uint16 timer;
    eAudioChannel channel;

//    tAudioCtrl control;
METHODS
    /* public functions */
    void AudioSrv_StartUp(cPersistantObj *me);
    void AudioSrv_ShutDown(cPersistantObj *me);

    void AudioSrv_SendSwitchChannelReq(eAudioChannel channel);
    void AudioSrv_setPresetEQ(uint8 presetEQ);
    void AudioSrv_SendMuteReq(const bool mute);
    void AudioSrv_ActivatePlainEQ(const bool bPlainEQ);
END_CLASS

#ifdef __cplusplus
}
#endif

#endif  /* AUDIOSRV_H */

